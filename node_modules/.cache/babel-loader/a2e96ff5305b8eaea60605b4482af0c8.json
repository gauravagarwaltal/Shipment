{"ast":null,"code":"import _regeneratorRuntime from\"/home/gaurava/work/learning/react/shipment/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/gaurava/work/learning/react/shipment/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{contract_address,contract_abi}from\"./contract_config\";// import { Web3 } from \"web3\";\n// import { aliceAddress } from \"./wallet\";\nimport{FetchAccount}from'../components/MetaMaskFetch';import{toast}from'react-toastify';var Web3=require('web3');var web3=new Web3(Web3.givenProvider||\"http://localhost:8545\");var sideChainContract=new web3.eth.Contract(contract_abi,contract_address);var GetChannelDetails=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(channelId){var details,details_div;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return sideChainContract.methods.getChannel(channelId).call();case 3:details=_context.sent;details_div={'Alice Id':details['alice']['id'],'Alice Cash':details['alice']['cash'],'Alice Input Flag':String(details['alice']['waitForInput']),'Bob Id':details['bob']['id'],'Bob Cash':details['bob']['cash'],'Bob Input Flag':String(details['bob']['waitForInput']),'Timeout':details['timeout'],'Status':details['status'],'Published Tx Count':details['publish_tx_count'],'Money':details['money']};return _context.abrupt(\"return\",details_div);case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);console.log(\"contract details are tempered or connectivity issue\");console.log(_context.t0);case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function GetChannelDetails(_x){return _ref.apply(this,arguments);};}();var ChannelExists=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(channelId){var details;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return GetChannelDetails(channelId);case 2:details=_context2.sent;return _context2.abrupt(\"return\",/^0x0+$/.test(details['Alice Id']));case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function ChannelExists(_x2){return _ref2.apply(this,arguments);};}();var CreateNewChannel=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(channelId,theOtherParty){var sender,txHash;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return FetchAccount();case 2:sender=_context3.sent;console.log(sender,web3.utils.checkAddressChecksum(sender));_context3.prev=4;_context3.next=7;return sideChainContract.methods.openChannel(channelId,web3.utils.toChecksumAddress(theOtherParty)).send({from:web3.utils.toChecksumAddress(sender),gas:200000});case 7:txHash=_context3.sent;console.log('new channel created, txHash->',txHash.transactionHash);_context3.next=15;break;case 11:_context3.prev=11;_context3.t0=_context3[\"catch\"](4);console.log(\"Open Channel request reverted\");console.log(_context3.t0);case 15:case\"end\":return _context3.stop();}}},_callee3,null,[[4,11]]);}));return function CreateNewChannel(_x3,_x4){return _ref3.apply(this,arguments);};}();var ChannelConfirm=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(channelId,cash){var sender,flag,txHash;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return FetchAccount();case 3:sender=_context4.sent;_context4.next=6;return ChannelExists(channelId);case 6:flag=_context4.sent;if(!flag){_context4.next=11;break;}toast.error(\"Channel with \".concat(channelId,\" doesn't exists\"));_context4.next=16;break;case 11:_context4.next=13;return sideChainContract.methods.confirm(channelId).send({from:web3.utils.toChecksumAddress(sender),value:web3.utils.toHex(web3.utils.toWei(cash,'gwei')),gas:200000});case 13:txHash=_context4.sent;console.log('Channel Deposit Confirmed. txHash-> ',txHash.transactionHash);toast.success(\"Deposit confirmed\");case 16:_context4.next=23;break;case 18:_context4.prev=18;_context4.t0=_context4[\"catch\"](0);console.log(\"Channel Deposit request reverted\");console.log(_context4.t0);toast.error(\"Deposit Declined for Channel Id \".concat(channelId));case 23:case\"end\":return _context4.stop();}}},_callee4,null,[[0,18]]);}));return function ChannelConfirm(_x5,_x6){return _ref4.apply(this,arguments);};}();var ChannelRefund=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(channelId,self){var txHash;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return sideChainContract.methods.refund(channelId).send({from:web3.utils.toChecksumAddress(self),gas:200000});case 3:txHash=_context5.sent;console.log('Channel Refund Confirmed. txHash-> ',txHash.transactionHash);_context5.next=11;break;case 7:_context5.prev=7;_context5.t0=_context5[\"catch\"](0);console.log(\"Channel Refund request reverted\");console.log(_context5.t0);case 11:case\"end\":return _context5.stop();}}},_callee5,null,[[0,7]]);}));return function ChannelRefund(_x7,_x8){return _ref5.apply(this,arguments);};}();var IsValidSignature=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(addr,count,sender_balance,recipient_balance,signature){var flag;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;addr=web3.utils.toChecksumAddress(addr);_context6.next=4;return sideChainContract.methods.isValidSignature(addr,count,sender_balance,recipient_balance,signature).call();case 4:flag=_context6.sent;console.log('isValidSignature ',flag);_context6.next=12;break;case 8:_context6.prev=8;_context6.t0=_context6[\"catch\"](0);console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\");console.log(_context6.t0);case 12:case\"end\":return _context6.stop();}}},_callee6,null,[[0,8]]);}));return function IsValidSignature(_x9,_x10,_x11,_x12,_x13){return _ref6.apply(this,arguments);};}();var ChannelFinalizeClose=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(channelId,self){var txHash;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;_context7.next=3;return sideChainContract.methods.finalizeClose(channelId).send({from:web3.utils.toChecksumAddress(self),gas:200000});case 3:txHash=_context7.sent;console.log('Channel Closed. txHash-> ',txHash.transactionHash);_context7.next=11;break;case 7:_context7.prev=7;_context7.t0=_context7[\"catch\"](0);console.log(\"Channel finalizeClose request reverted\");console.log(_context7.t0);case 11:case\"end\":return _context7.stop();}}},_callee7,null,[[0,7]]);}));return function ChannelFinalizeClose(_x14,_x15){return _ref7.apply(this,arguments);};}();var ChannelClose=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(channel_id,count,sender_balance,recipient_balance,signature,self){var txHash;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.prev=0;_context8.next=3;return sideChainContract.methods.close(channel_id,count,sender_balance,recipient_balance,signature).send({from:web3.utils.toChecksumAddress(self),gas:200000});case 3:txHash=_context8.sent;console.log('Channel Close request proceed. txHash-> ',txHash.transactionHash);_context8.next=11;break;case 7:_context8.prev=7;_context8.t0=_context8[\"catch\"](0);console.log(\"Channel Closed request reverted\");console.log(_context8.t0);case 11:case\"end\":return _context8.stop();}}},_callee8,null,[[0,7]]);}));return function ChannelClose(_x16,_x17,_x18,_x19,_x20,_x21){return _ref8.apply(this,arguments);};}();export{GetChannelDetails,ChannelExists,CreateNewChannel,ChannelConfirm,ChannelRefund,IsValidSignature,ChannelFinalizeClose,ChannelClose};","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/contract/contract_transaction.js"],"names":["contract_address","contract_abi","FetchAccount","toast","Web3","require","web3","givenProvider","sideChainContract","eth","Contract","GetChannelDetails","channelId","methods","getChannel","call","details","details_div","String","console","log","ChannelExists","test","CreateNewChannel","theOtherParty","sender","utils","checkAddressChecksum","openChannel","toChecksumAddress","send","from","gas","txHash","transactionHash","ChannelConfirm","cash","flag","error","confirm","value","toHex","toWei","success","ChannelRefund","self","refund","IsValidSignature","addr","count","sender_balance","recipient_balance","signature","isValidSignature","ChannelFinalizeClose","finalizeClose","ChannelClose","channel_id","close"],"mappings":"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","sourcesContent":["import { contract_address, contract_abi } from \"./contract_config\";\n// import { Web3 } from \"web3\";\n// import { aliceAddress } from \"./wallet\";\nimport { FetchAccount } from '../components/MetaMaskFetch';\nimport { toast } from 'react-toastify';\n\nconst Web3 = require('web3')\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\nconst sideChainContract = new web3.eth.Contract(contract_abi, contract_address)\n\nconst GetChannelDetails = async (channelId) => {\n    try {\n        var details = await sideChainContract.methods.getChannel(channelId).call()\n        let details_div = {\n            'Alice Id': details['alice']['id'],\n            'Alice Cash': details['alice']['cash'],\n            'Alice Input Flag': String(details['alice']['waitForInput']),\n            'Bob Id': details['bob']['id'],\n            'Bob Cash': details['bob']['cash'],\n            'Bob Input Flag': String(details['bob']['waitForInput']),\n            'Timeout': details['timeout'],\n            'Status': details['status'],\n            'Published Tx Count': details['publish_tx_count'],\n            'Money': details['money']\n        }\n        return details_div;\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst ChannelExists = async (channelId) => {\n    let details = await GetChannelDetails(channelId)\n    return /^0x0+$/.test(details['Alice Id']);\n}\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n    const sender = await FetchAccount()\n    console.log(sender, web3.utils.checkAddressChecksum(sender))\n    try {\n        var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty))\n            .send({ from: web3.utils.toChecksumAddress(sender), gas: 200000 })\n        console.log('new channel created, txHash->', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Open Channel request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelConfirm = async (channelId, cash) => {\n    try {\n        const sender = await FetchAccount()\n        let flag = await ChannelExists(channelId)\n        if (flag) {\n            toast.error(`Channel with ${channelId} doesn't exists`)\n        } else {\n            var txHash = await sideChainContract.methods.confirm(channelId)\n                .send({ from: web3.utils.toChecksumAddress(sender), value: web3.utils.toHex(web3.utils.toWei(cash, 'gwei')), gas: 200000 })\n            console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n            toast.success(\"Deposit confirmed\")\n        }\n    } catch (error) {\n        console.log(\"Channel Deposit request reverted\")\n        console.log(error)\n        toast.error(`Deposit Declined for Channel Id ${channelId}`)\n    }\n}\n\nconst ChannelRefund = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.refund(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Refund request reverted\")\n        console.log(error)\n    }\n}\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n    try {\n        addr = web3.utils.toChecksumAddress(addr)\n        var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call()\n        console.log('isValidSignature ', flag);\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\")\n        console.log(error)\n    }\n}\n\nconst ChannelFinalizeClose = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.finalizeClose(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Closed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel finalizeClose request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n    try {\n        var txHash = await sideChainContract.methods.close(channel_id, count, sender_balance, recipient_balance, signature)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Close request proceed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Closed request reverted\")\n        console.log(error)\n    }\n}\n\n\nexport { GetChannelDetails, ChannelExists, CreateNewChannel, ChannelConfirm, ChannelRefund, IsValidSignature, ChannelFinalizeClose, ChannelClose }"]},"metadata":{},"sourceType":"module"}