{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/redisApi/nodecheck.js\";\nimport React from 'react';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.timeout = 250;\n\n    this.connect = () => {\n      var ws = new WebSocket(\"ws://localhost:3000/ws\");\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          ws: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(\"Socket is closed. Reconnect will be attempted in \".concat(Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000), \" second.\"), e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n    };\n\n    this.check = () => {\n      const ws = this.state.ws;\n      if (!ws || ws.readyState == WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.state = {\n      ws: null\n    };\n  } // single websocket instance for the own application and constantly trying to reconnect.\n\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      websocket: this.state.ws,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Main; // import { WebSocket } from \"ws\";\n// // var WebSocket = require('ws')\n// import { redis_connection } from \"redis-connection\";\n// function testJSON() {\n//     var jsonSocket = new WebSocket(\"ws://127.0.0.1:6379/.json\");\n//     jsonSocket.onopen = function () {\n//         console.log(\"JSON socket connected!\");\n//         jsonSocket.send(JSON.stringify([\"SET\", \"hello\", \"world\"]));\n//         jsonSocket.send(JSON.stringify([\"GET\", \"hello\"]));\n//     };\n//     jsonSocket.onmessage = function (messageEvent) {\n//         console.log(\"JSON received:\", messageEvent.data);\n//     };\n// }\n// function RedisConnection() {\n//     let redisClient = redis_connection; // require & connect\n//     redisClient.set('hello', 'world');\n//     redisClient.get('hello', function (err, reply) {\n//         console.log('hello', reply.toString()); // hello world\n//         redisClient.end(true); // this will \"flush\" any outstanding requests to redis\n//     });\n// }\n// export default RedisConnection;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/redisApi/nodecheck.js"],"names":["React","Main","Component","constructor","props","timeout","connect","ws","WebSocket","that","connectInterval","onopen","console","log","setState","clearTimeout","onclose","e","Math","min","reason","setTimeout","check","onerror","err","error","message","close","state","readyState","CLOSED","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAN,SAAmBC,SAAnB,CAA6B;AACzBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAcnBC,OAdmB,GAcT,GAdS;;AAAA,SAoBnBC,OApBmB,GAoBT,MAAM;AACZ,UAAIC,EAAE,GAAG,IAAIC,SAAJ,CAAc,wBAAd,CAAT;AACA,UAAIC,IAAI,GAAG,IAAX,CAFY,CAEK;;AACjB,UAAIC,eAAJ,CAHY,CAKZ;;AACAH,MAAAA,EAAE,CAACI,MAAH,GAAY,MAAM;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AAEA,aAAKC,QAAL,CAAc;AAAEP,UAAAA,EAAE,EAAEA;AAAN,SAAd;AAEAE,QAAAA,IAAI,CAACJ,OAAL,GAAe,GAAf,CALc,CAKM;;AACpBU,QAAAA,YAAY,CAACL,eAAD,CAAZ,CANc,CAMiB;AAClC,OAPD,CANY,CAeZ;;;AACAH,MAAAA,EAAE,CAACS,OAAH,GAAaC,CAAC,IAAI;AACdL,QAAAA,OAAO,CAACC,GAAR,4DACwDK,IAAI,CAACC,GAAL,CAChD,QAAQ,IADwC,EAEhD,CAACV,IAAI,CAACJ,OAAL,GAAeI,IAAI,CAACJ,OAArB,IAAgC,IAFgB,CADxD,eAKIY,CAAC,CAACG,MALN;AAQAX,QAAAA,IAAI,CAACJ,OAAL,GAAeI,IAAI,CAACJ,OAAL,GAAeI,IAAI,CAACJ,OAAnC,CATc,CAS8B;;AAC5CK,QAAAA,eAAe,GAAGW,UAAU,CAAC,KAAKC,KAAN,EAAaJ,IAAI,CAACC,GAAL,CAAS,KAAT,EAAgBV,IAAI,CAACJ,OAArB,CAAb,CAA5B,CAVc,CAU2D;AAC5E,OAXD,CAhBY,CA6BZ;;;AACAE,MAAAA,EAAE,CAACgB,OAAH,GAAaC,GAAG,IAAI;AAChBZ,QAAAA,OAAO,CAACa,KAAR,CACI,4BADJ,EAEID,GAAG,CAACE,OAFR,EAGI,gBAHJ;AAMAnB,QAAAA,EAAE,CAACoB,KAAH;AACH,OARD;AASH,KA3DkB;;AAAA,SAgEnBL,KAhEmB,GAgEX,MAAM;AAAA,YACFf,EADE,GACK,KAAKqB,KADV,CACFrB,EADE;AAEV,UAAI,CAACA,EAAD,IAAOA,EAAE,CAACsB,UAAH,IAAiBrB,SAAS,CAACsB,MAAtC,EAA8C,KAAKxB,OAAL,GAFpC,CAEoD;AACjE,KAnEkB;;AAGf,SAAKsB,KAAL,GAAa;AACTrB,MAAAA,EAAE,EAAE;AADK,KAAb;AAGH,GAPwB,CASzB;;;AAEAwB,EAAAA,iBAAiB,GAAG;AAChB,SAAKzB,OAAL;AACH;;AAyDD0B,EAAAA,MAAM,GAAG;AACL,WAAO;AAAK,MAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWrB,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAxEwB;;AA2E7B,eAAeN,IAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ws: null\n        };\n    }\n\n    // single websocket instance for the own application and constantly trying to reconnect.\n\n    componentDidMount() {\n        this.connect();\n    }\n\n    timeout = 250; // Initial timeout duration as a class variable\n\n    /**\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures constant reconnection if connection closes\n     */\n    connect = () => {\n        var ws = new WebSocket(\"ws://localhost:3000/ws\");\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n\n            this.setState({ ws: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    check = () => {\n        const { ws } = this.state;\n        if (!ws || ws.readyState == WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    render() {\n        return <div websocket={this.state.ws} />;\n    }\n}\n\nexport default Main;\n// import { WebSocket } from \"ws\";\n// // var WebSocket = require('ws')\n// import { redis_connection } from \"redis-connection\";\n// function testJSON() {\n//     var jsonSocket = new WebSocket(\"ws://127.0.0.1:6379/.json\");\n//     jsonSocket.onopen = function () {\n\n//         console.log(\"JSON socket connected!\");\n//         jsonSocket.send(JSON.stringify([\"SET\", \"hello\", \"world\"]));\n//         jsonSocket.send(JSON.stringify([\"GET\", \"hello\"]));\n//     };\n//     jsonSocket.onmessage = function (messageEvent) {\n//         console.log(\"JSON received:\", messageEvent.data);\n//     };\n// }\n\n// function RedisConnection() {\n//     let redisClient = redis_connection; // require & connect\n//     redisClient.set('hello', 'world');\n//     redisClient.get('hello', function (err, reply) {\n//         console.log('hello', reply.toString()); // hello world\n//         redisClient.end(true); // this will \"flush\" any outstanding requests to redis\n//     });\n// }\n// export default RedisConnection;"]},"metadata":{},"sourceType":"module"}