{"ast":null,"code":"import _regeneratorRuntime from\"/home/gaurava/work/learning/react/shipment/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/gaurava/work/learning/react/shipment/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{FetchAccount}from'../components/MetaMaskFetch';var Web3=require('web3');var web3=new Web3(Web3.givenProvider||\"http://localhost:8545\");function GenerateSignatures(_x,_x2,_x3){return _GenerateSignatures.apply(this,arguments);}function _GenerateSignatures(){_GenerateSignatures=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(count,aliceCash,bobCash){var hash,sender,sigAlice;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return web3.utils.soliditySha3({type:'uint',value:count},{type:'uint',value:aliceCash},{type:'uint',value:bobCash});case 2:hash=_context.sent;_context.next=5;return FetchAccount();case 5:sender=_context.sent;sender=web3.utils.toChecksumAddress(sender);console.log(sender);_context.next=10;return web3.eth.personal.sign(hash,sender,\"\");case 10:sigAlice=_context.sent;return _context.abrupt(\"return\",{alice:sigAlice});case 12:case\"end\":return _context.stop();}}},_callee);}));return _GenerateSignatures.apply(this,arguments);}export default GenerateSignatures;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/contract/CreateSignature.js"],"names":["FetchAccount","Web3","require","web3","givenProvider","GenerateSignatures","count","aliceCash","bobCash","utils","soliditySha3","type","value","hash","sender","toChecksumAddress","console","log","eth","personal","sign","sigAlice","alice"],"mappings":"uPAAA,OAASA,YAAT,KAA6B,6BAA7B,CACA,GAAMC,CAAAA,IAAI,CAAGC,OAAO,CAAC,MAAD,CAApB,CACA,GAAMC,CAAAA,IAAI,CAAG,GAAIF,CAAAA,IAAJ,CAASA,IAAI,CAACG,aAAL,EAAsB,uBAA/B,CAAb,C,QAGeC,CAAAA,kB,0KAAf,iBAAkCC,KAAlC,CAAyCC,SAAzC,CAAoDC,OAApD,iKASuBL,CAAAA,IAAI,CAACM,KAAL,CAAWC,YAAX,CACf,CAAEC,IAAI,CAAE,MAAR,CAAgBC,KAAK,CAAEN,KAAvB,CADe,CAEf,CAAEK,IAAI,CAAE,MAAR,CAAgBC,KAAK,CAAEL,SAAvB,CAFe,CAGf,CAAEI,IAAI,CAAE,MAAR,CAAgBC,KAAK,CAAEJ,OAAvB,CAHe,CATvB,QASUK,IATV,qCAcuBb,CAAAA,YAAY,EAdnC,QAcQc,MAdR,eAeIA,MAAM,CAAGX,IAAI,CAACM,KAAL,CAAWM,iBAAX,CAA6BD,MAA7B,CAAT,CACAE,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAhBJ,uBAiB2BX,CAAAA,IAAI,CAACe,GAAL,CAASC,QAAT,CAAkBC,IAAlB,CAAuBP,IAAvB,CAA6BC,MAA7B,CAAqC,EAArC,CAjB3B,SAiBUO,QAjBV,+CAoBW,CACHC,KAAK,CAAED,QADJ,CApBX,yD,qDA0BA,cAAehB,CAAAA,kBAAf","sourcesContent":["import { FetchAccount } from '../components/MetaMaskFetch';\nconst Web3 = require('web3')\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n\n\nasync function GenerateSignatures(count, aliceCash, bobCash) {\n\n    // const hash = await web3.utils.soliditySha3(\n    //     {type: 'address', value: vpc.options.address},\n    //     {type: 'uint', value: sid},\n    //     {type: 'uint', value: blockedAlice},\n    //     {type: 'uint', value: blockedBob},\n    //     {type: 'uint', value: version});\n\n    const hash = await web3.utils.soliditySha3(\n        { type: 'uint', value: count },\n        { type: 'uint', value: aliceCash },\n        { type: 'uint', value: bobCash });\n\n    let sender = await FetchAccount()\n    sender = web3.utils.toChecksumAddress(sender)\n    console.log(sender)\n    const sigAlice = await web3.eth.personal.sign(hash, sender, \"\");\n    //web3.eth.sign(hash,aliceAddr);\n    //web3.eth.sign(hash,bobAddr);\n    return {\n        alice: sigAlice\n    };\n}\n\n\nexport default GenerateSignatures;"]},"metadata":{},"sourceType":"module"}