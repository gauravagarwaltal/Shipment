{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js\";\nimport React from 'react'; // import {\n//     SocketProvider,\n//     socketConnect,\n// } from 'socket.io-react';\n// import { SocketProvider } from 'socket.io-react';\n\nimport io from 'socket.io-client';\nimport RenderSubscribedDetails from './RenderSubscribedDetails';\n\nclass ClientClass extends React.Component {\n  constructor() {\n    super();\n\n    this.onUserIdChange = async event => {\n      event.preventDefault();\n      this.setState({\n        userId: event.target.value\n      });\n      localStorage.setItem('userId', event.target.value);\n    };\n\n    this.onDeleteClick = async event => {\n      event.preventDefault();\n\n      for (var i = 0; i < this.state.response; i++) {\n        if (this.state.response[i] === event.target.value) {\n          this.state.response.splice(i, 1);\n        }\n      }\n\n      localStorage.setItem('response', JSON.stringify(this.state.response));\n      console.log(\"sss\");\n    };\n\n    this.state = {\n      userId: localStorage.getItem(\"userId\") || '',\n      response: JSON.parse(localStorage.getItem(\"response\") || \"[]\"),\n      endpoint: \"http://127.0.0.1:8001/notifications\",\n      socket: ''\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint;\n    console.log(this.state.userId);\n\n    if (this.state.userId !== '') {\n      //Very simply connect to the socket\n      this.state.socket = io.connect(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n      this.state.socket.on(\"notification\", (channel, message) => {\n        console.log(\"Hello \", message);\n        this.state.response.push(message);\n        localStorage.setItem('response', JSON.stringify(this.state.response)); // this.setState({ response: this.state.response + \"\\n\" + channel + \"\\n\" + message })\n      });\n      this.state.socket.on('connected', () => {\n        var msg = \"You are now connected for push notifications\";\n        console.log(msg); // let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n        // let value = []\n        // // newValue.push(msg)\n        // localStorage.setItem('response', JSON.stringify(value));\n        // this.setState({ response: newValue })\n        // Send the user ID\n\n        this.state.socket.emit('join', this.state.userId);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    let value = [];\n    localStorage.setItem('response', JSON.stringify(value));\n    this.state.socket.close();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"script\", {\n      src: \"/socket.io/socket.io.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"script\", {\n      src: \"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      id: \"idForm\",\n      onSubmit: this.state.componentDidMount,\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"User ID: \", React.createElement(\"input\", {\n      id: \"userId\",\n      type: \"text\",\n      onChange: this.onUserIdChange,\n      name: \"userId\",\n      className: \"form-control\",\n      value: this.state.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"formButton\",\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Messages from Subscribed channel ->'\", this.state.userId, \"':\"), React.createElement(RenderSubscribedDetails, {\n      details: this.state.response,\n      handleDeleteClick: this.state.onDeleteClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ClientClass;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js"],"names":["React","io","RenderSubscribedDetails","ClientClass","Component","constructor","onUserIdChange","event","preventDefault","setState","userId","target","value","localStorage","setItem","onDeleteClick","i","state","response","splice","JSON","stringify","console","log","getItem","parse","endpoint","socket","componentDidMount","connect","on","channel","message","push","msg","emit","componentWillUnmount","close","render","textAlign"],"mappings":"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","sourcesContent":["import React from 'react'\n// import {\n//     SocketProvider,\n//     socketConnect,\n// } from 'socket.io-react';\n\n// import { SocketProvider } from 'socket.io-react';\nimport io from 'socket.io-client';\nimport RenderSubscribedDetails from './RenderSubscribedDetails';\n\nclass ClientClass extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            userId: localStorage.getItem(\"userId\") || '',\n            response: JSON.parse(localStorage.getItem(\"response\") || \"[]\"),\n            endpoint: \"http://127.0.0.1:8001/notifications\",\n            socket: ''\n        };\n    }\n\n    componentDidMount() {\n        const { endpoint } = this.state;\n        console.log(this.state.userId)\n        if (this.state.userId !== '') {\n            //Very simply connect to the socket\n            this.state.socket = io.connect(endpoint);\n            //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n            this.state.socket.on(\"notification\", (channel, message) => {\n                console.log(\"Hello \", message)\n                this.state.response.push(message)\n                localStorage.setItem('response', JSON.stringify(this.state.response));\n                // this.setState({ response: this.state.response + \"\\n\" + channel + \"\\n\" + message })\n            });\n            this.state.socket.on('connected', () => {\n                var msg = \"You are now connected for push notifications\";\n                console.log(msg);\n                // let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n                // let value = []\n                // // newValue.push(msg)\n                // localStorage.setItem('response', JSON.stringify(value));\n                // this.setState({ response: newValue })\n                // Send the user ID\n                this.state.socket.emit('join', this.state.userId);\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        let value = []\n        localStorage.setItem('response', JSON.stringify(value));\n        this.state.socket.close();\n    }\n\n    onUserIdChange = async (event) => {\n        event.preventDefault();\n        this.setState({ userId: event.target.value })\n        localStorage.setItem('userId', event.target.value);\n    }\n\n    onDeleteClick = async (event) => {\n        event.preventDefault();\n        for (var i = 0; i < this.state.response; i++) {\n            if (this.state.response[i] === event.target.value) {\n                this.state.response.splice(i, 1);\n            }\n        }\n        localStorage.setItem('response', JSON.stringify(this.state.response));\n        console.log(\"sss\")\n    }\n\n    render() {\n        return (\n            <div style={{ textAlign: \"center\" }}>\n                <script src=\"/socket.io/socket.io.js\"></script>\n                <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n\n                <form id=\"idForm\" onSubmit={this.state.componentDidMount} action=\"\">\n                    User ID: <input\n                        id=\"userId\"\n                        type=\"text\"\n                        onChange={this.onUserIdChange}\n                        name=\"userId\"\n                        className=\"form-control\"\n                        value={this.state.userId}\n                    /><br />\n                    <input id=\"formButton\" type=\"submit\" value=\"Submit\" />\n                </form>\n                <h2>Messages from Subscribed channel ->'{this.state.userId}':</h2>\n                {/* <ReactSpeedometer\n                    maxValue={140}\n                    value={response}\n                    needleColor=\"black\"\n                    startColor=\"orange\"\n                    segments={10}\n                    endColor=\"red\"\n                    needleTransition={\"easeElastic\"}\n                    ringWidth={30}\n                    textColor={\"red\"}\n                /> */}\n                <RenderSubscribedDetails details={this.state.response} handleDeleteClick={this.state.onDeleteClick} />\n            </div>\n        )\n    }\n}\n\nexport default ClientClass;"]},"metadata":{},"sourceType":"module"}