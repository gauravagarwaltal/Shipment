{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/contract/contract_transaction.js\";\nimport React from 'react'; // import { Tx } from \"ethereumjs-tx\";\n\nimport { contract_address, contract_abi } from \"./contract_config\"; // import { Web3 } from \"web3\";\n\nimport { aliceAddress } from \"./wallet\";\nimport { checkMetaMask } from '../components/MetaMask'; // const Tx = require('ethereumjs-tx')\n\nconst Web3 = require('web3');\n\nconst web3 = new Web3(new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"))); // const web3 = checkMetaMask();\n// console.log(\"hello \", web3.eth.accounts)\n\nconst sideChainContract = new web3.eth.Contract(contract_abi, contract_address);\n\nconst Web3Instance = async () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n\n    try {\n      // Request account access if needed\n      await window.ethereum.enable(); // Acccounts now exposed\n\n      console.log(\"check \", window.web3.eth.accounts);\n    } catch (error) {// User denied account access...\n    }\n  } // Legacy dapp browsers...\n  else if (window.web3) {\n      window.web3 = new Web3(web3.currentProvider);\n      console.log(\"check1 \", window.web3.eth.accounts);\n    } // Non-dapp browsers...\n    else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      }\n\n  console.log(\"d\");\n};\n\nconst GetChannelDetails = async channelId => {\n  console.log(channelId); // function startExit( bytes prevTx, bytes prevTxProof, uint prevTxBlkNum, bytes tx, bytes txProof, uint txBlkNum)\n\n  try {\n    var details = await sideChainContract.methods.getChannel(channelId).call();\n    console.log('Alice', details['alice']['id'], details['alice']['cash'], details['alice']['waitForInput']);\n    console.log('Bob', details['bob']['id'], details['bob']['cash'], details['bob']['waitForInput']);\n    console.log('timeout', details['timeout']);\n    console.log('status', details['status']);\n    console.log('lastCount', details['publish_tx_count']);\n    console.log('Money', details['money']);\n    let details_div = \"\";\n    details_div = 'Alice ' + details['alice']['id'] + ' ' + details['alice']['cash'] + ' ' + details['alice']['waitForInput'] + '\\n';\n    details_div += 'Bob ' + details['bob']['id'] + ' ' + details['bob']['cash'] + ' ' + details['bob']['waitForInput'] + '\\n';\n    details_div += 'timeout ' + details['timeout'] + '\\n';\n    details_div += 'status ' + details['status'] + '\\n';\n    details_div += 'lastCount ' + details['publish_tx_count'] + '\\n';\n    details_div += 'Money ' + details['money'] + '\\n';\n    console.log(details_div);\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n  console.log(web3.utils.toChecksumAddress('0xbA886b598e75CD3526F789c8D58B95464e778387'));\n\n  try {\n    var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty)).send({\n      from: aliceAddress,\n      gas: 200000\n    });\n    console.log('new channel created, txHash->', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Open Channel request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelConfirm = async (channelId, self, cash) => {\n  try {\n    var txHash = await sideChainContract.methods.confirm(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      value: web3.utils.toHex(web3.utils.toWei(cash, 'gwei')),\n      gas: 200000\n    });\n    console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Deposit request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelRefund = async (channelId, self) => {\n  try {\n    var txHash = await sideChainContract.methods.refund(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Refund request reverted\");\n    console.log(error);\n  }\n};\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n  try {\n    var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call();\n    console.log('isValidSignature ', flag);\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\");\n    console.log(error);\n  }\n};\n\nconst ChannelFinalizeClose = async (channelId, self) => {\n  try {\n    var txHash = await sideChainContract.methods.finalizeClose(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Closed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel finalizeClose request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n  try {\n    var txHash = await sideChainContract.methods.close(channel_id, count, sender_balance, recipient_balance, signature).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Close request proceed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Closed request reverted\");\n    console.log(error);\n  }\n};\n\nconst Channel = () => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"App-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: CreateNewChannel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \" NewChannel\"), \" \", React.createElement(\"button\", {\n    onClick: ChannelConfirm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \" Channel confirm\"), \" \", React.createElement(\"button\", {\n    onClick: GetChannelDetails,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \" ShowDetails\"), \" \", React.createElement(\"button\", {\n    onClick: Web3Instance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \" MetaMask\")));\n};\n\nexport { GetChannelDetails, CreateNewChannel, ChannelConfirm, ChannelRefund, IsValidSignature, ChannelFinalizeClose, ChannelClose, Channel };","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/contract/contract_transaction.js"],"names":["React","contract_address","contract_abi","aliceAddress","checkMetaMask","Web3","require","web3","providers","HttpProvider","sideChainContract","eth","Contract","Web3Instance","window","ethereum","enable","console","log","accounts","error","currentProvider","GetChannelDetails","channelId","details","methods","getChannel","call","details_div","CreateNewChannel","theOtherParty","utils","toChecksumAddress","txHash","openChannel","send","from","gas","transactionHash","ChannelConfirm","self","cash","confirm","value","toHex","toWei","ChannelRefund","refund","IsValidSignature","addr","count","sender_balance","recipient_balance","signature","flag","isValidSignature","ChannelFinalizeClose","finalizeClose","ChannelClose","channel_id","close","Channel"],"mappings":"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","sourcesContent":["import React from 'react';\n// import { Tx } from \"ethereumjs-tx\";\nimport { contract_address, contract_abi } from \"./contract_config\";\n// import { Web3 } from \"web3\";\nimport { aliceAddress } from \"./wallet\";\nimport { checkMetaMask } from '../components/MetaMask';\n\n\n// const Tx = require('ethereumjs-tx')\nconst Web3 = require('web3')\nconst web3 = new Web3(new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")))\n// const web3 = checkMetaMask();\n// console.log(\"hello \", web3.eth.accounts)\nconst sideChainContract = new web3.eth.Contract(contract_abi, contract_address)\n\nconst Web3Instance = async () => {\n    if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        try {\n            // Request account access if needed\n            await window.ethereum.enable();\n            // Acccounts now exposed\n            console.log(\"check \", window.web3.eth.accounts);\n        } catch (error) {\n            // User denied account access...\n        }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n        window.web3 = new Web3(web3.currentProvider);\n        console.log(\"check1 \", window.web3.eth.accounts);\n    }\n    // Non-dapp browsers...\n    else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n    console.log(\"d\")\n}\n\nconst GetChannelDetails = async (channelId) => {\n    console.log(channelId)\n    // function startExit( bytes prevTx, bytes prevTxProof, uint prevTxBlkNum, bytes tx, bytes txProof, uint txBlkNum)\n    try {\n        var details = await sideChainContract.methods.getChannel(channelId).call()\n        console.log('Alice', details['alice']['id'], details['alice']['cash'], details['alice']['waitForInput']);\n        console.log('Bob', details['bob']['id'], details['bob']['cash'], details['bob']['waitForInput']);\n        console.log('timeout', details['timeout']);\n        console.log('status', details['status']);\n        console.log('lastCount', details['publish_tx_count']);\n        console.log('Money', details['money']);\n        let details_div = \"\"\n        details_div = 'Alice ' + details['alice']['id'] + ' ' + details['alice']['cash'] + ' ' + details['alice']['waitForInput'] + '\\n';\n        details_div += 'Bob ' + details['bob']['id'] + ' ' + details['bob']['cash'] + ' ' + details['bob']['waitForInput'] + '\\n';\n        details_div += 'timeout ' + details['timeout'] + '\\n';\n        details_div += 'status ' + details['status'] + '\\n';\n        details_div += 'lastCount ' + details['publish_tx_count'] + '\\n';\n        details_div += 'Money ' + details['money'] + '\\n';\n        console.log(details_div)\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n    console.log(web3.utils.toChecksumAddress('0xbA886b598e75CD3526F789c8D58B95464e778387'))\n    try {\n        var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty))\n            .send({ from: aliceAddress, gas: 200000 })\n        console.log('new channel created, txHash->', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Open Channel request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelConfirm = async (channelId, self, cash) => {\n    try {\n        var txHash = await sideChainContract.methods.confirm(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), value: web3.utils.toHex(web3.utils.toWei(cash, 'gwei')), gas: 200000 })\n        console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Deposit request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelRefund = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.refund(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Refund request reverted\")\n        console.log(error)\n    }\n}\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n    try {\n        var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call()\n        console.log('isValidSignature ', flag);\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\")\n        console.log(error)\n    }\n}\n\nconst ChannelFinalizeClose = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.finalizeClose(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Closed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel finalizeClose request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n    try {\n        var txHash = await sideChainContract.methods.close(channel_id, count, sender_balance, recipient_balance, signature)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Close request proceed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Closed request reverted\")\n        console.log(error)\n    }\n}\n\nconst Channel = () => {\n    return (\n        <div>\n            <div className=\"App-content\">\n                <button onClick={CreateNewChannel}> NewChannel</button>\n                {\" \"}\n                <button onClick={ChannelConfirm}> Channel confirm</button>\n                {\" \"}\n                <button onClick={GetChannelDetails}> ShowDetails</button>\n                {\" \"}\n                <button onClick={Web3Instance}> MetaMask</button>\n            </div>\n        </div >\n    );\n\n};\n\n\nexport { GetChannelDetails, CreateNewChannel, ChannelConfirm, ChannelRefund, IsValidSignature, ChannelFinalizeClose, ChannelClose, Channel }"]},"metadata":{},"sourceType":"module"}