{"ast":null,"code":"'use strict'; // Detect either spaces or tabs but not both to properly handle tabs for indentation and spaces for alignment\n\nvar _slicedToArray = require(\"/home/gaurava/work/learning/react/shipment/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst INDENT_REGEX = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n  let result = 0;\n  let maxUsed = 0;\n  let maxWeight = 0;\n\n  for (const _ref of indents) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const key = _ref2[0];\n\n    var _ref2$ = _slicedToArray(_ref2[1], 2);\n\n    const usedCount = _ref2$[0];\n    const weight = _ref2$[1];\n\n    if (usedCount > maxUsed || usedCount === maxUsed && weight > maxWeight) {\n      maxUsed = usedCount;\n      maxWeight = weight;\n      result = key;\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = string => {\n  if (typeof string !== 'string') {\n    throw new TypeError('Expected a string');\n  } // Remember the size of previous line's indentation\n\n\n  let previousSize = 0;\n  let previousIndentType; // Indents key (ident type + size of the indents/unindents)\n\n  let key; // Remember how many indents/unindents have occurred for a given size and how many lines follow a given indentation.\n  // The key is a concatenation of the indentation type (s = space and t = tab) and the size of the indents/unindents.\n  //\n  // indents = {\n  //    t3: [1, 0],\n  //    t4: [1, 5],\n  //    s5: [1, 0],\n  //   s12: [1, 0],\n  // }\n\n  const indents = new Map();\n\n  for (const line of string.split(/\\n/g)) {\n    if (!line) {\n      // Ignore empty lines\n      continue;\n    }\n\n    let indent;\n    let indentType;\n    let weight;\n    let entry;\n    const matches = line.match(INDENT_REGEX);\n\n    if (matches === null) {\n      previousSize = 0;\n      previousIndentType = '';\n    } else {\n      indent = matches[0].length;\n\n      if (matches[1]) {\n        indentType = 's';\n      } else {\n        indentType = 't';\n      }\n\n      if (indentType !== previousIndentType) {\n        previousSize = 0;\n      }\n\n      previousIndentType = indentType;\n      weight = 0;\n      const indentDifference = indent - previousSize;\n      previousSize = indent; // Previous line have same indent?\n\n      if (indentDifference === 0) {\n        weight++; // We use the key from previous loop\n      } else {\n        key = indentType + String(indentDifference > 0 ? indentDifference : -indentDifference);\n      } // Update the stats\n\n\n      entry = indents.get(key);\n\n      if (entry === undefined) {\n        entry = [1, 0]; // Init\n      } else {\n        entry = [++entry[0], entry[1] + weight];\n      }\n\n      indents.set(key, entry);\n    }\n  }\n\n  const result = getMostUsed(indents);\n  let amount = 0;\n  let type;\n  let indent = '';\n\n  if (result !== 0) {\n    amount = Number(result.slice(1));\n\n    if (result[0] === 's') {\n      type = 'space';\n      indent = ' '.repeat(amount);\n    } else {\n      type = 'tab';\n      indent = '\\t'.repeat(amount);\n    }\n  }\n\n  return {\n    amount,\n    type,\n    indent\n  };\n};","map":null,"metadata":{},"sourceType":"script"}