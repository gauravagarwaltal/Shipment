{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js\";\nimport React from 'react';\nimport { toast } from \"react-toastify\"; // import {\n//     SocketProvider,\n//     socketConnect,\n// } from 'socket.io-react';\n// import { SocketProvider } from 'socket.io-react';\n// import io from 'socket.io-client';\n// import RenderSubscribedDetails from './RenderSubscribedDetails';\n\nimport { IsValidSignature } from '../contract/contract_transaction';\nimport { FetchAccount } from '../components/MetaMaskFetch';\nimport GenerateSignatures from '../contract/CreateSignature';\nimport Socket from \"./Socket\";\n\nfunction onDeleteClick(response_array, value) {\n  console.log(response_array, value);\n  console.log(\"I'm Happy One\");\n  console.log(\"value\");\n  response_array.splice(value, 1);\n  localStorage.setItem('response', JSON.stringify(response_array));\n  console.log(response_array.length);\n}\n\nasync function onAcceptClick(request, socket) {\n  console.log(request);\n  let ReqObject = JSON.parse(request);\n  console.log(ReqObject.channel_id, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature);\n  const sender = await FetchAccount();\n  const flag = await IsValidSignature(sender, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature);\n  console.log(flag);\n  let result = await GenerateSignatures(ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash);\n  console.log(result);\n  ReqObject.signature = result.alice;\n  socket.emit('publishToChannel', 'newChannel', JSON.stringify(ReqObject));\n  console.log(\"all Done\");\n}\n\nclass ClientClass extends React.Component {\n  constructor() {\n    super();\n\n    this.onUserIdChange = async event => {\n      event.preventDefault();\n      this.setState({\n        userId: event.target.value\n      });\n      localStorage.setItem('userId', event.target.value);\n    };\n\n    this.onDeleteClick = async event => {\n      console.log(\"value\");\n\n      for (var i = 0; i < this.state.response.length; i++) {\n        if (this.state.response[i] === event) {\n          this.state.response.splice(i, 1);\n        }\n      }\n\n      localStorage.setItem('response', JSON.stringify(this.state.response));\n      console.log(\"sss\");\n    };\n\n    this.state = {\n      userId: localStorage.getItem(\"userId\") || '',\n      response: JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.state.userId);\n\n    if (this.state.userId !== '') {\n      //Very simply connect to the socket\n      // this.state.socket.open();\n      //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n      Socket.on(\"notification\", (channel, message) => {\n        console.log(\"Hello \", message);\n        this.state.response.push(message);\n        localStorage.setItem('response', JSON.stringify(this.state.response));\n      });\n      Socket.on('connected', () => {\n        var msg = \"You are now connected for push notifications\";\n        console.log(msg); // let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n        // let value = []\n        // // newValue.push(msg)\n        // localStorage.setItem('response', JSON.stringify(value));\n        // this.setState({ response: newValue })\n        // Send the user ID\n\n        Socket.emit('closeChannel', this.state.userId);\n        Socket.emit('join', this.state.userId);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    Socket.close();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"script\", {\n      src: \"/socket.io/socket.io.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"script\", {\n      src: \"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      id: \"idForm\",\n      onSubmit: this.state.componentDidMount,\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"User ID: \", React.createElement(\"input\", {\n      id: \"userId\",\n      type: \"text\",\n      onChange: this.onUserIdChange,\n      name: \"userId\",\n      className: \"form-control\",\n      value: this.state.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"formButton\",\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Messages from Subscribed channel ->'\", this.state.userId, \"':\"), React.createElement(\"table\", {\n      id: \"table\",\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Decline State\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Accept State\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"State Details\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, Object.keys(this.state.response).map(request => {\n      return React.createElement(\"tr\", {\n        key: request,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => onDeleteClick(this.state.response, request),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Delete Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => onAcceptClick(this.state.response[request], this.state.socket),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Accept Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, this.state.response[request])));\n    }))));\n  }\n\n}\n\nexport default ClientClass;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js"],"names":["React","toast","IsValidSignature","FetchAccount","GenerateSignatures","Socket","onDeleteClick","response_array","value","console","log","splice","localStorage","setItem","JSON","stringify","length","onAcceptClick","request","socket","ReqObject","parse","channel_id","count","Alice_Cash","Bob_Cash","signature","sender","flag","result","alice","emit","ClientClass","Component","constructor","onUserIdChange","event","preventDefault","setState","userId","target","i","state","response","getItem","componentDidMount","on","channel","message","push","msg","componentWillUnmount","close","render","textAlign","Object","keys","map"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { toast } from \"react-toastify\";\n// import {\n//     SocketProvider,\n//     socketConnect,\n// } from 'socket.io-react';\n\n// import { SocketProvider } from 'socket.io-react';\n// import io from 'socket.io-client';\n// import RenderSubscribedDetails from './RenderSubscribedDetails';\nimport { IsValidSignature } from '../contract/contract_transaction';\nimport { FetchAccount } from '../components/MetaMaskFetch';\nimport GenerateSignatures from '../contract/CreateSignature';\nimport Socket from \"./Socket\";\n\nfunction onDeleteClick(response_array, value) {\n    console.log(response_array, value)\n    console.log(\"I'm Happy One\")\n    console.log(\"value\")\n    response_array.splice(value, 1);\n    localStorage.setItem('response', JSON.stringify(response_array));\n    console.log(response_array.length)\n}\n\nasync function onAcceptClick(request, socket) {\n    console.log(request)\n    let ReqObject = JSON.parse(request)\n    console.log(ReqObject.channel_id, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n    const sender = await FetchAccount()\n    const flag = await IsValidSignature(sender, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n    console.log(flag)\n    let result = await GenerateSignatures(ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash)\n    console.log(result)\n    ReqObject.signature = result.alice\n    socket.emit('publishToChannel', 'newChannel', JSON.stringify(ReqObject));\n    console.log(\"all Done\")\n}\n\n\nclass ClientClass extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            userId: localStorage.getItem(\"userId\") || '',\n            response: JSON.parse(localStorage.getItem(\"response\") || \"[]\"),\n        };\n    }\n\n    componentDidMount() {\n        console.log(this.state.userId)\n        if (this.state.userId !== '') {\n            //Very simply connect to the socket\n            // this.state.socket.open();\n            //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n            Socket.on(\"notification\", (channel, message) => {\n                console.log(\"Hello \", message)\n                this.state.response.push(message)\n                localStorage.setItem('response', JSON.stringify(this.state.response));\n            });\n            Socket.on('connected', () => {\n                var msg = \"You are now connected for push notifications\";\n                console.log(msg);\n                // let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n                // let value = []\n                // // newValue.push(msg)\n                // localStorage.setItem('response', JSON.stringify(value));\n                // this.setState({ response: newValue })\n                // Send the user ID\n                Socket.emit('closeChannel', this.state.userId);\n                Socket.emit('join', this.state.userId);\n            });\n        }\n    }\n\n    componentWillUnmount() {\n\n        Socket.close();\n    }\n\n    onUserIdChange = async (event) => {\n        event.preventDefault();\n        this.setState({ userId: event.target.value })\n        localStorage.setItem('userId', event.target.value);\n    }\n\n    onDeleteClick = async (event) => {\n        console.log(\"value\")\n        for (var i = 0; i < this.state.response.length; i++) {\n            if (this.state.response[i] === event) {\n                this.state.response.splice(i, 1);\n            }\n        }\n        localStorage.setItem('response', JSON.stringify(this.state.response));\n        console.log(\"sss\")\n    }\n\n    render() {\n        return (\n            <div style={{ textAlign: \"center\" }}>\n                <script src=\"/socket.io/socket.io.js\"></script>\n                <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n\n                <form id=\"idForm\" onSubmit={this.state.componentDidMount} action=\"\">\n                    User ID: <input\n                        id=\"userId\"\n                        type=\"text\"\n                        onChange={this.onUserIdChange}\n                        name=\"userId\"\n                        className=\"form-control\"\n                        value={this.state.userId}\n                    /><br />\n                    <input id=\"formButton\" type=\"submit\" value=\"Submit\" />\n                </form>\n                <h2>Messages from Subscribed channel ->'{this.state.userId}':</h2>\n                <table id=\"table\" className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>Decline State</th>\n                            <th>Accept State</th>\n                            <th>State Details</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            Object.keys(this.state.response).map(request => {\n                                return (\n                                    <tr key={request}>\n                                        <td>\n                                            <button\n                                                className=\"btn btn-outline-danger\"\n                                                onClick={() => onDeleteClick(this.state.response, request)}\n                                            >\n                                                Delete Request\n                                            </button>\n                                        </td>\n                                        <td>\n                                            <button\n                                                className=\"btn btn-outline-danger\"\n                                                onClick={() => onAcceptClick(this.state.response[request], this.state.socket)}\n                                            >\n                                                Accept Request\n                                            </button>\n                                        </td>\n                                        {/* {this.state.response[request].map(user => {\n                                            return (\n                                                <td>{user}</td>\n                                            );\n                                        })} */}\n                                        <td><span>{this.state.response[request]}</span></td>\n                                        {/* <td>{JSON.parse(this.state.response[request])}</td> */}\n                                        {/* <td>{this.state.response[request].count}</td> */}\n                                        {/* <td>{this.state.response[request]['count']}</td> */}\n                                        {/* <td>{this.state.response[request].count}</td> */}\n                                    </tr>\n                                )\n\n                            }\n                            )\n                        }\n                    </tbody>\n                </table>\n                {/* <RenderSubscribedDetails details={this.state.response} handleDeleteClick={this.state.onDeleteClick} /> */}\n            </div>\n        )\n    }\n}\n\nexport default ClientClass;"]},"metadata":{},"sourceType":"module"}