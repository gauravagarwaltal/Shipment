{"ast":null,"code":"import { contract_address, contract_abi } from \"./contract_config\"; // import { Web3 } from \"web3\";\n// import { aliceAddress } from \"./wallet\";\n\nimport { FetchAccount } from '../components/MetaMaskFetch'; // const Tx = require('ethereumjs-tx')\n\nconst Web3 = require('web3'); // const web3 = new Web3(new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")))\n\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nconst sideChainContract = new web3.eth.Contract(contract_abi, contract_address); // const FetchAccount = async () => {\n//     let accounts = await web3.eth.getAccounts()\n//     console.log(accounts[0])\n//     return accounts[0]\n// }\n\nconst GetChannelDetails = async channelId => {\n  try {\n    var details = await sideChainContract.methods.getChannel(channelId).call();\n    let details_div = {\n      'Alice Id': details['alice']['id'],\n      'Alice Cash': details['alice']['cash'],\n      'Alice Input Flag': String(details['alice']['waitForInput']),\n      'Bob Id': details['bob']['id'],\n      'Bob Cash': details['bob']['cash'],\n      'Bob Input Flag': String(details['bob']['waitForInput']),\n      'Timeout': details['timeout'],\n      'Status': details['status'],\n      'Published Tx Count': details['publish_tx_count'],\n      'Money': details['money']\n    };\n    return details_div;\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n  const sender = await FetchAccount();\n  console.log(sender, web3.utils.checkAddressChecksum(sender));\n\n  try {\n    var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty)).send({\n      from: web3.utils.toChecksumAddress(sender),\n      gas: 200000\n    });\n    console.log('new channel created, txHash->', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Open Channel request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelConfirm = async (channelId, self, cash) => {\n  try {\n    const sender = await FetchAccount();\n    var txHash = await sideChainContract.methods.confirm(channelId).send({\n      from: web3.utils.toChecksumAddress(sender),\n      value: web3.utils.toHex(web3.utils.toWei(cash, 'gwei')),\n      gas: 200000\n    });\n    console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Deposit request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelRefund = async (channelId, self) => {\n  try {\n    var txHash = await sideChainContract.methods.refund(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Refund request reverted\");\n    console.log(error);\n  }\n};\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n  try {\n    var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call();\n    console.log('isValidSignature ', flag);\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\");\n    console.log(error);\n  }\n};\n\nconst ChannelFinalizeClose = async (channelId, self) => {\n  try {\n    var txHash = await sideChainContract.methods.finalizeClose(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Closed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel finalizeClose request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n  try {\n    var txHash = await sideChainContract.methods.close(channel_id, count, sender_balance, recipient_balance, signature).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Close request proceed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Closed request reverted\");\n    console.log(error);\n  }\n};\n\nexport { GetChannelDetails, CreateNewChannel, ChannelConfirm, ChannelRefund, IsValidSignature, ChannelFinalizeClose, ChannelClose };","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/contract/contract_transaction.js"],"names":["contract_address","contract_abi","FetchAccount","Web3","require","web3","givenProvider","sideChainContract","eth","Contract","GetChannelDetails","channelId","details","methods","getChannel","call","details_div","String","error","console","log","CreateNewChannel","theOtherParty","sender","utils","checkAddressChecksum","txHash","openChannel","toChecksumAddress","send","from","gas","transactionHash","ChannelConfirm","self","cash","confirm","value","toHex","toWei","ChannelRefund","refund","IsValidSignature","addr","count","sender_balance","recipient_balance","signature","flag","isValidSignature","ChannelFinalizeClose","finalizeClose","ChannelClose","channel_id","close"],"mappings":"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","sourcesContent":["import { contract_address, contract_abi } from \"./contract_config\";\n// import { Web3 } from \"web3\";\n// import { aliceAddress } from \"./wallet\";\nimport { FetchAccount } from '../components/MetaMaskFetch'\n\n// const Tx = require('ethereumjs-tx')\nconst Web3 = require('web3')\n// const web3 = new Web3(new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")))\n\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n\nconst sideChainContract = new web3.eth.Contract(contract_abi, contract_address)\n\n// const FetchAccount = async () => {\n//     let accounts = await web3.eth.getAccounts()\n//     console.log(accounts[0])\n//     return accounts[0]\n// }\n\nconst GetChannelDetails = async (channelId) => {\n    try {\n        var details = await sideChainContract.methods.getChannel(channelId).call()\n        let details_div = {\n            'Alice Id': details['alice']['id'],\n            'Alice Cash': details['alice']['cash'],\n            'Alice Input Flag': String(details['alice']['waitForInput']),\n            'Bob Id': details['bob']['id'],\n            'Bob Cash': details['bob']['cash'],\n            'Bob Input Flag': String(details['bob']['waitForInput']),\n            'Timeout': details['timeout'],\n            'Status': details['status'],\n            'Published Tx Count': details['publish_tx_count'],\n            'Money': details['money']\n        }\n        return details_div;\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n    const sender = await FetchAccount()\n    console.log(sender, web3.utils.checkAddressChecksum(sender))\n    try {\n        var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty))\n            .send({ from: web3.utils.toChecksumAddress(sender), gas: 200000 })\n        console.log('new channel created, txHash->', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Open Channel request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelConfirm = async (channelId, self, cash) => {\n    try {\n        const sender = await FetchAccount()\n        var txHash = await sideChainContract.methods.confirm(channelId)\n            .send({ from: web3.utils.toChecksumAddress(sender), value: web3.utils.toHex(web3.utils.toWei(cash, 'gwei')), gas: 200000 })\n        console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Deposit request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelRefund = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.refund(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Refund request reverted\")\n        console.log(error)\n    }\n}\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n    try {\n        var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call()\n        console.log('isValidSignature ', flag);\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\")\n        console.log(error)\n    }\n}\n\nconst ChannelFinalizeClose = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.finalizeClose(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Closed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel finalizeClose request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n    try {\n        var txHash = await sideChainContract.methods.close(channel_id, count, sender_balance, recipient_balance, signature)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Close request proceed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Closed request reverted\")\n        console.log(error)\n    }\n}\n\n\nexport { GetChannelDetails, CreateNewChannel, ChannelConfirm, ChannelRefund, IsValidSignature, ChannelFinalizeClose, ChannelClose }"]},"metadata":{},"sourceType":"module"}