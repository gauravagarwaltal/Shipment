{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/PendingStates.js\";\nimport React from \"react\"; // import PropTypes from \"prop-types\";\n// import { Link } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\nimport './UserList.css';\n\nfunction FetchPendingState(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"User DataBase\"), React.createElement(\"table\", {\n    id: \"table\",\n    className: \"table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"\\xA0\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Address\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Category\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Listening On\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, props.users.map(user => {\n    return React.createElement(\"tr\", {\n      key: user.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-outline-danger\",\n      onClick: () => {\n        const min = 1000;\n        const max = 100000000;\n        const rand = Math.floor(min + Math.random() * (max - min));\n        console.log(rand);\n        props.createNewChannel(rand, user.address).then(() => {\n          // Add Channel Id in List\n          // set default state as an last state\n          // set listening socket from UserList \n          toast.success(\"Channel Created with id \" + rand);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"CreateChannel\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, user.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, user.address), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, user.category), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, user.listen));\n  }))));\n} // UserList.propTypes = {\n//     deleteCourse: PropTypes.func.isRequired,\n//     courses: PropTypes.arrayOf(\n//         PropTypes.shape({\n//             id: PropTypes.number.isRequired,\n//             title: PropTypes.string.isRequired,\n//             authorId: PropTypes.number.isRequired,\n//             category: PropTypes.string.isRequired\n//         })\n//     ).isRequired\n// };\n\n\nconst PendingState = props => {\n  return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Channel Details\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Hello React with Local Storage!\"), React.createElement(\"form\", {\n    id: \"form\",\n    onSubmit: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: value,\n    type: \"text\",\n    onChange: onValueChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, value), React.createElement(\"button\", {\n    id: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Testing Form Data\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"channel -> '\", channels, \"'\")), React.createElement(\"form\", {\n    id: \"form\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"channelId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Channel Id\"), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(ChannelList, {\n    onChange: onOptionChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), errors && React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, errors)), React.createElement(\"button\", {\n    id: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Get Channel Details\")), errors === '' && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Channel Details of channel id -> \", channelId), React.createElement(ManageDetailsView, {\n    details: details,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: GetReceipt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Fetch Last State\"), React.createElement(EditFiles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })));\n};\n\nexport default PendingState;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/PendingStates.js"],"names":["React","toast","FetchPendingState","props","users","map","user","id","min","max","rand","Math","floor","random","console","log","createNewChannel","address","then","success","name","category","listen","PendingState","onChange","value","onValueChange","channels","handleSubmit","onOptionChange","errors","channelId","details","GetReceipt"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import PropTypes from \"prop-types\";\n// import { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport './UserList.css'\nfunction FetchPendingState(props) {\n    return (\n        <div>\n            <h2>User DataBase</h2>\n            <table id='table' className=\"table\">\n                <thead>\n                    <tr>\n                        <th>&nbsp;</th>\n                        <th>Name</th>\n                        <th>Address</th>\n                        <th>Category</th>\n                        <th>Listening On</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.users.map(user => {\n                        return (\n                            <tr key={user.id}>\n                                <td>\n                                    <button\n                                        className=\"btn btn-outline-danger\"\n                                        onClick={() => {\n                                            const min = 1000;\n                                            const max = 100000000;\n                                            const rand = Math.floor(min + Math.random() * (max - min));\n                                            console.log(rand)\n                                            props.createNewChannel(rand, user.address).then(() => {\n                                                // Add Channel Id in List\n                                                // set default state as an last state\n                                                // set listening socket from UserList \n                                                toast.success(\"Channel Created with id \" + rand);\n                                            });\n                                        }}\n                                    >\n                                        CreateChannel\n                                </button>\n                                </td>\n                                <td>{user.name}</td>\n                                <td>{user.address}</td>\n                                <td>{user.category}</td>\n                                <td>{user.listen}</td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\n// UserList.propTypes = {\n//     deleteCourse: PropTypes.func.isRequired,\n//     courses: PropTypes.arrayOf(\n//         PropTypes.shape({\n//             id: PropTypes.number.isRequired,\n//             title: PropTypes.string.isRequired,\n//             authorId: PropTypes.number.isRequired,\n//             category: PropTypes.string.isRequired\n//         })\n//     ).isRequired\n// };\n\nconst PendingState = props => {\n    return (\n        <>\n            <h2>Channel Details</h2>\n            <div>\n                <div>\n                    <h1>Hello React with Local Storage!</h1>\n                    <form id=\"form\" onSubmit={onChange}>\n                        <input value={value} type=\"text\" onChange={onValueChange} />\n                        <p>{value}</p>\n                        <button id=\"button\">Testing Form Data</button>\n                    </form>\n                    <p>channel -> '{channels}'</p>\n                </div>\n                <form id=\"form\" onSubmit={handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"channelId\">Channel Id</label>\n                        <div className=\"field\">\n                            <ChannelList onChange={onOptionChange} />\n                        </div>\n                        {errors && <div className=\"alert alert-danger\">{errors}</div>}\n                    </div>\n                    <button id=\"button\">Get Channel Details</button>\n                </form>\n                {(errors === '') && (\n                    <div >\n                        <h2>Channel Details of channel id -> {channelId}</h2>\n                        <ManageDetailsView details={details} />\n                    </div>\n                )}\n                <button onClick={GetReceipt}>Fetch Last State</button>\n                <EditFiles />\n            </div>\n        </>\n    );\n};\nexport default PendingState;\n"]},"metadata":{},"sourceType":"module"}