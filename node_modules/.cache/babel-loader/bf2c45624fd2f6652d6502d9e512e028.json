{"ast":null,"code":"const axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5002';\n\nconst FetchRequests = async (channelId, address, request_type, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/fetch_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst SetRequest = async channelId => {\n  let details = await GetChannelDetails(channelId);\n  return /^0x0+$/.test(details['Alice Id']);\n};\n\nconst UpdateRequest = async (channelId, theOtherParty) => {\n  const sender = await FetchAccount();\n  console.log(sender, web3.utils.checkAddressChecksum(sender));\n\n  try {\n    var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty)).send({\n      from: web3.utils.toChecksumAddress(sender),\n      gas: 200000\n    });\n    console.log('new channel created, txHash->', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Open Channel request reverted\");\n    console.log(error);\n  }\n};\n\nconst DeleteRequest = async (channelId, cash) => {\n  try {\n    const sender = await FetchAccount();\n    let flag = await ChannelExists(channelId);\n\n    if (flag) {\n      toast.error(\"Channel with \".concat(channelId, \" doesn't exists\"));\n    } else {\n      var txHash = await sideChainContract.methods.confirm(channelId).send({\n        from: web3.utils.toChecksumAddress(sender),\n        value: web3.utils.toHex(web3.utils.toWei(cash, 'wei')),\n        gas: 200000\n      });\n      console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n      toast.success(\"Deposit confirmed\");\n    }\n  } catch (error) {\n    console.log(\"Channel Deposit request reverted\");\n    console.log(error);\n    toast.error(\"Deposit Declined for Channel Id \".concat(channelId));\n  }\n};\n\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest };","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/redisApi/GetSetData.js"],"names":["axios","require","RedisHandlerURL","FetchRequests","channelId","address","request_type","request_data","bodyFormData","FormData","set","resp","method","url","data","status","error","console","log","SetRequest","details","GetChannelDetails","test","UpdateRequest","theOtherParty","sender","FetchAccount","web3","utils","checkAddressChecksum","txHash","sideChainContract","methods","openChannel","toChecksumAddress","send","from","gas","transactionHash","DeleteRequest","cash","flag","ChannelExists","toast","confirm","value","toHex","toWei","success"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,eAAe,GAAG,uBAAxB;;AAEA,MAAMC,aAAa,GAAG,OAAOC,SAAP,EAAkBC,OAAlB,EAA2BC,YAA3B,EAAyCC,YAAzC,KAA0D;AAC5E,MAAI;AACA,QAAIC,YAAY,GAAG,IAAIC,QAAJ,EAAnB;AACAD,IAAAA,YAAY,CAACE,GAAb,CAAiB,YAAjB,EAA+BN,SAA/B;AACAI,IAAAA,YAAY,CAACE,GAAb,CAAiB,SAAjB,EAA4BL,OAA5B;AACAG,IAAAA,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiCJ,YAAjC;AACAE,IAAAA,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiCH,YAAjC;AACA,UAAMI,IAAI,GAAG,MAAMX,KAAK,CAAC;AACrBY,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,GAAG,EAAEX,eAAe,GAAG,gBAFF;AAGrBY,MAAAA,IAAI,EAAEN;AAHe,KAAD,CAAxB;;AAKA,QAAIG,IAAI,CAACI,MAAL,KAAgB,GAApB,EAAyB;AACrB,aAAOJ,IAAI,CAACG,IAAZ;AACH;;AACD,WAAO,IAAP;AACH,GAfD,CAeE,OAAOE,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CApBD;;AAsBA,MAAMG,UAAU,GAAG,MAAOf,SAAP,IAAqB;AACpC,MAAIgB,OAAO,GAAG,MAAMC,iBAAiB,CAACjB,SAAD,CAArC;AACA,SAAO,SAASkB,IAAT,CAAcF,OAAO,CAAC,UAAD,CAArB,CAAP;AACH,CAHD;;AAKA,MAAMG,aAAa,GAAG,OAAOnB,SAAP,EAAkBoB,aAAlB,KAAoC;AACtD,QAAMC,MAAM,GAAG,MAAMC,YAAY,EAAjC;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ,EAAoBE,IAAI,CAACC,KAAL,CAAWC,oBAAX,CAAgCJ,MAAhC,CAApB;;AACA,MAAI;AACA,QAAIK,MAAM,GAAG,MAAMC,iBAAiB,CAACC,OAAlB,CAA0BC,WAA1B,CAAsC7B,SAAtC,EAAiDuB,IAAI,CAACC,KAAL,CAAWM,iBAAX,CAA6BV,aAA7B,CAAjD,EACdW,IADc,CACT;AAAEC,MAAAA,IAAI,EAAET,IAAI,CAACC,KAAL,CAAWM,iBAAX,CAA6BT,MAA7B,CAAR;AAA8CY,MAAAA,GAAG,EAAE;AAAnD,KADS,CAAnB;AAEApB,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CY,MAAM,CAACQ,eAApD;AACH,GAJD,CAIE,OAAOtB,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAXD;;AAaA,MAAMuB,aAAa,GAAG,OAAOnC,SAAP,EAAkBoC,IAAlB,KAA2B;AAC7C,MAAI;AACA,UAAMf,MAAM,GAAG,MAAMC,YAAY,EAAjC;AACA,QAAIe,IAAI,GAAG,MAAMC,aAAa,CAACtC,SAAD,CAA9B;;AACA,QAAIqC,IAAJ,EAAU;AACNE,MAAAA,KAAK,CAAC3B,KAAN,wBAA4BZ,SAA5B;AACH,KAFD,MAEO;AACH,UAAI0B,MAAM,GAAG,MAAMC,iBAAiB,CAACC,OAAlB,CAA0BY,OAA1B,CAAkCxC,SAAlC,EACd+B,IADc,CACT;AAAEC,QAAAA,IAAI,EAAET,IAAI,CAACC,KAAL,CAAWM,iBAAX,CAA6BT,MAA7B,CAAR;AAA8CoB,QAAAA,KAAK,EAAElB,IAAI,CAACC,KAAL,CAAWkB,KAAX,CAAiBnB,IAAI,CAACC,KAAL,CAAWmB,KAAX,CAAiBP,IAAjB,EAAuB,KAAvB,CAAjB,CAArD;AAAsGH,QAAAA,GAAG,EAAE;AAA3G,OADS,CAAnB;AAEApB,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDY,MAAM,CAACQ,eAA3D;AACAK,MAAAA,KAAK,CAACK,OAAN,CAAc,mBAAd;AACH;AACJ,GAXD,CAWE,OAAOhC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA2B,IAAAA,KAAK,CAAC3B,KAAN,2CAA+CZ,SAA/C;AACH;AACJ,CAjBD;;AAmBA,SAASD,aAAT,EAAwBgB,UAAxB,EAAoCI,aAApC,EAAmDgB,aAAnD","sourcesContent":["const axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5002';\n\nconst FetchRequests = async (channelId, address, request_type, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/fetch_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst SetRequest = async (channelId) => {\n    let details = await GetChannelDetails(channelId)\n    return /^0x0+$/.test(details['Alice Id']);\n}\n\nconst UpdateRequest = async (channelId, theOtherParty) => {\n    const sender = await FetchAccount()\n    console.log(sender, web3.utils.checkAddressChecksum(sender))\n    try {\n        var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty))\n            .send({ from: web3.utils.toChecksumAddress(sender), gas: 200000 })\n        console.log('new channel created, txHash->', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Open Channel request reverted\")\n        console.log(error)\n    }\n}\n\nconst DeleteRequest = async (channelId, cash) => {\n    try {\n        const sender = await FetchAccount()\n        let flag = await ChannelExists(channelId)\n        if (flag) {\n            toast.error(`Channel with ${channelId} doesn't exists`)\n        } else {\n            var txHash = await sideChainContract.methods.confirm(channelId)\n                .send({ from: web3.utils.toChecksumAddress(sender), value: web3.utils.toHex(web3.utils.toWei(cash, 'wei')), gas: 200000 })\n            console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n            toast.success(\"Deposit confirmed\")\n        }\n    } catch (error) {\n        console.log(\"Channel Deposit request reverted\")\n        console.log(error)\n        toast.error(`Deposit Declined for Channel Id ${channelId}`)\n    }\n}\n\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest };"]},"metadata":{},"sourceType":"module"}