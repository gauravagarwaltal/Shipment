{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js\";\nimport React from 'react';\nimport { SocketProvider, socketConnect } from 'socket.io-react'; // import { SocketProvider } from 'socket.io-react';\n\nimport io from 'socket.io-client';\nimport socketIOClient from 'socket.io-client';\nconst socket = io.connect('http://127.0.0.1:5000');\nsocket.on('message', msg => console.log(msg));\n\nconst Listening = async props => {}; // $(document).ready(function () {\n//     $($(\"input[id=formButton]\")).click(function () {\n//         var userId = $('#idForm').find('input[name=\"userId\"]').val();\n//         $('#idForm').hide(5);\n//         // push notifications stuff------------------------------------\n//         //connect to the socket\n//         var socket = io.connect('http://127.0.0.1:8001/notifications');\n//         $(\"#messages\").append('<li>Connecting...</li>');\n//         //Redis notification receiver\n//         socket.on('notification', function (channel, notification) {\n//             console.log(channel + ': ' + notification);\n//             $(\"#messages\").append('<li>' + channel + ': ' + notification + '</li>');\n//         });\n//         //Connection confirmation\n//         socket.on('connected', function () {\n//             var msg = \"You are now connected for push notifications\";\n//             console.log(msg);\n//             $(\"#messages\").append('<li>' + msg + '</li>');\n//             // Send the user ID\n//             socket.emit('join', userId);\n//         });\n//         // End push notifications stuff---------------------------------\n//         return false;\n//     });\n// });\n\n\nconst Client = async => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"script\", {\n    src: \"/socket.io/socket.io.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"script\", {\n    src: \"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"idForm\",\n    action: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"User ID: \", React.createElement(\"input\", {\n    type: \"text\",\n    name: \"userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"formButton\",\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Messages from server:\"), React.createElement(\"ul\", {\n    id: \"messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n};\n\nclass ClientClass extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      response: 0,\n      endpoint: \"http://127.0.0.1:8001/notifications\"\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint; //Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.on(\"outgoing data\", data => this.setState({\n      response: data.num\n    }));\n  }\n\n  render() {\n    const response = this.state.response;\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"script\", {\n      src: \"/socket.io/socket.io.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"script\", {\n      src: \"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      id: \"idForm\",\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"User ID: \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"userId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"formButton\",\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Messages from server:\"), React.createElement(\"ul\", {\n      id: \"messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), response);\n  }\n\n}\n\nexport default ClientClass;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js"],"names":["React","SocketProvider","socketConnect","io","socketIOClient","socket","connect","on","msg","console","log","Listening","props","Client","async","ClientClass","Component","constructor","state","response","endpoint","componentDidMount","data","setState","num","render","textAlign"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    SocketProvider,\n    socketConnect,\n} from 'socket.io-react';\n\n// import { SocketProvider } from 'socket.io-react';\nimport io from 'socket.io-client';\nimport socketIOClient from 'socket.io-client'\nconst socket = io.connect('http://127.0.0.1:5000');\nsocket.on('message', msg => console.log(msg));\n\nconst Listening = async (props) => {\n\n}\n// $(document).ready(function () {\n\n//     $($(\"input[id=formButton]\")).click(function () {\n//         var userId = $('#idForm').find('input[name=\"userId\"]').val();\n//         $('#idForm').hide(5);\n\n//         // push notifications stuff------------------------------------\n//         //connect to the socket\n//         var socket = io.connect('http://127.0.0.1:8001/notifications');\n//         $(\"#messages\").append('<li>Connecting...</li>');\n\n\n//         //Redis notification receiver\n//         socket.on('notification', function (channel, notification) {\n//             console.log(channel + ': ' + notification);\n//             $(\"#messages\").append('<li>' + channel + ': ' + notification + '</li>');\n//         });\n\n//         //Connection confirmation\n//         socket.on('connected', function () {\n//             var msg = \"You are now connected for push notifications\";\n//             console.log(msg);\n//             $(\"#messages\").append('<li>' + msg + '</li>');\n//             // Send the user ID\n//             socket.emit('join', userId);\n//         });\n//         // End push notifications stuff---------------------------------\n//         return false;\n//     });\n// });\n\n\n\nconst Client = async => {\n    return (\n        <div>\n            <script src=\"/socket.io/socket.io.js\"></script>\n            <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n\n            <form id=\"idForm\" action=\"\">\n                User ID: <input type=\"text\" name=\"userId\" /><br />\n                <input id=\"formButton\" type=\"submit\" value=\"Submit\" />\n            </form>\n            <h2>Messages from server:</h2>\n            <ul id=\"messages\">\n            </ul>\n        </div>\n    )\n}\n\nclass ClientClass extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            response: 0,\n            endpoint: \"http://127.0.0.1:8001/notifications\"\n        };\n    }\n\n    componentDidMount() {\n        const { endpoint } = this.state;\n        //Very simply connect to the socket\n        const socket = socketIOClient(endpoint);\n        //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n        socket.on(\"outgoing data\", data => this.setState({ response: data.num }));\n    }\n\n    render() {\n        const { response } = this.state;\n        return (\n            <div style={{ textAlign: \"center\" }}>\n                <script src=\"/socket.io/socket.io.js\"></script>\n                <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n\n                <form id=\"idForm\" action=\"\">\n                    User ID: <input type=\"text\" name=\"userId\" /><br />\n                    <input id=\"formButton\" type=\"submit\" value=\"Submit\" />\n                </form>\n                <h2>Messages from server:</h2>\n                <ul id=\"messages\">\n                </ul>\n                {/* <ReactSpeedometer\n                    maxValue={140}\n                    value={response}\n                    needleColor=\"black\"\n                    startColor=\"orange\"\n                    segments={10}\n                    endColor=\"red\"\n                    needleTransition={\"easeElastic\"}\n                    ringWidth={30}\n                    textColor={\"red\"}\n                /> */}\n                {response}\n            </div>\n        )\n    }\n}\n\nexport default ClientClass;"]},"metadata":{},"sourceType":"module"}