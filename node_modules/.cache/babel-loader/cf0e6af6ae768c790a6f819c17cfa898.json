{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/redisApi/GetSetData.js\";\nimport React from 'react';\n\nconst axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5000';\n\nasync function FetchRequests(channelId, address, request_type) {\n  try {\n    const response = await fetch(RedisHandlerURL + '/fetch_states', {\n      method: 'POST',\n      body: JSON.stringify({\n        channel_id: 'New title added',\n        address: 'New body added. Hello body.',\n        request_type: 2\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    });\n    console.log(response.json()); // return response.json()\n    // var bodyFormData = new FormData();\n    // bodyFormData.set('channel_id', channelId);\n    // bodyFormData.set('address', address);\n    // bodyFormData.set('request_type', request_type);\n    // const resp = await axios({\n    //     method: 'post',\n    //     url: RedisHandlerURL + '/fetch_states',\n    //     data: bodyFormData\n    // })\n    // if (resp.status === 200) {\n    //     console.log(resp.data)\n    //     return resp.data;\n    // }\n    // return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n}\n\nconst SetRequest = async (channelId, address, request_type, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/set_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst UpdateRequest = async (channelId, address, request_type, index, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('index', index);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/update_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst DeleteRequest = async (channelId, address, request_type, index, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('index', index);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/delete_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst PublishData = async () => {\n  var previous_response_length = 0;\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", \"http://127.0.0.1:6379/SUBSCRIBE/hello\", true);\n  xhr.onreadystatechange = checkData;\n  xhr.send(null);\n\n  function checkData() {\n    if (xhr.readyState === 3) {\n      const response = xhr.responseText;\n      const chunk = response.slice(previous_response_length);\n      previous_response_length = response.length;\n      console.log(chunk);\n    }\n  }\n};\n\nfunction ABC() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"dsdcw\", React.createElement(\"button\", {\n    onClick: FetchRequests(2, 3, 4),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }));\n}\n\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest, PublishData, ABC };","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/redisApi/GetSetData.js"],"names":["React","axios","require","RedisHandlerURL","FetchRequests","channelId","address","request_type","response","fetch","method","body","JSON","stringify","channel_id","headers","console","log","json","error","SetRequest","request_data","bodyFormData","FormData","set","resp","url","data","status","UpdateRequest","index","DeleteRequest","PublishData","previous_response_length","xhr","XMLHttpRequest","open","onreadystatechange","checkData","send","readyState","responseText","chunk","slice","length","ABC"],"mappings":"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","sourcesContent":["import React from 'react'\nconst axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5000';\n\nasync function FetchRequests(channelId, address, request_type) {\n    try {\n        const response = await fetch(RedisHandlerURL + '/fetch_states', {\n            method: 'POST',\n            body: JSON.stringify({\n                channel_id: 'New title added',\n                address: 'New body added. Hello body.',\n                request_type: 2\n            }),\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        })\n        console.log(response.json())\n        // return response.json()\n        // var bodyFormData = new FormData();\n        // bodyFormData.set('channel_id', channelId);\n        // bodyFormData.set('address', address);\n        // bodyFormData.set('request_type', request_type);\n        // const resp = await axios({\n        //     method: 'post',\n        //     url: RedisHandlerURL + '/fetch_states',\n        //     data: bodyFormData\n        // })\n        // if (resp.status === 200) {\n        //     console.log(resp.data)\n        //     return resp.data;\n        // }\n        // return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst SetRequest = async (channelId, address, request_type, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/set_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst UpdateRequest = async (channelId, address, request_type, index, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('index', index);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/update_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst DeleteRequest = async (channelId, address, request_type, index, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('index', index);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/delete_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst PublishData = async () => {\n\n\n    var previous_response_length = 0\n    let xhr = new XMLHttpRequest()\n    xhr.open(\"GET\", \"http://127.0.0.1:6379/SUBSCRIBE/hello\", true);\n    xhr.onreadystatechange = checkData;\n    xhr.send(null);\n\n    function checkData() {\n        if (xhr.readyState === 3) {\n            const response = xhr.responseText;\n            const chunk = response.slice(previous_response_length);\n            previous_response_length = response.length;\n            console.log(chunk);\n        }\n    }\n}\n\nfunction ABC() {\n    return (\n        <div>\n            dsdcw\n            <button onClick={FetchRequests(2, 3, 4)}></button>\n        </div>\n    )\n}\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest, PublishData, ABC };"]},"metadata":{},"sourceType":"module"}