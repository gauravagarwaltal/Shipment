{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js\";\nimport React from 'react';\nimport { toast } from \"react-toastify\"; // import {\n//     SocketProvider,\n//     socketConnect,\n// } from 'socket.io-react';\n// import { SocketProvider } from 'socket.io-react';\n\nimport io from 'socket.io-client';\nimport RenderSubscribedDetails from './RenderSubscribedDetails';\nimport { IsValidSignature } from '../contract/contract_transaction';\nimport { FetchAccount } from '../components/MetaMaskFetch';\n\nfunction onDeleteClick(response_array, value) {\n  console.log(response_array, value);\n  console.log(\"I'm Happy One\");\n  console.log(\"value\");\n  response_array.splice(value, 1);\n  localStorage.setItem('response', JSON.stringify(response_array));\n  console.log(response_array.length);\n}\n\nasync function onAcceptClick(request) {\n  console.log(request);\n  let ReqObject = JSON.parse(request);\n  console.log(ReqObject.channel_id, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature);\n  const sender = await FetchAccount();\n  const flag = await IsValidSignature(sender, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature);\n  console.log(flag);\n}\n\nclass ClientClass extends React.Component {\n  constructor() {\n    super();\n\n    this.onUserIdChange = async event => {\n      event.preventDefault();\n      this.setState({\n        userId: event.target.value\n      });\n      localStorage.setItem('userId', event.target.value);\n    };\n\n    this.onDeleteClick = async event => {\n      console.log(\"value\");\n\n      for (var i = 0; i < this.state.response.length; i++) {\n        if (this.state.response[i] === event) {\n          this.state.response.splice(i, 1);\n        }\n      }\n\n      localStorage.setItem('response', JSON.stringify(this.state.response));\n      console.log(\"sss\");\n    };\n\n    this.state = {\n      userId: localStorage.getItem(\"userId\") || '',\n      response: JSON.parse(localStorage.getItem(\"response\") || \"[]\"),\n      endpoint: \"http://127.0.0.1:8001/notifications\",\n      socket: ''\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint;\n    console.log(this.state.userId);\n\n    if (this.state.userId !== '') {\n      //Very simply connect to the socket\n      this.state.socket = io.connect(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n      this.state.socket.on(\"notification\", (channel, message) => {\n        console.log(\"Hello \", message);\n        this.state.response.push(message);\n        localStorage.setItem('response', JSON.stringify(this.state.response)); // this.setState({ response: this.state.response + \"\\n\" + channel + \"\\n\" + message })\n      });\n      this.state.socket.on('connected', () => {\n        var msg = \"You are now connected for push notifications\";\n        console.log(msg); // let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n        // let value = []\n        // // newValue.push(msg)\n        // localStorage.setItem('response', JSON.stringify(value));\n        // this.setState({ response: newValue })\n        // Send the user ID\n\n        this.state.socket.emit('join', this.state.userId);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    let value = [];\n    localStorage.setItem('response', JSON.stringify(value));\n    this.state.socket.close();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"script\", {\n      src: \"/socket.io/socket.io.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"script\", {\n      src: \"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      id: \"idForm\",\n      onSubmit: this.state.componentDidMount,\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"User ID: \", React.createElement(\"input\", {\n      id: \"userId\",\n      type: \"text\",\n      onChange: this.onUserIdChange,\n      name: \"userId\",\n      className: \"form-control\",\n      value: this.state.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"formButton\",\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Messages from Subscribed channel ->'\", this.state.userId, \"':\"), React.createElement(\"table\", {\n      id: \"table\",\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Type\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"value\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, Object.keys(this.state.response).map(request => {\n      return React.createElement(\"tr\", {\n        key: request,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => onDeleteClick(this.state.response, request),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Delete Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => onAcceptClick(this.state.response[request]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Accept Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, this.state.response[request])));\n    }))));\n  }\n\n}\n\nexport default ClientClass;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js"],"names":["React","toast","io","RenderSubscribedDetails","IsValidSignature","FetchAccount","onDeleteClick","response_array","value","console","log","splice","localStorage","setItem","JSON","stringify","length","onAcceptClick","request","ReqObject","parse","channel_id","count","Alice_Cash","Bob_Cash","signature","sender","flag","ClientClass","Component","constructor","onUserIdChange","event","preventDefault","setState","userId","target","i","state","response","getItem","endpoint","socket","componentDidMount","connect","on","channel","message","push","msg","emit","componentWillUnmount","close","render","textAlign","Object","keys","map"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { toast } from \"react-toastify\";\n// import {\n//     SocketProvider,\n//     socketConnect,\n// } from 'socket.io-react';\n\n// import { SocketProvider } from 'socket.io-react';\nimport io from 'socket.io-client';\nimport RenderSubscribedDetails from './RenderSubscribedDetails';\nimport { IsValidSignature } from '../contract/contract_transaction';\nimport { FetchAccount } from '../components/MetaMaskFetch';\n\nfunction onDeleteClick(response_array, value) {\n    console.log(response_array, value)\n    console.log(\"I'm Happy One\")\n    console.log(\"value\")\n    response_array.splice(value, 1);\n    localStorage.setItem('response', JSON.stringify(response_array));\n    console.log(response_array.length)\n}\n\nasync function onAcceptClick(request) {\n    console.log(request)\n    let ReqObject = JSON.parse(request)\n    console.log(ReqObject.channel_id, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n    const sender = await FetchAccount()\n    const flag = await IsValidSignature(sender, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n    console.log(flag)\n}\n\n\nclass ClientClass extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            userId: localStorage.getItem(\"userId\") || '',\n            response: JSON.parse(localStorage.getItem(\"response\") || \"[]\"),\n            endpoint: \"http://127.0.0.1:8001/notifications\",\n            socket: ''\n        };\n    }\n\n    componentDidMount() {\n        const { endpoint } = this.state;\n        console.log(this.state.userId)\n        if (this.state.userId !== '') {\n            //Very simply connect to the socket\n            this.state.socket = io.connect(endpoint);\n            //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n            this.state.socket.on(\"notification\", (channel, message) => {\n                console.log(\"Hello \", message)\n                this.state.response.push(message)\n                localStorage.setItem('response', JSON.stringify(this.state.response));\n                // this.setState({ response: this.state.response + \"\\n\" + channel + \"\\n\" + message })\n            });\n            this.state.socket.on('connected', () => {\n                var msg = \"You are now connected for push notifications\";\n                console.log(msg);\n                // let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n                // let value = []\n                // // newValue.push(msg)\n                // localStorage.setItem('response', JSON.stringify(value));\n                // this.setState({ response: newValue })\n                // Send the user ID\n                this.state.socket.emit('join', this.state.userId);\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        let value = []\n        localStorage.setItem('response', JSON.stringify(value));\n        this.state.socket.close();\n    }\n\n    onUserIdChange = async (event) => {\n        event.preventDefault();\n        this.setState({ userId: event.target.value })\n        localStorage.setItem('userId', event.target.value);\n    }\n\n    onDeleteClick = async (event) => {\n        console.log(\"value\")\n        for (var i = 0; i < this.state.response.length; i++) {\n            if (this.state.response[i] === event) {\n                this.state.response.splice(i, 1);\n            }\n        }\n        localStorage.setItem('response', JSON.stringify(this.state.response));\n        console.log(\"sss\")\n    }\n\n    render() {\n        return (\n            <div style={{ textAlign: \"center\" }}>\n                <script src=\"/socket.io/socket.io.js\"></script>\n                <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n\n                <form id=\"idForm\" onSubmit={this.state.componentDidMount} action=\"\">\n                    User ID: <input\n                        id=\"userId\"\n                        type=\"text\"\n                        onChange={this.onUserIdChange}\n                        name=\"userId\"\n                        className=\"form-control\"\n                        value={this.state.userId}\n                    /><br />\n                    <input id=\"formButton\" type=\"submit\" value=\"Submit\" />\n                </form>\n                <h2>Messages from Subscribed channel ->'{this.state.userId}':</h2>\n                <table id=\"table\" className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>Type</th>\n                            <th>value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            Object.keys(this.state.response).map(request => {\n                                return (\n                                    <tr key={request}>\n                                        <td>\n                                            <button\n                                                className=\"btn btn-outline-danger\"\n                                                onClick={() => onDeleteClick(this.state.response, request)}\n                                            >\n                                                Delete Request\n                                            </button>\n                                        </td>\n                                        <td>\n                                            <button\n                                                className=\"btn btn-outline-danger\"\n                                                onClick={() => onAcceptClick(this.state.response[request])}\n                                            >\n                                                Accept Request\n                                            </button>\n                                        </td>\n                                        {/* {this.state.response[request].map(user => {\n                                            return (\n                                                <td>{user}</td>\n                                            );\n                                        })} */}\n                                        <td><span>{this.state.response[request]}</span></td>\n                                        {/* <td>{JSON.parse(this.state.response[request])}</td> */}\n                                        {/* <td>{this.state.response[request].count}</td> */}\n                                        {/* <td>{this.state.response[request]['count']}</td> */}\n                                        {/* <td>{this.state.response[request].count}</td> */}\n                                    </tr>\n                                )\n\n                            }\n                            )\n                        }\n                    </tbody>\n                </table>\n                {/* <RenderSubscribedDetails details={this.state.response} handleDeleteClick={this.state.onDeleteClick} /> */}\n            </div>\n        )\n    }\n}\n\nexport default ClientClass;"]},"metadata":{},"sourceType":"module"}