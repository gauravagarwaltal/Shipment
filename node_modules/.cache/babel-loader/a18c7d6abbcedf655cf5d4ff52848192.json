{"ast":null,"code":"'use strict';\n\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname; // for testing\n\nmodule.exports._cleanupOnExit = cleanupOnExit;\n\nconst fs = require('fs');\n\nconst MurmurHash3 = require('imurmurhash');\n\nconst onExit = require('signal-exit');\n\nconst path = require('path');\n\nconst isTypedArray = require('is-typedarray');\n\nconst typedArrayToBuffer = require('typedarray-to-buffer');\n\nconst _require = require('util'),\n      promisify = _require.promisify;\n\nconst activeFiles = {}; // if we run inside of a worker_thread, `process.pid` is not unique\n\n/* istanbul ignore next */\n\nconst threadId = function getId() {\n  try {\n    const workerThreads = require('worker_threads'); /// if we are in main thread, this is set to `0`\n\n\n    return workerThreads.threadId;\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0;\n  }\n}();\n\nlet invocations = 0;\n\nfunction getTmpname(filename) {\n  return filename + '.' + MurmurHash3(__filename).hash(String(process.pid)).hash(String(threadId)).hash(String(++invocations)).result();\n}\n\nfunction cleanupOnExit(tmpfile) {\n  return () => {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile);\n    } catch (_) {}\n  };\n}\n\nfunction serializeActiveFile(absoluteName) {\n  return new Promise(resolve => {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = [];\n    activeFiles[absoluteName].push(resolve); // add this job to the queue\n\n    if (activeFiles[absoluteName].length === 1) resolve(); // kick off the first one\n  });\n}\n\nasync function writeFileAsync(filename, data, options = {}) {\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  let fd;\n  let tmpfile;\n  /* istanbul ignore next -- The closure only gets called when onExit triggers */\n\n  const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile));\n  const absoluteName = path.resolve(filename);\n\n  try {\n    await serializeActiveFile(absoluteName);\n    const truename = await promisify(fs.realpath)(filename).catch(() => filename);\n    tmpfile = getTmpname(truename);\n\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      const stats = await promisify(fs.stat)(truename).catch(() => {});\n\n      if (stats) {\n        if (options.mode == null) {\n          options.mode = stats.mode;\n        }\n\n        if (options.chown == null && process.getuid) {\n          options.chown = {\n            uid: stats.uid,\n            gid: stats.gid\n          };\n        }\n      }\n    }\n\n    fd = await promisify(fs.open)(tmpfile, 'w', options.mode);\n\n    if (options.tmpfileCreated) {\n      await options.tmpfileCreated(tmpfile);\n    }\n\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data);\n    }\n\n    if (Buffer.isBuffer(data)) {\n      await promisify(fs.write)(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      await promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      await promisify(fs.fsync)(fd);\n    }\n\n    fd = null;\n\n    if (options.chown) {\n      await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid);\n    }\n\n    if (options.mode) {\n      await promisify(fs.chmod)(tmpfile, options.mode);\n    }\n\n    await promisify(fs.rename)(tmpfile, truename);\n    removeOnExitHandler();\n  } finally {\n    if (fd) {\n      await promisify(fs.close)(fd).catch(\n      /* istanbul ignore next */\n      () => {});\n    }\n\n    removeOnExitHandler();\n    await promisify(fs.unlink)(tmpfile).catch(() => {});\n    activeFiles[absoluteName].shift(); // remove the element added by serializeSameFile\n\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0](); // start next job if one is pending\n    } else delete activeFiles[absoluteName];\n  }\n}\n\nfunction writeFile(filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options;\n    options = {};\n  }\n\n  const promise = writeFileAsync(filename, data, options);\n\n  if (callback) {\n    promise.then(callback, callback);\n  }\n\n  return promise;\n}\n\nfunction writeFileSync(filename, data, options) {\n  if (typeof options === 'string') options = {\n    encoding: options\n  };else if (!options) options = {};\n\n  try {\n    filename = fs.realpathSync(filename);\n  } catch (ex) {// it's ok, it'll happen on a not yet existing file\n  }\n\n  const tmpfile = getTmpname(filename);\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      const stats = fs.statSync(filename);\n      options = Object.assign({}, options);\n\n      if (!options.mode) {\n        options.mode = stats.mode;\n      }\n\n      if (!options.chown && process.getuid) {\n        options.chown = {\n          uid: stats.uid,\n          gid: stats.gid\n        };\n      }\n    } catch (ex) {// ignore stat errors\n    }\n  }\n\n  let fd;\n  const cleanup = cleanupOnExit(tmpfile);\n  const removeOnExitHandler = onExit(cleanup);\n\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode);\n\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile);\n    }\n\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data);\n    }\n\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd);\n    }\n\n    fs.closeSync(fd);\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n    if (options.mode) fs.chmodSync(tmpfile, options.mode);\n    fs.renameSync(tmpfile, filename);\n    removeOnExitHandler();\n  } catch (err) {\n    if (fd) {\n      try {\n        fs.closeSync(fd);\n      } catch (ex) {// ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n\n    removeOnExitHandler();\n    cleanup();\n    throw err;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}