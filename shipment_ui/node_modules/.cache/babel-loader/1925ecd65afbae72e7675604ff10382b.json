{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/RefundChannel.js\";\nimport React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails, MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass RefundChannel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      onChainState: false,\n      formFlag: false,\n      sender: \"\",\n      action: '',\n      aliceCash: '',\n      bobCash: ''\n    };\n\n    this.onActionChange = async event => this.setState({\n      'action': event.target.value\n    });\n\n    this.actionHandler = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        alert(\"Check MetaMask Connectivity\");\n      }\n\n      this.setState({\n        'errors': false\n      });\n      console.log(\"this.state.action\", this.state.action);\n\n      if (this.state.action === 'select action' || this.state.action === '') {\n        this.setState({\n          'errors': \"Please select action from drop down\"\n        });\n      } else {\n        let url = \"/waitingChannel/\" + this.state.waitingChannelId;\n        console.log(url); // console.log(this.props);\n\n        this.props.history.push(url);\n        this.props.history.push({\n          pathname: '/actionconfirmation',\n          search: '?query=' + this.state.channelId,\n          state: {\n            channelId: this.state.channelId,\n            action: this.state.action\n          }\n        });\n      }\n    };\n\n    this.handleNewTransaction = async event => {\n      event.preventDefault();\n      this.setState({\n        'errors': false\n      });\n\n      if (Number.isNaN(parseInt(this.state.aliceCash, 10))) {\n        this.setState({\n          'errors': \"Enter Integer amount(in wei unit)\"\n        });\n      } else if (Number.isNaN(parseInt(this.state.bobCash, 10))) {\n        this.setState({\n          'errors': \"Enter Integer amount(in wei unit)\"\n        });\n      } else {\n        let total_money = parseInt(this.state.offChainState['Alice Cash']) + parseInt(this.state.offChainState['Bob Cash']);\n\n        if (total_money === parseInt(this.state.aliceCash) + parseInt(this.state.bobCash)) {\n          let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash)); // console.log(sig)\n          // let sender = await FetchAccount()\n\n          await IsValidSignature(this.state.sender, this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash), sig); // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n\n          let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender);\n          let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig);\n          let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState);\n          console.log(\"hello \", response);\n        } else {\n          this.setState({\n            'errors': \"total money is not equals to channel locked money\"\n          });\n        }\n      }\n\n      this.setState({\n        'aliceCash': \"\"\n      });\n      this.setState({\n        'bobCash': \"\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender); // let key = this.state.sender + 'active_channel_ids'\n\n        this.setState({\n          'channelId': this.props.location.state.channelId\n        });\n        this.setState({\n          'action': this.props.location.state.action\n        });\n        console.log(this.state.action, this.state.channelId);\n\n        if (this.state.action === 'Refund') {\n          GetChannelDetails(this.state.channelId).then(onChainState => {\n            this.setState({\n              'onChainState': onChainState\n            });\n            this.setState({\n              'formFlag': true\n            });\n          }).catch(err => {\n            alert(\"on chain state issue\");\n            console.log(err);\n          });\n          this.setState({\n            'formFlag': true\n          });\n        } else {\n          alert(\"go back \");\n        }\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Channel Id: \", this.state.channelId), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.onChainState && React.createElement(OnChainStateView, {\n      details: this.state.onChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.state.formFlag && React.createElement(\"form\", {\n      id: \"form\",\n      className: \"mt-2\",\n      onSubmit: this.handleNewTransaction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"Count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Count\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"Count\",\n      readOnly: true,\n      type: \"text\",\n      name: \"Count\",\n      className: \"form-control\",\n      value: parseInt(this.state.offChainState['count']) + 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"aliceCash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Alice Cash\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"aliceCash\",\n      type: \"text\",\n      onChange: event => this.setState({\n        aliceCash: event.target.value\n      }),\n      name: \"aliceCash\",\n      className: \"form-control\",\n      value: this.state.aliceCash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"bobCash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Bob Cash\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"bobCash\",\n      type: \"text\",\n      onChange: event => this.setState({\n        bobCash: event.target.value\n      }),\n      name: \"bobCash\",\n      className: \"form-control\",\n      value: this.state.bobCash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })), this.state.errors && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.errors)), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit Transaction\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })))));\n  }\n\n}\n\n;\nexport default RefundChannel;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/RefundChannel.js"],"names":["React","IsValidSignature","FetchOtherParty","GetChannelDetails","FetchAccount","OnChainStateView","OffChainStateView","FetchOffChainDetails","MakeStringState","GenerateSignatures","SetRequest","STATE_TYPE","RefundChannel","Component","state","errors","channelId","onChainState","formFlag","sender","action","aliceCash","bobCash","onActionChange","event","setState","target","value","actionHandler","preventDefault","undefined","alert","console","log","url","waitingChannelId","props","history","push","pathname","search","handleNewTransaction","Number","isNaN","parseInt","total_money","offChainState","sig","TheOtherParty","stringifyState","response","Request","componentDidMount","then","location","catch","err","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails, MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass RefundChannel extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        onChainState: false,\n        formFlag: false,\n        sender: \"\",\n        action: '',\n        aliceCash: '',\n        bobCash: '',\n    }\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n                this.setState({ 'sender': sender })\n                console.log(this.state.sender)\n                // let key = this.state.sender + 'active_channel_ids'\n                this.setState({ 'channelId': this.props.location.state.channelId })\n                this.setState({ 'action': this.props.location.state.action })\n                console.log(this.state.action, this.state.channelId)\n                if (this.state.action === 'Refund') {\n                    GetChannelDetails(this.state.channelId).then(onChainState => {\n                        this.setState({ 'onChainState': onChainState })\n                        this.setState({ 'formFlag': true })\n                    }).catch(err => {\n                        alert(\"on chain state issue\")\n                        console.log(err)\n                    })\n                    this.setState({ 'formFlag': true })\n                }\n                else {\n                    alert(\"go back \")\n                }\n            }\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    onActionChange = async (event) => this.setState({ 'action': event.target.value });\n\n    actionHandler = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            alert(\"Check MetaMask Connectivity\")\n        }\n        this.setState({ 'errors': false });\n        console.log(\"this.state.action\", this.state.action)\n        if (this.state.action === 'select action' || this.state.action === '') {\n            this.setState({ 'errors': \"Please select action from drop down\" })\n        }\n        else {\n            let url = \"/waitingChannel/\" + this.state.waitingChannelId\n            console.log(url)\n            // console.log(this.props);\n            this.props.history.push(url);\n            this.props.history.push({\n                pathname: '/actionconfirmation',\n                search: '?query=' + this.state.channelId,\n                state: {\n                    channelId: this.state.channelId,\n                    action: this.state.action\n                }\n            })\n        }\n    }\n\n    handleNewTransaction = async (event) => {\n        event.preventDefault();\n        this.setState({ 'errors': false })\n        if (Number.isNaN(parseInt(this.state.aliceCash, 10))) {\n            this.setState({ 'errors': \"Enter Integer amount(in wei unit)\" })\n        }\n        else if (Number.isNaN(parseInt(this.state.bobCash, 10))) {\n            this.setState({ 'errors': \"Enter Integer amount(in wei unit)\" })\n        }\n        else {\n            let total_money = parseInt(this.state.offChainState['Alice Cash']) + parseInt(this.state.offChainState['Bob Cash'])\n            if (total_money === (parseInt(this.state.aliceCash) + parseInt(this.state.bobCash))) {\n                let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash))\n                // console.log(sig)\n                // let sender = await FetchAccount()\n                await IsValidSignature(this.state.sender, this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash), sig)\n\n                // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n                let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender)\n                let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig)\n                let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState)\n                console.log(\"hello \", response)\n\n            }\n            else {\n                this.setState({ 'errors': \"total money is not equals to channel locked money\" })\n            }\n\n        }\n        this.setState({ 'aliceCash': \"\" })\n        this.setState({ 'bobCash': \"\" })\n\n\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Channel Id: {this.state.channelId}</h2>\n                <div>\n                    <div>\n                        {this.state.onChainState && <OnChainStateView details={this.state.onChainState} />}\n                    </div>\n\n                    <div>\n                        {this.state.formFlag &&\n                            <form id=\"form\" className=\"mt-2\" onSubmit={this.handleNewTransaction}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"Count\">Count</label>\n                                    <div className=\"field\">\n                                        <input\n                                            id=\"Count\"\n                                            readOnly\n                                            type=\"text\"\n                                            name=\"Count\"\n                                            className=\"form-control\"\n                                            value={parseInt(this.state.offChainState['count']) + 1}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"aliceCash\">Alice Cash</label>\n                                    <div className=\"field\">\n                                        <input\n                                            id=\"aliceCash\"\n                                            type=\"text\"\n                                            onChange={event => this.setState({ aliceCash: event.target.value })}\n                                            name=\"aliceCash\"\n                                            className=\"form-control\"\n                                            value={this.state.aliceCash}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"bobCash\">Bob Cash</label>\n                                    <div className=\"field\">\n                                        <input\n                                            id=\"bobCash\"\n                                            type=\"text\"\n                                            onChange={event => this.setState({ bobCash: event.target.value })}\n                                            name=\"bobCash\"\n                                            className=\"form-control\"\n                                            value={this.state.bobCash}\n                                        />\n                                    </div>\n                                    {this.state.errors && <div className=\"alert alert-danger\">{this.state.errors}</div>}\n                                </div>\n                                <input type=\"submit\" value=\"Submit Transaction\" className=\"btn btn-primary\" />\n                            </form>}\n                    </div>\n                </div>\n\n            </>\n        );\n    }\n};\n\nexport default RefundChannel;\n"]},"metadata":{},"sourceType":"module"}