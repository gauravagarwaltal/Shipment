{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js\";\nimport React from 'react';\nimport { SocketProvider, socketConnect } from 'socket.io-react'; // import { SocketProvider } from 'socket.io-react';\n\nimport io from 'socket.io-client';\nimport socketIOClient from 'socket.io-client';\nconst socket = io.connect('http://127.0.0.1:5000');\nsocket.on('message', msg => console.log(msg));\n{// $(document).ready(function () {\n  //     $($(\"input[id=formButton]\")).click(function () {\n  //         var userId = $('#idForm').find('input[name=\"userId\"]').val();\n  //         $('#idForm').hide(5);\n  //         // push notifications stuff------------------------------------\n  //         //connect to the socket\n  //         var socket = io.connect('http://127.0.0.1:8001/notifications');\n  //         $(\"#messages\").append('<li>Connecting...</li>');\n  //         //Redis notification receiver\n  //         socket.on('notification', function (channel, notification) {\n  //             console.log(channel + ': ' + notification);\n  //             $(\"#messages\").append('<li>' + channel + ': ' + notification + '</li>');\n  //         });\n  //         //Connection confirmation\n  //         socket.on('connected', function () {\n  //             var msg = \"You are now connected for push notifications\";\n  //             console.log(msg);\n  //             $(\"#messages\").append('<li>' + msg + '</li>');\n  //             // Send the user ID\n  //             socket.emit('join', userId);\n  //         });\n  //         // End push notifications stuff---------------------------------\n  //         return false;\n  //     });\n  // });\n}\n\nclass ClientClass extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: '',\n      response: JSON.parse(localStorage.getItem(\"response\") || \"[]\"),\n      endpoint: \"http://127.0.0.1:8001/notifications\"\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint;\n    console.log(this.state.userId);\n\n    if (this.state.userId !== '') {\n      //Very simply connect to the socket\n      const socket = io.connect(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n      socket.on(\"notification\", data => this.setState({\n        response: this.state.response + \"\\n\" + data.num\n      }));\n      socket.on('connected', () => {\n        var msg = \"You are now connected for push notifications\";\n        console.log(msg);\n        let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\");\n        newValue.push(msg);\n        localStorage.setItem('response', JSON.stringify(newValue)); // this.setState({ response: newValue })\n        // Send the user ID\n\n        socket.emit('join', this.state.userId);\n      });\n    }\n  }\n\n  render() {\n    const response = this.state.response;\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"script\", {\n      src: \"/socket.io/socket.io.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"script\", {\n      src: \"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      id: \"idForm\",\n      onSubmit: this.state.componentDidMount,\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"User ID: \", React.createElement(\"input\", {\n      id: \"userId\",\n      type: \"text\",\n      onChange: event => this.setState({\n        userId: event.target.value\n      }),\n      name: \"userId\",\n      className: \"form-control\",\n      value: this.state.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"formButton\",\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Messages from server:\"), response);\n  }\n\n}\n\nexport default ClientClass;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js"],"names":["React","SocketProvider","socketConnect","io","socketIOClient","socket","connect","on","msg","console","log","ClientClass","Component","constructor","state","userId","response","JSON","parse","localStorage","getItem","endpoint","componentDidMount","data","setState","num","newValue","push","setItem","stringify","emit","render","textAlign","event","target","value"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    SocketProvider,\n    socketConnect,\n} from 'socket.io-react';\n\n// import { SocketProvider } from 'socket.io-react';\nimport io from 'socket.io-client';\nimport socketIOClient from 'socket.io-client'\nconst socket = io.connect('http://127.0.0.1:5000');\nsocket.on('message', msg => console.log(msg));\n{\n    // $(document).ready(function () {\n\n    //     $($(\"input[id=formButton]\")).click(function () {\n    //         var userId = $('#idForm').find('input[name=\"userId\"]').val();\n    //         $('#idForm').hide(5);\n\n    //         // push notifications stuff------------------------------------\n    //         //connect to the socket\n    //         var socket = io.connect('http://127.0.0.1:8001/notifications');\n    //         $(\"#messages\").append('<li>Connecting...</li>');\n\n\n    //         //Redis notification receiver\n    //         socket.on('notification', function (channel, notification) {\n    //             console.log(channel + ': ' + notification);\n    //             $(\"#messages\").append('<li>' + channel + ': ' + notification + '</li>');\n    //         });\n\n    //         //Connection confirmation\n    //         socket.on('connected', function () {\n    //             var msg = \"You are now connected for push notifications\";\n    //             console.log(msg);\n    //             $(\"#messages\").append('<li>' + msg + '</li>');\n    //             // Send the user ID\n    //             socket.emit('join', userId);\n    //         });\n    //         // End push notifications stuff---------------------------------\n    //         return false;\n    //     });\n    // });\n}\n\nclass ClientClass extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            userId: '',\n            response: JSON.parse(localStorage.getItem(\"response\") || \"[]\"),\n            endpoint: \"http://127.0.0.1:8001/notifications\"\n        };\n    }\n\n    componentDidMount() {\n        const { endpoint } = this.state;\n        console.log(this.state.userId)\n        if (this.state.userId !== '') {\n            //Very simply connect to the socket\n            const socket = io.connect(endpoint);\n            //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n            socket.on(\"notification\", data => this.setState({ response: this.state.response + \"\\n\" + data.num }));\n            socket.on('connected', () => {\n                var msg = \"You are now connected for push notifications\";\n                console.log(msg);\n                let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n                newValue.push(msg)\n                localStorage.setItem('response', JSON.stringify(newValue));\n                // this.setState({ response: newValue })\n                // Send the user ID\n                socket.emit('join', this.state.userId);\n            });\n        }\n    }\n\n    render() {\n        const { response } = this.state;\n        return (\n            <div style={{ textAlign: \"center\" }}>\n                <script src=\"/socket.io/socket.io.js\"></script>\n                <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n\n                <form id=\"idForm\" onSubmit={this.state.componentDidMount} action=\"\">\n                    User ID: <input\n                        id=\"userId\"\n                        type=\"text\"\n                        onChange={event => this.setState({ userId: event.target.value })}\n                        name=\"userId\"\n                        className=\"form-control\"\n                        value={this.state.userId}\n                    /><br />\n                    <input id=\"formButton\" type=\"submit\" value=\"Submit\" />\n                </form>\n                <h2>Messages from server:</h2>\n                {/* <ReactSpeedometer\n                    maxValue={140}\n                    value={response}\n                    needleColor=\"black\"\n                    startColor=\"orange\"\n                    segments={10}\n                    endColor=\"red\"\n                    needleTransition={\"easeElastic\"}\n                    ringWidth={30}\n                    textColor={\"red\"}\n                /> */}\n                {response}\n            </div>\n        )\n    }\n}\n\nexport default ClientClass;"]},"metadata":{},"sourceType":"module"}