{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/DashBoard.js\";\nimport React, { Redirect } from \"react\";\nimport { Link } from 'react-router-dom'; // import { toast } from \"react-toastify\";\n\nimport { GetChannelDetails, IsMyChannel } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport PropTypes from 'prop-types';\n\nclass DashBoardView extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeChannelIdError: false,\n      activeChannelId: \"\",\n      waitingChannelIdError: false,\n      waitingChannelId: '',\n      details: \"\",\n      value: \"\",\n      operation: \"\",\n      sender: \"\",\n      channels: []\n    };\n\n    this.activeChannelIdHandler = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        alert(\"Check MetaMask Connectivity\");\n      }\n\n      console.log(this.state.activeChannelId);\n      this.setState({\n        'errors': \"\"\n      });\n\n      if (this.state.activeChannelId != parseInt(this.state.activeChannelId, 10)) {\n        this.setState({\n          'errors': \"Enter Interger channel Id\"\n        });\n      } else {\n        let key = this.state.sender + 'active_channel_ids';\n        let url = \"/activeChannel/\" + this.state.activeChannelId;\n        console.log(url);\n        this.history.pushState(null, 'login'); // <Link to=\"/login\" />Click to login</Link>\n        // if (this.state.operation === \"add\") {\n        //     let flag = await IsMyChannel(this.state.value, this.state.sender)\n        //     let index = this.state.channels.indexOf(this.state.value);\n        //     if (flag && index < 0) {\n        //         this.state.channels.push(this.state.value)\n        //         localStorage.setItem(key, JSON.stringify(this.state.channels));\n        //         console.log(\"onAddChange Called \", this.state.value, flag, index)\n        //     }\n        // }\n        // else {\n        //     let flag = await IsMyChannel(this.state.value, this.state.sender)\n        //     let index = this.state.channels.indexOf(this.state.value);\n        //     if (!flag && index > -1) {\n        //         this.state.channels.splice(index, 1);\n        //         localStorage.setItem(key, JSON.stringify(this.state.channels));\n        //         console.log(\"onDeleteChange Called \", this.state.value, flag, index)\n        //     }\n        // }\n      }\n    };\n\n    this.waitingChannelIdHandler = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        alert(\"Check MetaMask Connectivity\");\n      }\n\n      this.setState({\n        'errors': \"\"\n      });\n\n      if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n        this.setState({\n          'errors': \"Enter Interger channel Id\"\n        });\n      } else {\n        let value = await GetChannelDetails(this.state.channelId);\n        this.setState({\n          'details': value\n        });\n      }\n    };\n\n    this.onActiveChannelIdChange = async event => this.setState({\n      'activeChannelId': event.target.value\n    });\n\n    this.onWaitingChannelIdChange = async event => this.setState({\n      'waitingChannelId': event.target.value\n    });\n  }\n\n  componentDidMount() {\n    // const slug = this.props.match.params.channel_id;\n    // console.log(this.props)\n    // console.log(slug);\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender);\n        let key = this.state.sender + 'active_channel_ids'; // this.setState({ 'channels': JSON.parse(localStorage.getItem(key) || \"[]\") })\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"DashBoard\"), React.createElement(\"button\", {\n      className: \"refresh\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Active Channel Ids\"), React.createElement(\"form\", {\n      id: \"form\",\n      onSubmit: this.activeChannelIdHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(ChannelList, {\n      storage_key: this.state.sender + 'active_channel_ids',\n      onChange: this.onActiveChannelIdChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), this.state.activeChannelIdError && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.activeChannelIdError), React.createElement(\"button\", {\n      id: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"check Active Channel Status\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Waiting Channel Ids\"), React.createElement(\"form\", {\n      id: \"form\",\n      onSubmit: this.waitingChannelIdHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"channelId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Channel Id\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(ChannelList, {\n      sender: this.state.sender,\n      onChange: this.onWaitingChannelIdChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), this.state.waitingChannelIdError && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, this.state.waitingChannelIdError)), React.createElement(\"button\", {\n      id: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"check Waiting Channel Status\")), this.state.errors === '' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Channel Details of channel id -> \", this.state.channelId), React.createElement(ManageDetailsView, {\n      details: this.state.details,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nDashBoardView.contextTypes = {\n  router: PropTypes.object\n};\n;\nexport default DashBoardView;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/DashBoard.js"],"names":["React","Redirect","Link","GetChannelDetails","IsMyChannel","ManageDetailsView","ChannelList","FetchAccount","PropTypes","DashBoardView","Component","state","activeChannelIdError","activeChannelId","waitingChannelIdError","waitingChannelId","details","value","operation","sender","channels","activeChannelIdHandler","event","preventDefault","undefined","alert","console","log","setState","parseInt","key","url","history","pushState","waitingChannelIdHandler","Number","isNaN","channelId","onActiveChannelIdChange","target","onWaitingChannelIdChange","componentDidMount","then","catch","err","render","errors","contextTypes","router","object"],"mappings":"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","sourcesContent":["import React, { Redirect } from \"react\";\nimport { Link } from 'react-router-dom'\n// import { toast } from \"react-toastify\";\nimport { GetChannelDetails, IsMyChannel } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport PropTypes from 'prop-types'\n\nclass DashBoardView extends React.Component {\n    static contextTypes = {\n        router: PropTypes.object\n    }\n\n    state = {\n        activeChannelIdError: false,\n        activeChannelId: \"\",\n        waitingChannelIdError: false,\n        waitingChannelId: '',\n        details: \"\",\n        value: \"\",\n        operation: \"\",\n        sender: \"\",\n        channels: [],\n\n    }\n\n    componentDidMount() {\n        // const slug = this.props.match.params.channel_id;\n        // console.log(this.props)\n        // console.log(slug);\n        FetchAccount().then(sender => {\n            if (sender) {\n                this.setState({ 'sender': sender })\n                console.log(this.state.sender)\n                let key = this.state.sender + 'active_channel_ids'\n                // this.setState({ 'channels': JSON.parse(localStorage.getItem(key) || \"[]\") })\n\n            }\n\n        })\n            .catch(err => {\n                alert(\"check metamask connectivity\")\n                console.log(err)\n            })\n    }\n\n    activeChannelIdHandler = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            alert(\"Check MetaMask Connectivity\")\n        }\n        console.log(this.state.activeChannelId)\n        this.setState({ 'errors': \"\" });\n        if (this.state.activeChannelId != parseInt(this.state.activeChannelId, 10)) {\n            this.setState({ 'errors': \"Enter Interger channel Id\" })\n        }\n        else {\n            let key = this.state.sender + 'active_channel_ids'\n            let url = \"/activeChannel/\" + this.state.activeChannelId\n            console.log(url)\n            this.history.pushState(null, 'login');\n            // <Link to=\"/login\" />Click to login</Link>\n            // if (this.state.operation === \"add\") {\n            //     let flag = await IsMyChannel(this.state.value, this.state.sender)\n            //     let index = this.state.channels.indexOf(this.state.value);\n            //     if (flag && index < 0) {\n            //         this.state.channels.push(this.state.value)\n            //         localStorage.setItem(key, JSON.stringify(this.state.channels));\n            //         console.log(\"onAddChange Called \", this.state.value, flag, index)\n            //     }\n\n            // }\n            // else {\n            //     let flag = await IsMyChannel(this.state.value, this.state.sender)\n            //     let index = this.state.channels.indexOf(this.state.value);\n            //     if (!flag && index > -1) {\n            //         this.state.channels.splice(index, 1);\n            //         localStorage.setItem(key, JSON.stringify(this.state.channels));\n            //         console.log(\"onDeleteChange Called \", this.state.value, flag, index)\n            //     }\n\n            // }\n        }\n    }\n\n    waitingChannelIdHandler = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            alert(\"Check MetaMask Connectivity\")\n        }\n        this.setState({ 'errors': \"\" });\n        if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n            this.setState({ 'errors': \"Enter Interger channel Id\" })\n        }\n        else {\n            let value = await GetChannelDetails(this.state.channelId)\n            this.setState({ 'details': value })\n        }\n    }\n\n    onActiveChannelIdChange = async (event) => this.setState({ 'activeChannelId': event.target.value });\n\n    onWaitingChannelIdChange = async (event) => this.setState({ 'waitingChannelId': event.target.value });\n\n    render() {\n        return (\n            <>\n                <h2>DashBoard</h2>\n                <button className=\"refresh\"></button>\n                <div>\n                    <div>\n                        <h3>Active Channel Ids</h3>\n                        <form id=\"form\" onSubmit={this.activeChannelIdHandler}>\n                            <ChannelList storage_key={this.state.sender + 'active_channel_ids'} onChange={this.onActiveChannelIdChange} />\n                            {this.state.activeChannelIdError && <div className=\"alert alert-danger\">{this.state.activeChannelIdError}</div>}\n                            <button id=\"button\">check Active Channel Status</button>\n                        </form>\n                    </div>\n                    <div>\n                        <h3>Waiting Channel Ids</h3>\n                        <form id=\"form\" onSubmit={this.waitingChannelIdHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"channelId\">Channel Id</label>\n                                <div className=\"field\">\n                                    <ChannelList sender={this.state.sender} onChange={this.onWaitingChannelIdChange} />\n                                </div>\n                                {this.state.waitingChannelIdError && <div className=\"alert alert-danger\">{this.state.waitingChannelIdError}</div>}\n                            </div>\n                            <button id=\"button\">check Waiting Channel Status</button>\n                        </form>\n                        {(this.state.errors === '') && (\n                            <div >\n                                <h2>Channel Details of channel id -> {this.state.channelId}</h2>\n                                <ManageDetailsView details={this.state.details} />\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default DashBoardView;\n"]},"metadata":{},"sourceType":"module"}