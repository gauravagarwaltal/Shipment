{"ast":null,"code":"import { Web3_Provider } from \"./contract_config\";\nimport { FetchAccount } from '../components/MetaMaskFetch';\n\nconst Web3 = require('web3');\n\nconst web3 = new Web3(Web3.givenProvider || Web3_Provider);\n\nasync function GenerateSignatures(channelId, count, aliceCash, bobCash) {\n  // const hash = await web3.utils.soliditySha3(\n  //     {type: 'address', value: vpc.options.address},\n  //     {type: 'uint', value: sid},\n  //     {type: 'uint', value: blockedAlice},\n  //     {type: 'uint', value: blockedBob},\n  //     {type: 'uint', value: version});\n  const hash = await web3.utils.soliditySha3({\n    type: 'uint',\n    value: channelId\n  }, {\n    type: 'uint',\n    value: count\n  }, {\n    type: 'uint',\n    value: aliceCash\n  }, {\n    type: 'uint',\n    value: bobCash\n  });\n  let sender = await FetchAccount();\n  sender = web3.utils.toChecksumAddress(sender);\n  console.log(sender);\n  const sigAlice = await web3.eth.personal.sign(hash, sender, \"\"); //web3.eth.sign(hash,aliceAddr);\n  //web3.eth.sign(hash,bobAddr);\n\n  return sigAlice;\n}\n\nexport default GenerateSignatures;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/contract/CreateSignature.js"],"names":["Web3_Provider","FetchAccount","Web3","require","web3","givenProvider","GenerateSignatures","channelId","count","aliceCash","bobCash","hash","utils","soliditySha3","type","value","sender","toChecksumAddress","console","log","sigAlice","eth","personal","sign"],"mappings":"AAAA,SAASA,aAAT,QAA8B,mBAA9B;AACA,SAASC,YAAT,QAA6B,6BAA7B;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,IAAI,GAAG,IAAIF,IAAJ,CAASA,IAAI,CAACG,aAAL,IAAsBL,aAA/B,CAAb;;AAGA,eAAeM,kBAAf,CAAkCC,SAAlC,EAA6CC,KAA7C,EAAoDC,SAApD,EAA+DC,OAA/D,EAAwE;AAEpE;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,IAAI,GAAG,MAAMP,IAAI,CAACQ,KAAL,CAAWC,YAAX,CACf;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAER;AAAvB,GADe,EAEf;AAAEO,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAEP;AAAvB,GAFe,EAGf;AAAEM,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAEN;AAAvB,GAHe,EAIf;AAAEK,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAEL;AAAvB,GAJe,CAAnB;AAMA,MAAIM,MAAM,GAAG,MAAMf,YAAY,EAA/B;AACAe,EAAAA,MAAM,GAAGZ,IAAI,CAACQ,KAAL,CAAWK,iBAAX,CAA6BD,MAA7B,CAAT;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,QAAMI,QAAQ,GAAG,MAAMhB,IAAI,CAACiB,GAAL,CAASC,QAAT,CAAkBC,IAAlB,CAAuBZ,IAAvB,EAA6BK,MAA7B,EAAqC,EAArC,CAAvB,CAlBoE,CAmBpE;AACA;;AACA,SAAOI,QAAP;AACH;;AAGD,eAAed,kBAAf","sourcesContent":["import { Web3_Provider } from \"./contract_config\";\nimport { FetchAccount } from '../components/MetaMaskFetch';\nconst Web3 = require('web3')\nconst web3 = new Web3(Web3.givenProvider || Web3_Provider)\n\n\nasync function GenerateSignatures(channelId, count, aliceCash, bobCash) {\n\n    // const hash = await web3.utils.soliditySha3(\n    //     {type: 'address', value: vpc.options.address},\n    //     {type: 'uint', value: sid},\n    //     {type: 'uint', value: blockedAlice},\n    //     {type: 'uint', value: blockedBob},\n    //     {type: 'uint', value: version});\n\n    const hash = await web3.utils.soliditySha3(\n        { type: 'uint', value: channelId },\n        { type: 'uint', value: count },\n        { type: 'uint', value: aliceCash },\n        { type: 'uint', value: bobCash });\n\n    let sender = await FetchAccount()\n    sender = web3.utils.toChecksumAddress(sender)\n    console.log(sender)\n    const sigAlice = await web3.eth.personal.sign(hash, sender, \"\");\n    //web3.eth.sign(hash,aliceAddr);\n    //web3.eth.sign(hash,bobAddr);\n    return sigAlice\n}\n\n\nexport default GenerateSignatures;"]},"metadata":{},"sourceType":"module"}