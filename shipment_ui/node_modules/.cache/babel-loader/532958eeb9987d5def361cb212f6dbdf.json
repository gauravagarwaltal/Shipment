{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/redisApi/GetSetData.js\";\nimport React from 'react';\n\nconst axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5000';\n\nconst FetchRequests = async (channelId, address, request_type) => {\n  try {\n    fetch(RedisHandlerURL + '/fetch_states', {\n      method: 'POST',\n      body: JSON.stringify({\n        title: 'New title added',\n        body: 'New body added. Hello body.',\n        userId: 2\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(response => {\n      console.log(response.json());\n      return response.json();\n    }).then(json => {\n      this.setState({\n        user: json\n      });\n    });\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/fetch_states',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      console.log(resp.data);\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst SetRequest = async (channelId, address, request_type, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/set_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst UpdateRequest = async (channelId, address, request_type, index, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('index', index);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/update_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst DeleteRequest = async (channelId, address, request_type, index, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('index', index);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/delete_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst PublishData = async () => {\n  var previous_response_length = 0;\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", \"http://127.0.0.1:6379/SUBSCRIBE/hello\", true);\n  xhr.onreadystatechange = checkData;\n  xhr.send(null);\n\n  function checkData() {\n    if (xhr.readyState === 3) {\n      const response = xhr.responseText;\n      const chunk = response.slice(previous_response_length);\n      previous_response_length = response.length;\n      console.log(chunk);\n    }\n  }\n};\n\nfunction ABC() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"dsdcw\", React.createElement(\"button\", {\n    onClick: FetchRequests(2, 3, 4),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }));\n}\n\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest, PublishData, ABC };","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/redisApi/GetSetData.js"],"names":["React","axios","require","RedisHandlerURL","FetchRequests","channelId","address","request_type","fetch","method","body","JSON","stringify","title","userId","headers","then","response","console","log","json","setState","user","bodyFormData","FormData","set","resp","url","data","status","error","SetRequest","request_data","UpdateRequest","index","DeleteRequest","PublishData","previous_response_length","xhr","XMLHttpRequest","open","onreadystatechange","checkData","send","readyState","responseText","chunk","slice","length","ABC"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,eAAe,GAAG,uBAAxB;;AAEA,MAAMC,aAAa,GAAG,OAAOC,SAAP,EAAkBC,OAAlB,EAA2BC,YAA3B,KAA4C;AAC9D,MAAI;AACAC,IAAAA,KAAK,CAACL,eAAe,GAAG,eAAnB,EAAoC;AACrCM,MAAAA,MAAM,EAAE,MAD6B;AAErCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,KAAK,EAAE,iBADU;AAEjBH,QAAAA,IAAI,EAAE,6BAFW;AAGjBI,QAAAA,MAAM,EAAE;AAHS,OAAf,CAF+B;AAOrCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAP4B,KAApC,CAAL,CAUGC,IAVH,CAUQC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAAT,EAAZ;AACA,aAAOH,QAAQ,CAACG,IAAT,EAAP;AACH,KAbD,EAaGJ,IAbH,CAaQI,IAAI,IAAI;AACZ,WAAKC,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAEF;AADI,OAAd;AAGH,KAjBD;AAkBA,QAAIG,YAAY,GAAG,IAAIC,QAAJ,EAAnB;AACAD,IAAAA,YAAY,CAACE,GAAb,CAAiB,YAAjB,EAA+BpB,SAA/B;AACAkB,IAAAA,YAAY,CAACE,GAAb,CAAiB,SAAjB,EAA4BnB,OAA5B;AACAiB,IAAAA,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiClB,YAAjC;AACA,UAAMmB,IAAI,GAAG,MAAMzB,KAAK,CAAC;AACrBQ,MAAAA,MAAM,EAAE,MADa;AAErBkB,MAAAA,GAAG,EAAExB,eAAe,GAAG,eAFF;AAGrByB,MAAAA,IAAI,EAAEL;AAHe,KAAD,CAAxB;;AAKA,QAAIG,IAAI,CAACG,MAAL,KAAgB,GAApB,EAAyB;AACrBX,MAAAA,OAAO,CAACC,GAAR,CAAYO,IAAI,CAACE,IAAjB;AACA,aAAOF,IAAI,CAACE,IAAZ;AACH;;AACD,WAAO,IAAP;AACH,GAjCD,CAiCE,OAAOE,KAAP,EAAc;AACZZ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACH;AACJ,CAtCD;;AAwCA,MAAMC,UAAU,GAAG,OAAO1B,SAAP,EAAkBC,OAAlB,EAA2BC,YAA3B,EAAyCyB,YAAzC,KAA0D;AACzE,MAAI;AACA,QAAIT,YAAY,GAAG,IAAIC,QAAJ,EAAnB;AACAD,IAAAA,YAAY,CAACE,GAAb,CAAiB,YAAjB,EAA+BpB,SAA/B;AACAkB,IAAAA,YAAY,CAACE,GAAb,CAAiB,SAAjB,EAA4BnB,OAA5B;AACAiB,IAAAA,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiClB,YAAjC;AACAgB,IAAAA,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiCO,YAAjC;AACA,UAAMN,IAAI,GAAG,MAAMzB,KAAK,CAAC;AACrBQ,MAAAA,MAAM,EAAE,MADa;AAErBkB,MAAAA,GAAG,EAAExB,eAAe,GAAG,cAFF;AAGrByB,MAAAA,IAAI,EAAEL;AAHe,KAAD,CAAxB;;AAKA,QAAIG,IAAI,CAACG,MAAL,KAAgB,GAApB,EAAyB;AACrB,aAAOH,IAAI,CAACE,IAAZ;AACH;;AACD,WAAO,IAAP;AACH,GAfD,CAeE,OAAOE,KAAP,EAAc;AACZZ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACH;AACJ,CApBD;;AAsBA,MAAMG,aAAa,GAAG,OAAO5B,SAAP,EAAkBC,OAAlB,EAA2BC,YAA3B,EAAyC2B,KAAzC,EAAgDF,YAAhD,KAAiE;AACnF,MAAI;AACA,QAAIT,YAAY,GAAG,IAAIC,QAAJ,EAAnB;AACAD,IAAAA,YAAY,CAACE,GAAb,CAAiB,YAAjB,EAA+BpB,SAA/B;AACAkB,IAAAA,YAAY,CAACE,GAAb,CAAiB,SAAjB,EAA4BnB,OAA5B;AACAiB,IAAAA,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiClB,YAAjC;AACAgB,IAAAA,YAAY,CAACE,GAAb,CAAiB,OAAjB,EAA0BS,KAA1B;AACAX,IAAAA,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiCO,YAAjC;AACA,UAAMN,IAAI,GAAG,MAAMzB,KAAK,CAAC;AACrBQ,MAAAA,MAAM,EAAE,MADa;AAErBkB,MAAAA,GAAG,EAAExB,eAAe,GAAG,iBAFF;AAGrByB,MAAAA,IAAI,EAAEL;AAHe,KAAD,CAAxB;;AAKA,QAAIG,IAAI,CAACG,MAAL,KAAgB,GAApB,EAAyB;AACrB,aAAOH,IAAI,CAACE,IAAZ;AACH;;AACD,WAAO,IAAP;AACH,GAhBD,CAgBE,OAAOE,KAAP,EAAc;AACZZ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACH;AACJ,CArBD;;AAuBA,MAAMK,aAAa,GAAG,OAAO9B,SAAP,EAAkBC,OAAlB,EAA2BC,YAA3B,EAAyC2B,KAAzC,EAAgDF,YAAhD,KAAiE;AACnF,MAAI;AACA,QAAIT,YAAY,GAAG,IAAIC,QAAJ,EAAnB;AACAD,IAAAA,YAAY,CAACE,GAAb,CAAiB,YAAjB,EAA+BpB,SAA/B;AACAkB,IAAAA,YAAY,CAACE,GAAb,CAAiB,SAAjB,EAA4BnB,OAA5B;AACAiB,IAAAA,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiClB,YAAjC;AACAgB,IAAAA,YAAY,CAACE,GAAb,CAAiB,OAAjB,EAA0BS,KAA1B;AACAX,IAAAA,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiCO,YAAjC;AACA,UAAMN,IAAI,GAAG,MAAMzB,KAAK,CAAC;AACrBQ,MAAAA,MAAM,EAAE,MADa;AAErBkB,MAAAA,GAAG,EAAExB,eAAe,GAAG,iBAFF;AAGrByB,MAAAA,IAAI,EAAEL;AAHe,KAAD,CAAxB;;AAKA,QAAIG,IAAI,CAACG,MAAL,KAAgB,GAApB,EAAyB;AACrB,aAAOH,IAAI,CAACE,IAAZ;AACH;;AACD,WAAO,IAAP;AACH,GAhBD,CAgBE,OAAOE,KAAP,EAAc;AACZZ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACH;AACJ,CArBD;;AAuBA,MAAMM,WAAW,GAAG,YAAY;AAG5B,MAAIC,wBAAwB,GAAG,CAA/B;AACA,MAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgB,uCAAhB,EAAyD,IAAzD;AACAF,EAAAA,GAAG,CAACG,kBAAJ,GAAyBC,SAAzB;AACAJ,EAAAA,GAAG,CAACK,IAAJ,CAAS,IAAT;;AAEA,WAASD,SAAT,GAAqB;AACjB,QAAIJ,GAAG,CAACM,UAAJ,KAAmB,CAAvB,EAA0B;AACtB,YAAM3B,QAAQ,GAAGqB,GAAG,CAACO,YAArB;AACA,YAAMC,KAAK,GAAG7B,QAAQ,CAAC8B,KAAT,CAAeV,wBAAf,CAAd;AACAA,MAAAA,wBAAwB,GAAGpB,QAAQ,CAAC+B,MAApC;AACA9B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,KAAZ;AACH;AACJ;AACJ,CAjBD;;AAmBA,SAASG,GAAT,GAAe;AACX,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEI;AAAQ,IAAA,OAAO,EAAE7C,aAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;;AACD,SAASA,aAAT,EAAwB2B,UAAxB,EAAoCE,aAApC,EAAmDE,aAAnD,EAAkEC,WAAlE,EAA+Ea,GAA/E","sourcesContent":["import React from 'react'\nconst axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5000';\n\nconst FetchRequests = async (channelId, address, request_type) => {\n    try {\n        fetch(RedisHandlerURL + '/fetch_states', {\n            method: 'POST',\n            body: JSON.stringify({\n                title: 'New title added',\n                body: 'New body added. Hello body.',\n                userId: 2\n            }),\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        }).then(response => {\n            console.log(response.json())\n            return response.json()\n        }).then(json => {\n            this.setState({\n                user: json\n            });\n        });\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/fetch_states',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            console.log(resp.data)\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst SetRequest = async (channelId, address, request_type, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/set_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst UpdateRequest = async (channelId, address, request_type, index, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('index', index);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/update_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst DeleteRequest = async (channelId, address, request_type, index, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('index', index);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/delete_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst PublishData = async () => {\n\n\n    var previous_response_length = 0\n    let xhr = new XMLHttpRequest()\n    xhr.open(\"GET\", \"http://127.0.0.1:6379/SUBSCRIBE/hello\", true);\n    xhr.onreadystatechange = checkData;\n    xhr.send(null);\n\n    function checkData() {\n        if (xhr.readyState === 3) {\n            const response = xhr.responseText;\n            const chunk = response.slice(previous_response_length);\n            previous_response_length = response.length;\n            console.log(chunk);\n        }\n    }\n}\n\nfunction ABC() {\n    return (\n        <div>\n            dsdcw\n            <button onClick={FetchRequests(2, 3, 4)}></button>\n        </div>\n    )\n}\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest, PublishData, ABC };"]},"metadata":{},"sourceType":"module"}