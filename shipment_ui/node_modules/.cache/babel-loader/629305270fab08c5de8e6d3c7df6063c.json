{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/ActiveChannelPage.js\";\nimport React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { GetChannelDetails, IsMyChannel } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\n\nclass ActiveChannelPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      details: \"\",\n      value: \"\",\n      operation: \"\",\n      sender: \"\",\n      channels: []\n    };\n\n    this.fetchOnChainDetails = async event => {\n      let value = await GetChannelDetails(this.state.channelId);\n      return value;\n    };\n\n    this.fetchOffChainDetails = async event => {\n      let key = this.state.sender + this.state.channelId + '_last_signed_state';\n      let value = localStorage.getItem(key);\n      return value;\n    };\n\n    this.handleChannelIdUpdate = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        alert(\"Check MetaMask Connectivity\");\n      }\n\n      this.setState({\n        'errors': \"\"\n      });\n\n      if (this.state.value != parseInt(this.state.value, 10)) {\n        this.setState({\n          'errors': \"Enter Interger channel Id\"\n        });\n      } else if (this.state.operation === \"\") {\n        this.setState({\n          'errors': \"select radio button\"\n        });\n      } else {\n        let key = this.state.sender + 'active_channel_ids';\n\n        if (this.state.operation === \"add\") {\n          let flag = await IsMyChannel(this.state.value, this.state.sender);\n          let index = this.state.channels.indexOf(this.state.value);\n\n          if (flag && index < 0) {\n            this.state.channels.push(this.state.value);\n            localStorage.setItem(key, JSON.stringify(this.state.channels));\n            console.log(\"onAddChange Called \", this.state.value, flag, index);\n          }\n        } else {\n          let flag = await IsMyChannel(this.state.value, this.state.sender);\n          let index = this.state.channels.indexOf(this.state.value);\n\n          if (!flag && index > -1) {\n            this.state.channels.splice(index, 1);\n            localStorage.setItem(key, JSON.stringify(this.state.channels));\n            console.log(\"onDeleteChange Called \", this.state.value, flag, index);\n          }\n        }\n      }\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        alert(\"Check MetaMask Connectivity\");\n      }\n\n      this.setState({\n        'errors': \"\"\n      });\n\n      if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n        this.setState({\n          'errors': \"Enter Interger channel Id\"\n        });\n      } else {\n        let value = await GetChannelDetails(this.state.channelId);\n        this.setState({\n          'details': value\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender);\n        let key = this.state.sender + 'active_channel_ids';\n        this.setState({\n          'channels': JSON.parse(localStorage.getItem(key) || \"[]\")\n        });\n        this.setState({\n          'channelId': this.props.match.params.channel_id\n        });\n        console.log(\"channel Id\", this.state.channelId);\n        this.fetchOnChainDetails().then(onChainState => {\n          console.log(onChainState);\n        }).catch(err => {\n          alert(\"on chain state issue\");\n          console.log(err);\n        });\n        this.fetchOffChainDetails().then(offChainState => {\n          console.log(offChainState);\n        }).catch(err => {\n          alert(\"off chain state issue\");\n          console.log(err);\n        });\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Channel Details\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\n;\nexport default ActiveChannelPage;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/ActiveChannelPage.js"],"names":["React","GetChannelDetails","IsMyChannel","ManageDetailsView","ChannelList","FetchAccount","ActiveChannelPage","Component","state","errors","channelId","details","value","operation","sender","channels","fetchOnChainDetails","event","fetchOffChainDetails","key","localStorage","getItem","handleChannelIdUpdate","preventDefault","undefined","alert","setState","parseInt","flag","index","indexOf","push","setItem","JSON","stringify","console","log","splice","handleSubmit","Number","isNaN","componentDidMount","then","parse","props","match","params","channel_id","onChainState","catch","err","offChainState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { GetChannelDetails, IsMyChannel } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\n\nclass ActiveChannelPage extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        details: \"\",\n        value: \"\",\n        operation: \"\",\n        sender: \"\",\n        channels: [],\n\n    }\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n                this.setState({ 'sender': sender })\n                console.log(this.state.sender)\n                let key = this.state.sender + 'active_channel_ids'\n                this.setState({ 'channels': JSON.parse(localStorage.getItem(key) || \"[]\") })\n                this.setState({ 'channelId': this.props.match.params.channel_id })\n                console.log(\"channel Id\", this.state.channelId);\n                this.fetchOnChainDetails().then(onChainState => {\n                    console.log(onChainState)\n                }).catch(err => {\n                    alert(\"on chain state issue\")\n                    console.log(err)\n                })\n                this.fetchOffChainDetails().then(offChainState => {\n                    console.log(offChainState)\n                }).catch(err => {\n                    alert(\"off chain state issue\")\n                    console.log(err)\n                })\n            }\n\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    fetchOnChainDetails = async (event) => {\n        let value = await GetChannelDetails(this.state.channelId)\n        return value;\n    }\n\n    fetchOffChainDetails = async (event) => {\n        let key = this.state.sender + this.state.channelId + '_last_signed_state'\n        let value = localStorage.getItem(key)\n        return value;\n    }\n\n    handleChannelIdUpdate = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            alert(\"Check MetaMask Connectivity\")\n        }\n        this.setState({ 'errors': \"\" });\n        if (this.state.value != parseInt(this.state.value, 10)) {\n            this.setState({ 'errors': \"Enter Interger channel Id\" })\n        } else if (this.state.operation === \"\") {\n            this.setState({ 'errors': \"select radio button\" })\n        }\n        else {\n            let key = this.state.sender + 'active_channel_ids'\n            if (this.state.operation === \"add\") {\n                let flag = await IsMyChannel(this.state.value, this.state.sender)\n                let index = this.state.channels.indexOf(this.state.value);\n                if (flag && index < 0) {\n                    this.state.channels.push(this.state.value)\n                    localStorage.setItem(key, JSON.stringify(this.state.channels));\n                    console.log(\"onAddChange Called \", this.state.value, flag, index)\n                }\n\n            }\n            else {\n                let flag = await IsMyChannel(this.state.value, this.state.sender)\n                let index = this.state.channels.indexOf(this.state.value);\n                if (!flag && index > -1) {\n                    this.state.channels.splice(index, 1);\n                    localStorage.setItem(key, JSON.stringify(this.state.channels));\n                    console.log(\"onDeleteChange Called \", this.state.value, flag, index)\n                }\n\n            }\n        }\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            alert(\"Check MetaMask Connectivity\")\n        }\n        this.setState({ 'errors': \"\" });\n        if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n            this.setState({ 'errors': \"Enter Interger channel Id\" })\n        }\n        else {\n            let value = await GetChannelDetails(this.state.channelId)\n            this.setState({ 'details': value })\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Channel Details</h2>\n                <div>\n\n                </div>\n            </>\n        );\n    }\n};\n\nexport default ActiveChannelPage;\n"]},"metadata":{},"sourceType":"module"}