{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/RefundChannel.js\";\nimport React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport { MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass RefundChannel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      onChainState: false,\n      formFlag: false,\n      sender: \"\",\n      action: '',\n      aliceCash: '',\n      bobCash: ''\n    };\n\n    this.handleRefund = async event => {\n      event.preventDefault();\n      this.setState({\n        'errors': false\n      });\n\n      if (Number.isNaN(parseInt(this.state.aliceCash, 10))) {\n        this.setState({\n          'errors': \"Enter Integer amount(in wei unit)\"\n        });\n      } else if (Number.isNaN(parseInt(this.state.bobCash, 10))) {\n        this.setState({\n          'errors': \"Enter Integer amount(in wei unit)\"\n        });\n      } else {\n        let total_money = parseInt(this.state.offChainState['Alice Cash']) + parseInt(this.state.offChainState['Bob Cash']);\n\n        if (total_money === parseInt(this.state.aliceCash) + parseInt(this.state.bobCash)) {\n          let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash)); // console.log(sig)\n          // let sender = await FetchAccount()\n\n          await IsValidSignature(this.state.sender, this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash), sig); // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n\n          let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender);\n          let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig);\n          let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState);\n          console.log(\"hello \", response);\n        } else {\n          this.setState({\n            'errors': \"total money is not equals to channel locked money\"\n          });\n        }\n      }\n\n      this.setState({\n        'aliceCash': \"\"\n      });\n      this.setState({\n        'bobCash': \"\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        console.log(this.props.location.state.action, this.props.location.state.channelId);\n\n        if (this.props.location.state.action === 'Refund') {\n          GetChannelDetails(this.props.location.state.channelId).then(onChainState => {\n            this.setState({\n              'sender': sender,\n              'channelId': this.props.location.state.channelId,\n              'action': this.props.location.state.action,\n              'onChainState': onChainState,\n              'formFlag': true\n            });\n            this.setState({});\n            this.setState({});\n            console.log(this.state.action, this.state.channelId);\n            this.setState({});\n            this.setState({});\n          }).catch(err => {\n            alert(\"on chain state issue\");\n            console.log(err);\n          });\n        } else {\n          alert(\"go back \");\n        }\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Channel Id: \", this.state.channelId), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.state.onChainState && React.createElement(OnChainStateView, {\n      details: this.state.onChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.formFlag && React.createElement(\"form\", {\n      id: \"form\",\n      className: \"mt-2\",\n      onSubmit: this.handleRefund,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit Transaction\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })))));\n  }\n\n}\n\n;\nexport default RefundChannel;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/RefundChannel.js"],"names":["React","IsValidSignature","FetchOtherParty","GetChannelDetails","FetchAccount","OnChainStateView","MakeStringState","GenerateSignatures","SetRequest","STATE_TYPE","RefundChannel","Component","state","errors","channelId","onChainState","formFlag","sender","action","aliceCash","bobCash","handleRefund","event","preventDefault","setState","Number","isNaN","parseInt","total_money","offChainState","sig","TheOtherParty","stringifyState","response","Request","console","log","componentDidMount","then","props","location","catch","err","alert","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport { MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass RefundChannel extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        onChainState: false,\n        formFlag: false,\n        sender: \"\",\n        action: '',\n        aliceCash: '',\n        bobCash: '',\n    }\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n                console.log(this.props.location.state.action, this.props.location.state.channelId)\n                if (this.props.location.state.action === 'Refund') {\n                    GetChannelDetails(this.props.location.state.channelId).then(onChainState => {\n                        this.setState({\n                            'sender': sender,\n                            'channelId': this.props.location.state.channelId,\n                            'action': this.props.location.state.action,\n                            'onChainState': onChainState,\n                            'formFlag': true,\n                        })\n                        this.setState({})\n                        this.setState({})\n                        console.log(this.state.action, this.state.channelId)\n                        this.setState({})\n                        this.setState({})\n                    }).catch(err => {\n                        alert(\"on chain state issue\")\n                        console.log(err)\n                    })\n                }\n                else {\n                    alert(\"go back \")\n                }\n            }\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    handleRefund = async (event) => {\n        event.preventDefault();\n        this.setState({ 'errors': false })\n        if (Number.isNaN(parseInt(this.state.aliceCash, 10))) {\n            this.setState({ 'errors': \"Enter Integer amount(in wei unit)\" })\n        }\n        else if (Number.isNaN(parseInt(this.state.bobCash, 10))) {\n            this.setState({ 'errors': \"Enter Integer amount(in wei unit)\" })\n        }\n        else {\n            let total_money = parseInt(this.state.offChainState['Alice Cash']) + parseInt(this.state.offChainState['Bob Cash'])\n            if (total_money === (parseInt(this.state.aliceCash) + parseInt(this.state.bobCash))) {\n                let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash))\n                // console.log(sig)\n                // let sender = await FetchAccount()\n                await IsValidSignature(this.state.sender, this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash), sig)\n\n                // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n                let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender)\n                let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig)\n                let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState)\n                console.log(\"hello \", response)\n\n            }\n            else {\n                this.setState({ 'errors': \"total money is not equals to channel locked money\" })\n            }\n\n        }\n        this.setState({ 'aliceCash': \"\" })\n        this.setState({ 'bobCash': \"\" })\n\n\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Channel Id: {this.state.channelId}</h2>\n                <div>\n                    <div>\n                        {this.state.onChainState && <OnChainStateView details={this.state.onChainState} />}\n                    </div>\n\n                    <div>\n                        {this.state.formFlag &&\n                            <form id=\"form\" className=\"mt-2\" onSubmit={this.handleRefund}>\n                                <input type=\"submit\" value=\"Submit Transaction\" className=\"btn btn-primary\" />\n                            </form>}\n                    </div>\n                </div>\n\n            </>\n        );\n    }\n};\n\nexport default RefundChannel;\n"]},"metadata":{},"sourceType":"module"}