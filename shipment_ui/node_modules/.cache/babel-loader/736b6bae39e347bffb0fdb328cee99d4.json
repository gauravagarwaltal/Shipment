{"ast":null,"code":"import React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { GetChannelDetails, IsMyChannel } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport ActionList from \"./ActionList\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails } from \"../LocalStorage/local_storage_api\";\n\nclass ActionConfirmationPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      onChainState: false,\n      offChainState: false,\n      value: \"\",\n      sender: \"\",\n      action: ''\n    };\n\n    this.fetchOnChainDetails = async event => {\n      let value = await GetChannelDetails(this.state.channelId);\n      return value;\n    };\n\n    this.fetchOffChainDetails = async event => {\n      let key = this.state.sender + this.state.channelId + '_last_signed_state';\n      let value = localStorage.getItem(key);\n\n      if (value !== null && value !== undefined) {\n        let splitstate = value.split(\"_\");\n        let state_obj = {\n          'Channel Id': splitstate[0],\n          'count': splitstate[1],\n          'Alice Cash': splitstate[2],\n          'Bob Cash': splitstate[3]\n        };\n        console.log(state_obj);\n        return state_obj;\n      }\n\n      return \"No off chain state Found\";\n    };\n\n    this.onActionChange = async event => this.setState({\n      'action': event.target.value\n    });\n\n    this.actionHandler = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        alert(\"Check MetaMask Connectivity\");\n      }\n\n      this.setState({\n        'errors': false\n      });\n      console.log(\"this.state.action\", this.state.action);\n\n      if (this.state.action === 'select action' || this.state.action === '') {\n        this.setState({\n          'errors': \"Please select action from drop down\"\n        });\n      } else {\n        let url = \"/waitingChannel/\" + this.state.waitingChannelId;\n        console.log(url); // console.log(this.props);\n\n        this.props.history.push(url);\n        this.props.history.push({\n          pathname: '/actionconfirmation',\n          search: '?query=' + this.state.channelId,\n          state: {\n            channelId: this.state.channelId,\n            action: this.state.action\n          }\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender); // let key = this.state.sender + 'active_channel_ids'\n\n        this.setState({\n          'channelId': this.props.location.state.channelId\n        });\n        this.setState({\n          'action': this.props.location.state.action\n        });\n        console.log(this.state.action, this.state.channelId);\n\n        if (this.state.action === 'New Transaction') {\n          let offChainState = FetchOffChainDetails(this.state.sender, this.state.channelId);\n          this.setState({\n            'offChainState': offChainState\n          });\n        } else {}\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null);\n  }\n\n}\n\n;\nexport default ActionConfirmationPage;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/ActionConfirmationPage.js"],"names":["React","GetChannelDetails","IsMyChannel","ManageDetailsView","ChannelList","FetchAccount","ActionList","OnChainStateView","OffChainStateView","FetchOffChainDetails","ActionConfirmationPage","Component","state","errors","channelId","onChainState","offChainState","value","sender","action","fetchOnChainDetails","event","fetchOffChainDetails","key","localStorage","getItem","undefined","splitstate","split","state_obj","console","log","onActionChange","setState","target","actionHandler","preventDefault","alert","url","waitingChannelId","props","history","push","pathname","search","componentDidMount","then","location","catch","err","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { GetChannelDetails, IsMyChannel } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport ActionList from \"./ActionList\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails } from \"../LocalStorage/local_storage_api\";\n\nclass ActionConfirmationPage extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        onChainState: false,\n        offChainState: false,\n        value: \"\",\n        sender: \"\",\n        action: '',\n    }\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n                this.setState({ 'sender': sender })\n                console.log(this.state.sender)\n                // let key = this.state.sender + 'active_channel_ids'\n                this.setState({ 'channelId': this.props.location.state.channelId })\n                this.setState({ 'action': this.props.location.state.action })\n                console.log(this.state.action, this.state.channelId)\n                if (this.state.action === 'New Transaction') {\n                    let offChainState = FetchOffChainDetails(this.state.sender, this.state.channelId)\n                    this.setState({ 'offChainState': offChainState })\n                }\n                else {\n\n                }\n            }\n\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    fetchOnChainDetails = async (event) => {\n        let value = await GetChannelDetails(this.state.channelId)\n        return value;\n    }\n\n    fetchOffChainDetails = async (event) => {\n        let key = this.state.sender + this.state.channelId + '_last_signed_state'\n        let value = localStorage.getItem(key)\n        if (value !== null && value !== undefined) {\n            let splitstate = value.split(\"_\");\n            let state_obj = {\n                'Channel Id': splitstate[0],\n                'count': splitstate[1],\n                'Alice Cash': splitstate[2],\n                'Bob Cash': splitstate[3],\n            }\n            console.log(state_obj)\n            return state_obj\n        }\n        return \"No off chain state Found\"\n    }\n\n    onActionChange = async (event) => this.setState({ 'action': event.target.value });\n\n    actionHandler = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            alert(\"Check MetaMask Connectivity\")\n        }\n        this.setState({ 'errors': false });\n        console.log(\"this.state.action\", this.state.action)\n        if (this.state.action === 'select action' || this.state.action === '') {\n            this.setState({ 'errors': \"Please select action from drop down\" })\n        }\n        else {\n            let url = \"/waitingChannel/\" + this.state.waitingChannelId\n            console.log(url)\n            // console.log(this.props);\n            this.props.history.push(url);\n            this.props.history.push({\n                pathname: '/actionconfirmation',\n                search: '?query=' + this.state.channelId,\n                state: {\n                    channelId: this.state.channelId,\n                    action: this.state.action\n                }\n            })\n        }\n    }\n\n\n    render() {\n        return (\n            <>\n                {/* <h2>Channel Id: {this.state.channelId}</h2>\n                <div>\n                    <div>\n                        <OnChainStateView details={this.state.onChainState} />\n                    </div>\n                    <div>\n                        <OffChainStateView details={this.state.offChainState} />\n                    </div>\n                    <form id=\"form\" onSubmit={this.actionHandler}>\n                        <ActionList onChange={this.onActionChange} />\n                        {this.state.errors && <div className=\"alert alert-danger\">{this.state.errors}</div>}\n                        <button id=\"button\">check Active Channel Status</button>\n                    </form>\n                </div> */}\n\n            </>\n        );\n    }\n};\n\nexport default ActionConfirmationPage;\n"]},"metadata":{},"sourceType":"module"}