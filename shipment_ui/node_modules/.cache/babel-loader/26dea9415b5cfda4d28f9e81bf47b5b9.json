{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/RefundChannel.js\";\nimport React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { GetChannelDetails, ChannelRefund } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport { CheckTimeOut } from \"../Utils/TimeUtils\";\n\nclass RefundChannel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      onChainState: false,\n      formFlag: false,\n      sender: \"\"\n    };\n\n    this.handleRefund = async event => {\n      event.preventDefault();\n      this.setState({\n        'errors': false\n      });\n\n      if (!CheckTimeOut(this.state.onChainState.Timeout)) {\n        this.setState({\n          'errors': \"Wait for TimeOut\"\n        });\n      } // TODO: apply id check and input flag otherwise it will be waste of resources.\n      else {\n          ChannelRefund(this.state.channelId, this.state.sender);\n        }\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        console.log(this.props.location.state.action, this.props.location.state.channelId);\n\n        if (this.props.location.state.action === 'Refund') {\n          GetChannelDetails(this.props.location.state.channelId).then(onChainState => {\n            this.setState({\n              'sender': sender,\n              'channelId': this.props.location.state.channelId,\n              'onChainState': onChainState,\n              'formFlag': true\n            });\n            console.log(this.state.onChainState);\n          }).catch(err => {\n            alert(\"on chain state issue\");\n            console.log(err);\n          });\n        } else {\n          alert(\"go back \");\n        }\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Channel Id: \", this.state.channelId), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.state.onChainState && React.createElement(OnChainStateView, {\n      details: this.state.onChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.state.formFlag && React.createElement(\"form\", {\n      id: \"form\",\n      className: \"mt-2\",\n      onSubmit: this.handleRefund,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.errors && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.state.errors), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Refund Channel\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })))));\n  }\n\n}\n\n;\nexport default RefundChannel;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/RefundChannel.js"],"names":["React","GetChannelDetails","ChannelRefund","FetchAccount","OnChainStateView","CheckTimeOut","RefundChannel","Component","state","errors","channelId","onChainState","formFlag","sender","handleRefund","event","preventDefault","setState","Timeout","componentDidMount","then","console","log","props","location","action","catch","err","alert","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,kCAAjD;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,YAAT,QAA6B,oBAA7B;;AAEA,MAAMC,aAAN,SAA4BN,KAAK,CAACO,SAAlC,CAA4C;AAAA;AAAA;AAAA,SACxCC,KADwC,GAChC;AACJC,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,SAAS,EAAE,EAFP;AAGJC,MAAAA,YAAY,EAAE,KAHV;AAIJC,MAAAA,QAAQ,EAAE,KAJN;AAKJC,MAAAA,MAAM,EAAE;AALJ,KADgC;;AAAA,SAqCxCC,YArCwC,GAqCzB,MAAOC,KAAP,IAAiB;AAC5BA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKC,QAAL,CAAc;AAAE,kBAAU;AAAZ,OAAd;;AACA,UAAI,CAACZ,YAAY,CAAC,KAAKG,KAAL,CAAWG,YAAX,CAAwBO,OAAzB,CAAjB,EAAoD;AAChD,aAAKD,QAAL,CAAc;AAAE,oBAAU;AAAZ,SAAd;AACH,OAFD,CAGA;AAHA,WAIK;AACDf,UAAAA,aAAa,CAAC,KAAKM,KAAL,CAAWE,SAAZ,EAAuB,KAAKF,KAAL,CAAWK,MAAlC,CAAb;AACH;AACJ,KA/CuC;AAAA;;AASxCM,EAAAA,iBAAiB,GAAG;AAChBhB,IAAAA,YAAY,GAAGiB,IAAf,CAAoBP,MAAM,IAAI;AAC1B,UAAIA,MAAJ,EAAY;AACRQ,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,QAAX,CAAoBhB,KAApB,CAA0BiB,MAAtC,EAA8C,KAAKF,KAAL,CAAWC,QAAX,CAAoBhB,KAApB,CAA0BE,SAAxE;;AACA,YAAI,KAAKa,KAAL,CAAWC,QAAX,CAAoBhB,KAApB,CAA0BiB,MAA1B,KAAqC,QAAzC,EAAmD;AAC/CxB,UAAAA,iBAAiB,CAAC,KAAKsB,KAAL,CAAWC,QAAX,CAAoBhB,KAApB,CAA0BE,SAA3B,CAAjB,CAAuDU,IAAvD,CAA4DT,YAAY,IAAI;AACxE,iBAAKM,QAAL,CAAc;AACV,wBAAUJ,MADA;AAEV,2BAAa,KAAKU,KAAL,CAAWC,QAAX,CAAoBhB,KAApB,CAA0BE,SAF7B;AAGV,8BAAgBC,YAHN;AAIV,0BAAY;AAJF,aAAd;AAMAU,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWG,YAAvB;AACH,WARD,EAQGe,KARH,CAQSC,GAAG,IAAI;AACZC,YAAAA,KAAK,CAAC,sBAAD,CAAL;AACAP,YAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACH,WAXD;AAYH,SAbD,MAcK;AACDC,UAAAA,KAAK,CAAC,UAAD,CAAL;AACH;AACJ;AACJ,KArBD,EAqBGF,KArBH,CAqBSC,GAAG,IAAI;AACZC,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACH,KAxBD;AAyBH;;AAcDE,EAAAA,MAAM,GAAG;AACL,WACI,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiB,KAAKrB,KAAL,CAAWE,SAA5B,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKF,KAAL,CAAWG,YAAX,IAA2B,oBAAC,gBAAD;AAAkB,MAAA,OAAO,EAAE,KAAKH,KAAL,CAAWG,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADhC,CADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKH,KAAL,CAAWI,QAAX,IACA;AAAM,MAAA,EAAE,EAAC,MAAT;AAAgB,MAAA,SAAS,EAAC,MAA1B;AAAiC,MAAA,QAAQ,EAAE,KAAKE,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKN,KAAL,CAAWC,MAAX,IAAqB;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqC,KAAKD,KAAL,CAAWC,MAAhD,CAD1B,EAEI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,gBAA3B;AAA4C,MAAA,SAAS,EAAC,iBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAHR,CALJ,CAFJ,CADJ;AAoBH;;AAtEuC;;AAuE3C;AAED,eAAeH,aAAf","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { GetChannelDetails, ChannelRefund } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport { CheckTimeOut } from \"../Utils/TimeUtils\";\n\nclass RefundChannel extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        onChainState: false,\n        formFlag: false,\n        sender: \"\",\n    }\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n                console.log(this.props.location.state.action, this.props.location.state.channelId)\n                if (this.props.location.state.action === 'Refund') {\n                    GetChannelDetails(this.props.location.state.channelId).then(onChainState => {\n                        this.setState({\n                            'sender': sender,\n                            'channelId': this.props.location.state.channelId,\n                            'onChainState': onChainState,\n                            'formFlag': true,\n                        })\n                        console.log(this.state.onChainState)\n                    }).catch(err => {\n                        alert(\"on chain state issue\")\n                        console.log(err)\n                    })\n                }\n                else {\n                    alert(\"go back \")\n                }\n            }\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    handleRefund = async (event) => {\n        event.preventDefault();\n        this.setState({ 'errors': false })\n        if (!CheckTimeOut(this.state.onChainState.Timeout)) {\n            this.setState({ 'errors': \"Wait for TimeOut\" })\n        }\n        // TODO: apply id check and input flag otherwise it will be waste of resources.\n        else {\n            ChannelRefund(this.state.channelId, this.state.sender)\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Channel Id: {this.state.channelId}</h2>\n                <div>\n                    <div>\n                        {this.state.onChainState && <OnChainStateView details={this.state.onChainState} />}\n                    </div>\n\n                    <div>\n                        {\n                            this.state.formFlag &&\n                            <form id=\"form\" className=\"mt-2\" onSubmit={this.handleRefund}>\n                                {this.state.errors && <div className=\"alert alert-danger\">{this.state.errors}</div>}\n                                <input type=\"submit\" value=\"Refund Channel\" className=\"btn btn-primary\" />\n                            </form>}\n                    </div>\n                </div>\n\n            </>\n        );\n    }\n};\n\nexport default RefundChannel;\n"]},"metadata":{},"sourceType":"module"}