{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/FinalizeChannel.js\";\nimport React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails, MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass FinalizeChannel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      onChainState: false,\n      offChainState: false,\n      formFlag: false,\n      sender: \"\"\n    };\n\n    this.handleFinalizeChannel = async event => {\n      event.preventDefault();\n      this.setState({\n        'errors': false\n      });\n\n      if (!this.state.offChainState || this.state.offChainState === 'No off chain state Found') {\n        alert(\"Finalize Close needs Off Chain State\", this.state.offChainState);\n      } else if (Number.isNaN(parseInt(this.state.bobCash, 10))) {\n        this.setState({\n          'errors': \"Enter Integer amount(in wei unit)\"\n        });\n      } else {\n        let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash)); // console.log(sig)\n        // let sender = await FetchAccount()\n\n        await IsValidSignature(this.state.sender, this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash), sig); // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n\n        let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender);\n        let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig);\n        let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState);\n        console.log(\"hello \", response);\n      }\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        if (this.props.location.state.action === 'Finalize') {\n          GetChannelDetails(this.props.location.state.channelId).then(onChainState => {\n            let offChainState = FetchOffChainDetails(sender, this.props.location.state.channelId);\n            this.setState({\n              'sender': sender,\n              'channelId': this.props.location.state.channelId,\n              'offChainState': offChainState,\n              'onChainState': onChainState,\n              'formFlag': true\n            });\n          }).catch(err => {\n            alert(\"on chain state issue\");\n            console.log(err);\n          });\n        } else {\n          alert(\"go back \");\n        }\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Channel Id: \", this.state.channelId), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.onChainState && React.createElement(OnChainStateView, {\n      details: this.state.onChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.offChainState && React.createElement(OffChainStateView, {\n      details: this.state.offChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.formFlag && React.createElement(\"form\", {\n      id: \"form\",\n      className: \"mt-2\",\n      onSubmit: this.handleFinalizeChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.errors && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.errors), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Finalize Channel\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })))));\n  }\n\n}\n\n;\nexport default FinalizeChannel;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/FinalizeChannel.js"],"names":["React","IsValidSignature","FetchOtherParty","GetChannelDetails","FetchAccount","OnChainStateView","OffChainStateView","FetchOffChainDetails","MakeStringState","GenerateSignatures","SetRequest","STATE_TYPE","FinalizeChannel","Component","state","errors","channelId","onChainState","offChainState","formFlag","sender","handleFinalizeChannel","event","preventDefault","setState","alert","Number","isNaN","parseInt","bobCash","sig","aliceCash","TheOtherParty","stringifyState","response","Request","console","log","componentDidMount","then","props","location","action","catch","err","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails, MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass FinalizeChannel extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        onChainState: false,\n        offChainState: false,\n        formFlag: false,\n        sender: \"\",\n    }\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n\n                if (this.props.location.state.action === 'Finalize') {\n                    GetChannelDetails(this.props.location.state.channelId).then(onChainState => {\n                        let offChainState = FetchOffChainDetails(sender, this.props.location.state.channelId)\n                        this.setState({\n                            'sender': sender,\n                            'channelId': this.props.location.state.channelId,\n                            'offChainState': offChainState,\n                            'onChainState': onChainState,\n                            'formFlag': true,\n                        })\n                    }).catch(err => {\n                        alert(\"on chain state issue\")\n                        console.log(err)\n                    })\n                }\n                else {\n                    alert(\"go back \")\n                }\n            }\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    handleFinalizeChannel = async (event) => {\n        event.preventDefault();\n        this.setState({ 'errors': false })\n        if (!this.state.offChainState || this.state.offChainState === 'No off chain state Found') {\n            alert(\"Finalize Close needs Off Chain State\", this.state.offChainState)\n        }\n        else if (Number.isNaN(parseInt(this.state.bobCash, 10))) {\n            this.setState({ 'errors': \"Enter Integer amount(in wei unit)\" })\n        }\n        else {\n            let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash))\n            // console.log(sig)\n            // let sender = await FetchAccount()\n            await IsValidSignature(this.state.sender, this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash), sig)\n\n            // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n            let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender)\n            let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig)\n            let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState)\n            console.log(\"hello \", response)\n\n\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Channel Id: {this.state.channelId}</h2>\n                <div>\n                    <div>\n                        {this.state.onChainState && <OnChainStateView details={this.state.onChainState} />}\n                    </div>\n                    <div>\n                        {this.state.offChainState && <OffChainStateView details={this.state.offChainState} />}\n                    </div>\n                    <div>\n                        {this.state.formFlag &&\n                            <form id=\"form\" className=\"mt-2\" onSubmit={this.handleFinalizeChannel}>\n\n                                {this.state.errors && <div className=\"alert alert-danger\">{this.state.errors}</div>}\n                                <input type=\"submit\" value=\"Finalize Channel\" className=\"btn btn-primary\" />\n                            </form>}\n                    </div>\n                </div>\n\n            </>\n        );\n    }\n};\n\nexport default FinalizeChannel;\n"]},"metadata":{},"sourceType":"module"}