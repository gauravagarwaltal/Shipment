{"ast":null,"code":"import _slicedToArray from \"/home/gaurava/work/learning/react/shipment/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/contract/FetchContractTxns.js\";\nimport React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"./CreateInstance\";\nimport { GetChannelDetails, IsMyChannelStatic } from \"../contract/contract_transaction\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass FetchContractTxn extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sender: \"\"\n    };\n\n    this.handle = promise => {\n      return promise.then(data => [data, undefined]).catch(error => Promise.resolve([undefined, error]));\n    };\n\n    this.fetchEventFilter = async event => {\n      event.preventDefault();\n      let events = await FilterEvents(this.state.sender);\n\n      if (events === undefined || events === null) {\n        return;\n      }\n\n      for (let i = 0; i < events.length; i++) {\n        let element = events[i];\n        console.log(element.event, element.blockNumber, element.returnValues); // element.event = 's'\n\n        if (element.event === 'EventChannelInitializing') {// trigered when smart-contract deployed\n          // event EventChannelInitializing(address libSig);\n          // console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0])\n        } else if (element.event === 'EventInitializing') {\n          // add channel id in the waiting list\n          // triggered when new channel will be initiailized\n          // event EventInitializing(uint channel_id, address addressAlice, address addressBob );\n          let channel_id = Number.parseInt(element.returnValues[0], 10); // let [result, error] = await this.handle(IsMyChannel(channel_id, this.state.sender))\n          // if (error !== undefined) {\n          //     alert(error)\n          //     break\n          // }\n\n          let result = IsMyChannelStatic(element.returnValues[1], element.returnValues[2], this.state.sender);\n          console.log(result);\n\n          if (result) {\n            let key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            let index = waiting_channels.indexOf(channel_id);\n\n            if (index < 0) {\n              waiting_channels.push(channel_id);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n              key = this.state.sender + channel_id + '_last_signed_state';\n              let value = localStorage.getItem(key);\n\n              if (value == null) {\n                let _ref = await this.handle(GetChannelDetails(channel_id)),\n                    _ref2 = _slicedToArray(_ref, 2),\n                    onChainState = _ref2[0],\n                    error = _ref2[1];\n\n                if (error !== undefined) {\n                  alert(error);\n                  break;\n                }\n\n                let count = 0;\n                let alice_cash = onChainState[\"Alice Cash\"];\n                let bob_cash = onChainState[\"Bob Cash\"];\n                value = channel_id + '_' + count + '_' + alice_cash + '_' + bob_cash + '_default_sign';\n                localStorage.setItem(key, value);\n                console.log(onChainState);\n              }\n            }\n\n            console.log('EventInitializing', channel_id);\n            console.log(\"waiting channels \", waiting_channels);\n          }\n        } else if (element.event === 'EventInitialized') {\n          // REMOVE channel id from waiting list & add channel id in the active channel list\n          // Set state if not present in local storage\n          // triggered when channel confirmed by both parties.\n          // console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2])\n          // event EventInitialized(uint channel_id, address addressAlice, address addressBob);\n          let channel_id = Number.parseInt(element.returnValues[0], 10);\n          let result = IsMyChannelStatic(element.returnValues[1], element.returnValues[2], this.state.sender);\n          console.log(result);\n\n          if (result) {\n            let key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            let index = waiting_channels.indexOf(channel_id);\n\n            if (index > -1) {\n              waiting_channels.splice(index, 1);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n            }\n\n            key = this.state.sender + 'active_channel_ids';\n            let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\");\n            index = active_channel_ids.indexOf(channel_id);\n\n            if (index < 0) {\n              active_channel_ids.push(channel_id);\n              localStorage.setItem(key, JSON.stringify(active_channel_ids));\n              key = this.state.sender + channel_id + '_last_signed_state';\n              let value = localStorage.getItem(key);\n\n              if (value == null) {\n                let _ref3 = await this.handle(GetChannelDetails(channel_id)),\n                    _ref4 = _slicedToArray(_ref3, 2),\n                    onChainState = _ref4[0],\n                    error = _ref4[1];\n\n                if (error !== undefined) {\n                  alert(error);\n                  break;\n                }\n\n                let count = 0;\n                let alice_cash = onChainState[\"Alice Cash\"];\n                let bob_cash = onChainState[\"Bob Cash\"];\n                value = channel_id + '_' + count + '_' + alice_cash + '_' + bob_cash + '_default_sign';\n                localStorage.setItem(key, value);\n                console.log(onChainState);\n              }\n            }\n\n            console.log(\"EventInitialized\", channel_id);\n            console.log(\"active_channel_ids\", active_channel_ids);\n            console.log(\"waiting_channel_ids\", waiting_channels);\n          }\n        } else if (element.event === 'EventRefunded') {\n          // event EventRefunded(uint channel_id, address addressAlice);\n          let channel_id = Number.parseInt(element.returnValues[0], 10);\n          let key = this.state.sender + 'waiting_channel_ids';\n          let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n          let index = waiting_channels.indexOf(channel_id);\n\n          if (index > -1) {\n            waiting_channels.splice(index, 1);\n            localStorage.setItem(key, JSON.stringify(waiting_channels));\n            console.log(\"waiting channels \", waiting_channels);\n            key = this.state.sender + channel_id + '_last_signed_state'; // TODO: update logice so that this will be independent from last blocked fetched\n\n            localStorage.removeItem(key);\n          }\n\n          console.log(\"EventRefunded\", channel_id);\n          console.log('element.returnValues', element.returnValues);\n        } else if (element.event === 'EventClosing') {\n          // add channel id in waiting list \n          // event EventClosing(uint channel_id);\n          // this event means one party started channel closing action \n          // and the other needs to take action to make concensus\n          let channel_id = Number.parseInt(element.returnValues[0], 10);\n          let key = this.state.sender + 'active_channel_ids';\n          let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\");\n          let index = active_channel_ids.indexOf(channel_id);\n\n          if (index > -1) {\n            key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            index = waiting_channels.indexOf(channel_id);\n\n            if (index < 0) {\n              waiting_channels.push(channel_id);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n            }\n\n            console.log(\"waiting_channel_ids\", waiting_channels);\n          }\n\n          console.log(\"EventClosing\", channel_id);\n        } else if (element.event === 'EventClosed') {\n          // event EventClosed(uint channel_id, address addressAlice, address addressBob);\n          // triggered when both parties signed closing action or \n          // one party use finalizeClose action after timeout happened\n          let channel_id = Number.parseInt(element.returnValues[0], 10);\n          let result = IsMyChannelStatic(element.returnValues[1], element.returnValues[2], this.state.sender);\n          console.log(result);\n          result = true;\n\n          if (result) {\n            let key = this.state.sender + 'active_channel_ids';\n            let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\");\n            let index = active_channel_ids.indexOf(channel_id);\n\n            if (index > -1) {\n              active_channel_ids.splice(index, 1);\n              localStorage.setItem(key, JSON.stringify(active_channel_ids));\n            }\n\n            key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            index = waiting_channels.indexOf(channel_id);\n\n            if (index > -1) {\n              waiting_channels.splice(index, 1);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n            }\n\n            key = this.state.sender + channel_id + '_last_signed_state';\n            localStorage.removeItem(key);\n            console.log(\"EventClosed\", channel_id);\n            console.log(\"active_channel_ids\", active_channel_ids);\n            console.log(\"waiting_channel_ids\", waiting_channels);\n          }\n        } else if (element.event === 'EventNotClosed') {// event EventNotClosed(uint channel_id);\n          // triggered when false EventClosing happened.\n        }\n      }\n\n      ;\n    };\n\n    this.handlerEvents = async event => {\n      event.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      console.log(sender);\n\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n      }\n    }).catch(err => {\n      toast.error(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.fetchEventFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Apply Event Filter \"))));\n  }\n\n}\n\n;\nexport default FetchContractTxn;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/contract/FetchContractTxns.js"],"names":["React","FetchAccount","FilterEvents","GetChannelDetails","IsMyChannelStatic","toast","FetchContractTxn","Component","state","sender","handle","promise","then","data","undefined","catch","error","Promise","resolve","fetchEventFilter","event","preventDefault","events","i","length","element","console","log","blockNumber","returnValues","channel_id","Number","parseInt","result","key","waiting_channels","JSON","parse","localStorage","getItem","index","indexOf","push","setItem","stringify","value","onChainState","alert","count","alice_cash","bob_cash","splice","active_channel_ids","removeItem","handlerEvents","componentDidMount","setState","err","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"./CreateInstance\";\nimport { GetChannelDetails, IsMyChannelStatic } from \"../contract/contract_transaction\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nclass FetchContractTxn extends React.Component {\n    state = {\n        sender: \"\",\n    }\n\n    componentDidMount() {\n\n        FetchAccount().then(sender => {\n            console.log(sender)\n            if (sender) {\n                this.setState({ 'sender': sender })\n            }\n        })\n            .catch(err => {\n                toast.error(\"check metamask connectivity\")\n                console.log(err)\n            })\n    }\n\n    handle = (promise) => {\n        return promise\n            .then(data => ([data, undefined]))\n            .catch(error => Promise.resolve([undefined, error]));\n    }\n\n    fetchEventFilter = async (event) => {\n        event.preventDefault();\n        let events = await FilterEvents(this.state.sender)\n\n        if (events === undefined || events === null) {\n            return\n        }\n        for (let i = 0; i < events.length; i++) {\n            let element = events[i]\n\n            console.log(element.event, element.blockNumber, element.returnValues)\n            // element.event = 's'\n            if (element.event === 'EventChannelInitializing') {\n                // trigered when smart-contract deployed\n                // event EventChannelInitializing(address libSig);\n                // console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0])\n            }\n            else if (element.event === 'EventInitializing') {\n                // add channel id in the waiting list\n                // triggered when new channel will be initiailized\n                // event EventInitializing(uint channel_id, address addressAlice, address addressBob );\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n                // let [result, error] = await this.handle(IsMyChannel(channel_id, this.state.sender))\n                // if (error !== undefined) {\n                //     alert(error)\n                //     break\n                // }\n                let result = IsMyChannelStatic(element.returnValues[1], element.returnValues[2], this.state.sender)\n                console.log(result)\n                if (result) {\n                    let key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    let index = waiting_channels.indexOf(channel_id);\n                    if (index < 0) {\n                        waiting_channels.push(channel_id)\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n                        key = this.state.sender + channel_id + '_last_signed_state'\n                        let value = localStorage.getItem(key)\n                        if (value == null) {\n                            let [onChainState, error] = await this.handle(GetChannelDetails(channel_id))\n                            if (error !== undefined) {\n                                alert(error)\n                                break\n                            }\n                            let count = 0\n                            let alice_cash = onChainState[\"Alice Cash\"]\n                            let bob_cash = onChainState[\"Bob Cash\"]\n                            value = channel_id + '_' + count + '_' + alice_cash + '_' + bob_cash + '_default_sign'\n                            localStorage.setItem(key, value)\n                            console.log(onChainState)\n                        }\n                    }\n                    console.log('EventInitializing', channel_id)\n                    console.log(\"waiting channels \", waiting_channels)\n                }\n            }\n            else if (element.event === 'EventInitialized') {\n                // REMOVE channel id from waiting list & add channel id in the active channel list\n                // Set state if not present in local storage\n                // triggered when channel confirmed by both parties.\n                // console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2])\n                // event EventInitialized(uint channel_id, address addressAlice, address addressBob);\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n                let result = IsMyChannelStatic(element.returnValues[1], element.returnValues[2], this.state.sender)\n                console.log(result)\n                if (result) {\n                    let key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    let index = waiting_channels.indexOf(channel_id);\n                    if (index > -1) {\n                        waiting_channels.splice(index, 1);\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n\n                    }\n                    key = this.state.sender + 'active_channel_ids'\n                    let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    index = active_channel_ids.indexOf(channel_id);\n                    if (index < 0) {\n                        active_channel_ids.push(channel_id)\n                        localStorage.setItem(key, JSON.stringify(active_channel_ids));\n                        key = this.state.sender + channel_id + '_last_signed_state'\n                        let value = localStorage.getItem(key)\n                        if (value == null) {\n                            let [onChainState, error] = await this.handle(GetChannelDetails(channel_id))\n                            if (error !== undefined) {\n                                alert(error)\n                                break\n                            }\n                            let count = 0\n                            let alice_cash = onChainState[\"Alice Cash\"]\n                            let bob_cash = onChainState[\"Bob Cash\"]\n                            value = channel_id + '_' + count + '_' + alice_cash + '_' + bob_cash + '_default_sign'\n                            localStorage.setItem(key, value)\n                            console.log(onChainState)\n                        }\n                    }\n                    console.log(\"EventInitialized\", channel_id)\n                    console.log(\"active_channel_ids\", active_channel_ids)\n                    console.log(\"waiting_channel_ids\", waiting_channels)\n                }\n            }\n            else if (element.event === 'EventRefunded') {\n                // event EventRefunded(uint channel_id, address addressAlice);\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n                let key = this.state.sender + 'waiting_channel_ids'\n                let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                let index = waiting_channels.indexOf(channel_id);\n                if (index > -1) {\n                    waiting_channels.splice(index, 1);\n                    localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    console.log(\"waiting channels \", waiting_channels)\n                    key = this.state.sender + channel_id + '_last_signed_state'\n                    // TODO: update logice so that this will be independent from last blocked fetched\n                    localStorage.removeItem(key)\n                }\n                console.log(\"EventRefunded\", channel_id)\n                console.log('element.returnValues', element.returnValues)\n\n            }\n            else if (element.event === 'EventClosing') {\n                // add channel id in waiting list \n                // event EventClosing(uint channel_id);\n                // this event means one party started channel closing action \n                // and the other needs to take action to make concensus\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n\n                let key = this.state.sender + 'active_channel_ids'\n                let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\")\n                let index = active_channel_ids.indexOf(channel_id);\n                if (index > -1) {\n                    key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    index = waiting_channels.indexOf(channel_id);\n                    if (index < 0) {\n                        waiting_channels.push(channel_id)\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    }\n                    console.log(\"waiting_channel_ids\", waiting_channels)\n                }\n\n                console.log(\"EventClosing\", channel_id)\n\n            }\n            else if (element.event === 'EventClosed') {\n                // event EventClosed(uint channel_id, address addressAlice, address addressBob);\n                // triggered when both parties signed closing action or \n                // one party use finalizeClose action after timeout happened\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n                let result = IsMyChannelStatic(element.returnValues[1], element.returnValues[2], this.state.sender)\n                console.log(result)\n                result = true\n                if (result) {\n                    let key = this.state.sender + 'active_channel_ids'\n                    let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\")\n\n                    let index = active_channel_ids.indexOf(channel_id);\n                    if (index > -1) {\n                        active_channel_ids.splice(index, 1)\n                        localStorage.setItem(key, JSON.stringify(active_channel_ids));\n\n                    }\n                    key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    index = waiting_channels.indexOf(channel_id);\n                    if (index > -1) {\n                        waiting_channels.splice(index, 1);\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n\n                    }\n                    key = this.state.sender + channel_id + '_last_signed_state'\n                    localStorage.removeItem(key)\n                    console.log(\"EventClosed\", channel_id)\n                    console.log(\"active_channel_ids\", active_channel_ids)\n                    console.log(\"waiting_channel_ids\", waiting_channels)\n                }\n            }\n            else if (element.event === 'EventNotClosed') {\n                // event EventNotClosed(uint channel_id);\n                // triggered when false EventClosing happened.\n            }\n        };\n    }\n\n    handlerEvents = async (event) => {\n        event.preventDefault();\n\n    }\n\n    render() {\n        return (\n            <>\n                <div>\n                    <p><button onClick={this.fetchEventFilter}>Apply Event Filter </button></p>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default FetchContractTxn;\n"]},"metadata":{},"sourceType":"module"}