{"ast":null,"code":"import { FetchAccount } from '../components/MetaMaskFetch';\n\nconst Web3 = require('web3');\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nasync function GenerateSignatures(count, aliceCash, bobCash) {\n  // const hash = await web3.utils.soliditySha3(\n  //     {type: 'address', value: vpc.options.address},\n  //     {type: 'uint', value: sid},\n  //     {type: 'uint', value: blockedAlice},\n  //     {type: 'uint', value: blockedBob},\n  //     {type: 'uint', value: version});\n  const hash = await web3.utils.soliditySha3({\n    type: 'uint',\n    value: count\n  }, {\n    type: 'uint',\n    value: aliceCash\n  }, {\n    type: 'uint',\n    value: bobCash\n  });\n  let sender = await FetchAccount();\n  sender = web3.utils.toChecksumAddress(sender);\n  console.log(sender);\n  const sigAlice = await web3.eth.personal.sign(hash, sender, \"\"); //web3.eth.sign(hash,aliceAddr);\n  //web3.eth.sign(hash,bobAddr);\n\n  return {\n    alice: sigAlice\n  };\n}\n\nasync function EventFilter() {\n  // await web3.eth.subscribe()\n  await web3.eth.subscribe('logs', {}, function (error, result) {\n    if (!error) {\n      console.log(result);\n    }\n  });\n}\n\nexport default EventFilter;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/contract/FilterEvent.js"],"names":["FetchAccount","Web3","require","web3","givenProvider","GenerateSignatures","count","aliceCash","bobCash","hash","utils","soliditySha3","type","value","sender","toChecksumAddress","console","log","sigAlice","eth","personal","sign","alice","EventFilter","subscribe","error","result"],"mappings":"AAAA,SAASA,YAAT,QAA6B,6BAA7B;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,IAAI,GAAG,IAAIF,IAAJ,CAASA,IAAI,CAACG,aAAL,IAAsB,uBAA/B,CAAb;;AAGA,eAAeC,kBAAf,CAAkCC,KAAlC,EAAyCC,SAAzC,EAAoDC,OAApD,EAA6D;AAEzD;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,IAAI,GAAG,MAAMN,IAAI,CAACO,KAAL,CAAWC,YAAX,CACf;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAEP;AAAvB,GADe,EAEf;AAAEM,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAEN;AAAvB,GAFe,EAGf;AAAEK,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAEL;AAAvB,GAHe,CAAnB;AAKA,MAAIM,MAAM,GAAG,MAAMd,YAAY,EAA/B;AACAc,EAAAA,MAAM,GAAGX,IAAI,CAACO,KAAL,CAAWK,iBAAX,CAA6BD,MAA7B,CAAT;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,QAAMI,QAAQ,GAAG,MAAMf,IAAI,CAACgB,GAAL,CAASC,QAAT,CAAkBC,IAAlB,CAAuBZ,IAAvB,EAA6BK,MAA7B,EAAqC,EAArC,CAAvB,CAjByD,CAkBzD;AACA;;AACA,SAAO;AACHQ,IAAAA,KAAK,EAAEJ;AADJ,GAAP;AAGH;;AAED,eAAeK,WAAf,GAA6B;AACzB;AACA,QAAMpB,IAAI,CAACgB,GAAL,CAASK,SAAT,CAAmB,MAAnB,EAA2B,EAA3B,EAA+B,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AAC1D,QAAI,CAACD,KAAL,EAAY;AACRT,MAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACH;AACJ,GAJK,CAAN;AAMH;;AAED,eAAeH,WAAf","sourcesContent":["import { FetchAccount } from '../components/MetaMaskFetch';\nconst Web3 = require('web3')\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n\n\nasync function GenerateSignatures(count, aliceCash, bobCash) {\n\n    // const hash = await web3.utils.soliditySha3(\n    //     {type: 'address', value: vpc.options.address},\n    //     {type: 'uint', value: sid},\n    //     {type: 'uint', value: blockedAlice},\n    //     {type: 'uint', value: blockedBob},\n    //     {type: 'uint', value: version});\n\n    const hash = await web3.utils.soliditySha3(\n        { type: 'uint', value: count },\n        { type: 'uint', value: aliceCash },\n        { type: 'uint', value: bobCash });\n\n    let sender = await FetchAccount()\n    sender = web3.utils.toChecksumAddress(sender)\n    console.log(sender)\n    const sigAlice = await web3.eth.personal.sign(hash, sender, \"\");\n    //web3.eth.sign(hash,aliceAddr);\n    //web3.eth.sign(hash,bobAddr);\n    return {\n        alice: sigAlice\n    };\n}\n\nasync function EventFilter() {\n    // await web3.eth.subscribe()\n    await web3.eth.subscribe('logs', {}, function (error, result) {\n        if (!error) {\n            console.log(result)\n        }\n    });\n\n}\n\nexport default EventFilter;"]},"metadata":{},"sourceType":"module"}