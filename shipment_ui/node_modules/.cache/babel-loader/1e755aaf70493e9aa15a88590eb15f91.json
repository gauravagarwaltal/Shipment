{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/FetchContractTxns.js\";\nimport React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"../contract/CreateInstance\";\n\nclass FetchContractTxn extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sender: \"\",\n      key: '',\n      fetchedEvent: null\n    };\n\n    this.fetchEventFilter = async event => {\n      event.preventDefault();\n      let events = await FilterEvents(this.state.sender); // localStorage.setItem(this.state.key, JSON.stringify(events));\n\n      this.setState({\n        'fetchedEvent': []\n      });\n      events.forEach(element => {\n        console.log(element.event);\n\n        if (element.event === 'EventChannelInitializing') {\n          // event EventChannelInitializing(address libSig);\n          console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0]);\n        } else if (element.event === 'EventInitializing') {\n          // event EventInitializing(address addressAlice, address addressBob, uint channel_id);\n          console.log(\"channel open initated by\", element.returnValues[0], \"with \", element.returnValues[1], \"and channel id is \", element.returnValues[2]);\n\n          if (this.state.sender === element.returnValues[0]) {\n            let key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            var index = this.state.channels.indexOf(this.state.value);\n\n            if (index < 0) {\n              this.state.channels.push(this.state.value);\n              let key = this.state.sender + 'PayMentChannels';\n              localStorage.setItem(key, JSON.stringify(this.state.channels));\n            }\n\n            console.log(\"onAddChange Called \", this.state.value); // add one page for refund or add payment to channel \n            // add channel id to waiting to confirm channel list\n            // also verify waiting time is over or not\n          }\n\n          if (this.state.sender === element.returnValues[1]) {// add channel id to waiting to confirm channel list\n            // also verify waiting time is over or not\n          }\n        } else if (element.event === 'EventInitialized') {\n          console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2]); // event EventInitialized(uint cashAlice, uint cashBob, uint channel_id);\n        } else if (element.event === 'EventRefunded') {// event EventRefunded(uint channel_id);\n        } else if (element.event === 'EventClosing') {// event EventClosing(uint channel_id);\n        } else if (element.event === 'EventClosed') {// event EventClosed(uint channel_id);\n        } else if (element.event === 'EventNotClosed') {// event EventNotClosed(uint channel_id);\n        }\n      });\n      localStorage.setItem(this.state.key, JSON.stringify(this.state.fetchedEvent));\n    };\n\n    this.handlerEvents = async event => {\n      event.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      console.log(sender);\n\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        this.setState({\n          'key': this.state.sender + 'contract_events'\n        });\n      }\n\n      console.log(this.state.key);\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Event Filter Outcome\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.fetchEventFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Apply Event Filter \")), React.createElement(\"table\", {\n      id: \"table\",\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Accept State\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"State Details\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Last Signed State\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, JSON.parse(localStorage.getItem(this.state.key)) && Object.keys(JSON.parse(localStorage.getItem(this.state.key))).map(request => {\n      return React.createElement(\"tr\", {\n        key: request,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => this.handlerEvents(this.state.fetchedEvent[request], request),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Accept Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, JSON.parse(localStorage.getItem(this.state.key))[request])), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Show Last Signed State\")));\n    }))))));\n  }\n\n}\n\n;\nexport default FetchContractTxn;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/FetchContractTxns.js"],"names":["React","FetchAccount","FilterEvents","FetchContractTxn","Component","state","sender","key","fetchedEvent","fetchEventFilter","event","preventDefault","events","setState","forEach","element","console","log","returnValues","waiting_channels","JSON","parse","localStorage","getItem","index","channels","indexOf","value","push","setItem","stringify","handlerEvents","componentDidMount","then","catch","err","alert","render","Object","keys","map","request"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"../contract/CreateInstance\";\n\n\nclass FetchContractTxn extends React.Component {\n    state = {\n        sender: \"\",\n        key: '',\n        fetchedEvent: null,\n    }\n\n    componentDidMount() {\n\n        FetchAccount().then(sender => {\n            console.log(sender)\n            if (sender) {\n                this.setState({ 'sender': sender })\n                this.setState({ 'key': this.state.sender + 'contract_events' })\n            }\n            console.log(this.state.key)\n        })\n            .catch(err => {\n                alert(\"check metamask connectivity\")\n                console.log(err)\n            })\n    }\n\n    fetchEventFilter = async (event) => {\n        event.preventDefault();\n        let events = await FilterEvents(this.state.sender)\n\n        // localStorage.setItem(this.state.key, JSON.stringify(events));\n        this.setState({ 'fetchedEvent': [] })\n        events.forEach(element => {\n            console.log(element.event)\n            if (element.event === 'EventChannelInitializing') {\n                // event EventChannelInitializing(address libSig);\n                console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0])\n            }\n            else if (element.event === 'EventInitializing') {\n                // event EventInitializing(address addressAlice, address addressBob, uint channel_id);\n                console.log(\"channel open initated by\", element.returnValues[0], \"with \", element.returnValues[1], \"and channel id is \", element.returnValues[2])\n                if (this.state.sender === element.returnValues[0]) {\n                    let key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    var index = this.state.channels.indexOf(this.state.value);\n                    if (index < 0) {\n                        this.state.channels.push(this.state.value)\n                        let key = this.state.sender + 'PayMentChannels'\n                        localStorage.setItem(key, JSON.stringify(this.state.channels));\n                    }\n                    console.log(\"onAddChange Called \", this.state.value)\n                    // add one page for refund or add payment to channel \n                    // add channel id to waiting to confirm channel list\n                    // also verify waiting time is over or not\n                }\n                if (this.state.sender === element.returnValues[1]) {\n                    // add channel id to waiting to confirm channel list\n                    // also verify waiting time is over or not\n                }\n            }\n            else if (element.event === 'EventInitialized') {\n                console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2])\n                // event EventInitialized(uint cashAlice, uint cashBob, uint channel_id);\n            }\n            else if (element.event === 'EventRefunded') {\n                // event EventRefunded(uint channel_id);\n            }\n            else if (element.event === 'EventClosing') {\n                // event EventClosing(uint channel_id);\n            }\n            else if (element.event === 'EventClosed') {\n                // event EventClosed(uint channel_id);\n            }\n            else if (element.event === 'EventNotClosed') {\n                // event EventNotClosed(uint channel_id);\n            }\n        });\n        localStorage.setItem(this.state.key, JSON.stringify(this.state.fetchedEvent));\n    }\n\n    handlerEvents = async (event) => {\n        event.preventDefault();\n\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Event Filter Outcome</h2>\n                <div>\n                    <div>\n                        <p><button onClick={this.fetchEventFilter}>Apply Event Filter </button></p>\n                        <table id=\"table\" className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Accept State</th>\n                                    <th>State Details</th>\n                                    <th>Last Signed State</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n\n                                    JSON.parse(localStorage.getItem(this.state.key)) && Object.keys(JSON.parse(localStorage.getItem(this.state.key))).map(request => {\n                                        return (\n\n                                            <tr key={request}>\n                                                <td>\n                                                    <button\n                                                        className=\"btn btn-outline-danger\"\n                                                        onClick={() => this.handlerEvents(this.state.fetchedEvent[request], request)}\n                                                    >\n                                                        Accept Request\n                                            </button>\n                                                </td>\n                                                <td><span>{JSON.parse(localStorage.getItem(this.state.key))[request]}</span></td>\n                                                <td>\n                                                    <button className=\"btn btn-outline-danger\"  >\n                                                        Show Last Signed State\n                                                </button>\n                                                </td>\n                                            </tr>\n                                        )\n\n                                    }\n                                    )\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default FetchContractTxn;\n"]},"metadata":{},"sourceType":"module"}