{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/UserList.js\";\nimport React from \"react\"; // import PropTypes from \"prop-types\";\n\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport './UserList.css';\n\nclass UserList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      onChainState: false,\n      offChainState: false,\n      formFlag: false,\n      sender: \"\",\n      action: '',\n      aliceCash: '',\n      bobCash: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"User DataBase\"), React.createElement(Link, {\n      to: \"/adduser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"AddUser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Add New User\"))), React.createElement(\"table\", {\n      id: \"table\",\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"\\xA0\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Address\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Category\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, Object.keys(this.props.users).map(user => {\n      return React.createElement(\"tr\", {\n        key: user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => {\n          const min = 10000000;\n          const max = 100000000;\n          const rand = Math.floor(min + Math.random() * (max - min));\n          console.log(rand);\n          let cash = prompt(\"Please channel money:\", '111');\n\n          if (Number.isNaN(parseInt(cash, 10))) {\n            alert(\"Enter Interger Amount\");\n          } else {\n            this.props.createNewChannel(rand, user, cash).then(() => {\n              toast.success(\"Channel Created with id \" + rand, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: false,\n                pauseOnHover: true,\n                draggable: true\n              });\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"CreateChannel\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.props.users[user][0]), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, user), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, this.props.users[user][1]));\n    }))));\n  }\n\n}\n\nexport default UserList;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/UserList.js"],"names":["React","Link","toast","UserList","Component","state","errors","channelId","onChainState","offChainState","formFlag","sender","action","aliceCash","bobCash","render","Object","keys","props","users","map","user","min","max","rand","Math","floor","random","console","log","cash","prompt","Number","isNaN","parseInt","alert","createNewChannel","then","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport './UserList.css'\n\n\nclass UserList extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        onChainState: false,\n        offChainState: false,\n        formFlag: false,\n        sender: \"\",\n        action: '',\n        aliceCash: '',\n        bobCash: '',\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>User DataBase</h2>\n                <Link to=\"/adduser\">\n                    <button id=\"AddUser\">\n                        <span>Add New User</span>\n                    </button>\n                </Link>\n                <table id='table' className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>&nbsp;</th>\n                            <th>Name</th>\n                            <th>Address</th>\n                            <th>Category</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {Object.keys(this.props.users).map(user => {\n                            return (\n                                <tr key={user}>\n                                    <td>\n                                        <button\n                                            className=\"btn btn-outline-danger\"\n                                            onClick={() => {\n                                                const min = 10000000;\n                                                const max = 100000000;\n                                                const rand = Math.floor(min + Math.random() * (max - min));\n                                                console.log(rand)\n                                                let cash = prompt(\"Please channel money:\", '111');\n                                                if (Number.isNaN(parseInt(cash, 10))) {\n                                                    alert(\"Enter Interger Amount\")\n                                                }\n                                                else {\n                                                    this.props.createNewChannel(rand, user, cash).then(() => {\n                                                        toast.success(\"Channel Created with id \" + rand, {\n                                                            position: \"top-right\",\n                                                            autoClose: 5000,\n                                                            hideProgressBar: false,\n                                                            closeOnClick: false,\n                                                            pauseOnHover: true,\n                                                            draggable: true,\n                                                        });\n                                                    });\n                                                }\n\n                                            }}\n                                        >\n                                            CreateChannel\n                                </button>\n                                    </td>\n                                    <td>{this.props.users[user][0]}</td>\n                                    <td>{user}</td>\n                                    <td>{this.props.users[user][1]}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n\nexport default UserList;\n"]},"metadata":{},"sourceType":"module"}