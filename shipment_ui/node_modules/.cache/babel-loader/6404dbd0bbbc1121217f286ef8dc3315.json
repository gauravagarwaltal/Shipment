{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/redisApi/GetSetData.js\";\nimport React from 'react';\n\nconst axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5000';\n\nconst FetchRequests = async (channelId, address, request_type) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/fetch_states',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      console.log(resp.data);\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst SetRequest = async (channelId, address, request_type, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/set_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst UpdateRequest = async (channelId, address, request_type, index, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('index', index);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/update_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst DeleteRequest = async (channelId, address, request_type, index, request_data) => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('channel_id', channelId);\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('index', index);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/delete_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst PublishData = async () => {\n  var previous_response_length = 0;\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", \"http://127.0.0.1:6379/SUBSCRIBE/hello\", true);\n  xhr.onreadystatechange = checkData;\n  xhr.send(null);\n\n  function checkData() {\n    if (xhr.readyState === 3) {\n      const response = xhr.responseText;\n      const chunk = response.slice(previous_response_length);\n      previous_response_length = response.length;\n      console.log(chunk);\n    }\n  }\n};\n\nfunction ABC() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"dsdcw\", React.createElement(\"button\", {\n    onClick: FetchRequests(2, 3, 4),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }));\n}\n\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest, PublishData, ABC };","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/redisApi/GetSetData.js"],"names":["React","axios","require","RedisHandlerURL","FetchRequests","channelId","address","request_type","bodyFormData","FormData","set","resp","method","url","data","status","console","log","error","SetRequest","request_data","UpdateRequest","index","DeleteRequest","PublishData","previous_response_length","xhr","XMLHttpRequest","open","onreadystatechange","checkData","send","readyState","response","responseText","chunk","slice","length","ABC"],"mappings":"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","sourcesContent":["import React from 'react'\nconst axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5000';\n\nconst FetchRequests = async (channelId, address, request_type) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/fetch_states',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            console.log(resp.data)\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst SetRequest = async (channelId, address, request_type, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/set_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst UpdateRequest = async (channelId, address, request_type, index, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('index', index);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/update_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst DeleteRequest = async (channelId, address, request_type, index, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('index', index);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/delete_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst PublishData = async () => {\n\n\n    var previous_response_length = 0\n    let xhr = new XMLHttpRequest()\n    xhr.open(\"GET\", \"http://127.0.0.1:6379/SUBSCRIBE/hello\", true);\n    xhr.onreadystatechange = checkData;\n    xhr.send(null);\n\n    function checkData() {\n        if (xhr.readyState === 3) {\n            const response = xhr.responseText;\n            const chunk = response.slice(previous_response_length);\n            previous_response_length = response.length;\n            console.log(chunk);\n        }\n    }\n}\n\nfunction ABC() {\n    return (\n        <div>\n            dsdcw\n            <button onClick={FetchRequests(2, 3, 4)}></button>\n        </div>\n    )\n}\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest, PublishData, ABC };"]},"metadata":{},"sourceType":"module"}