{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/ConfirmChannel.js\";\nimport React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails, ChannelConfirm } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails, MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass ConfirmChannel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      onChainState: false,\n      offChainState: false,\n      formFlag: false,\n      sender: \"\",\n      action: '',\n      cash: ''\n    };\n\n    this.onActionChange = async event => this.setState({\n      'action': event.target.value\n    });\n\n    this.actionHandler = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        alert(\"Check MetaMask Connectivity\");\n      }\n\n      this.setState({\n        'errors': false\n      });\n      console.log(\"this.state.action\", this.state.action);\n\n      if (this.state.action === 'select action' || this.state.action === '') {\n        this.setState({\n          'errors': \"Please select action from drop down\"\n        });\n      } else {\n        let url = \"/waitingChannel/\" + this.state.waitingChannelId;\n        console.log(url); // console.log(this.props);\n\n        this.props.history.push(url);\n        this.props.history.push({\n          pathname: '/actionconfirmation',\n          search: '?query=' + this.state.channelId,\n          state: {\n            channelId: this.state.channelId,\n            action: this.state.action\n          }\n        });\n      }\n    };\n\n    this.handleConfirmChannel = async event => {\n      event.preventDefault();\n      this.setState({\n        'errors': false\n      });\n\n      if (Number.isNaN(parseInt(this.state.cash, 10))) {\n        this.setState({\n          'errors': \"Enter Integer amount(in wei unit)\"\n        });\n      } else {\n        ChannelConfirm(this.state.channelId, parseInt(this.state.cash));\n      }\n\n      this.setState({\n        'cash': \"\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender); // let key = this.state.sender + 'active_channel_ids'\n\n        this.setState({\n          'channelId': this.props.location.state.channelId\n        });\n        this.setState({\n          'action': this.props.location.state.action\n        });\n        console.log(this.state.action, this.state.channelId);\n\n        if (this.state.action === 'Confirm') {\n          GetChannelDetails(this.state.channelId).then(onChainState => {\n            this.setState({\n              'onChainState': onChainState\n            });\n            this.setState({\n              'formFlag': true\n            });\n          }).catch(err => {\n            alert(\"on chain state issue\");\n            console.log(err);\n          });\n        } else {\n          alert(\"go back \");\n        }\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Channel Id: \", this.state.channelId), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.onChainState && React.createElement(OnChainStateView, {\n      details: this.state.onChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.formFlag && React.createElement(\"form\", {\n      id: \"form\",\n      className: \"mt-2\",\n      onSubmit: this.handleConfirmChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"cash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Input Cash\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"cash\",\n      type: \"text\",\n      onChange: event => this.setState({\n        cash: event.target.value\n      }),\n      name: \"cash\",\n      className: \"form-control\",\n      value: this.state.cash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), this.state.errors && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.state.errors)), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Confirm Channel\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })))));\n  }\n\n}\n\n;\nexport default ConfirmChannel;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/ConfirmChannel.js"],"names":["React","IsValidSignature","FetchOtherParty","GetChannelDetails","ChannelConfirm","FetchAccount","OnChainStateView","OffChainStateView","FetchOffChainDetails","MakeStringState","GenerateSignatures","SetRequest","STATE_TYPE","ConfirmChannel","Component","state","errors","channelId","onChainState","offChainState","formFlag","sender","action","cash","onActionChange","event","setState","target","value","actionHandler","preventDefault","undefined","alert","console","log","url","waitingChannelId","props","history","push","pathname","search","handleConfirmChannel","Number","isNaN","parseInt","componentDidMount","then","location","catch","err","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails, ChannelConfirm } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails, MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass ConfirmChannel extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        onChainState: false,\n        offChainState: false,\n        formFlag: false,\n        sender: \"\",\n        action: '',\n        cash: '',\n    }\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n                this.setState({ 'sender': sender })\n                console.log(this.state.sender)\n                // let key = this.state.sender + 'active_channel_ids'\n                this.setState({ 'channelId': this.props.location.state.channelId })\n                this.setState({ 'action': this.props.location.state.action })\n                console.log(this.state.action, this.state.channelId)\n                if (this.state.action === 'Confirm') {\n                    GetChannelDetails(this.state.channelId).then(onChainState => {\n                        this.setState({ 'onChainState': onChainState })\n                        this.setState({ 'formFlag': true })\n                    }).catch(err => {\n                        alert(\"on chain state issue\")\n                        console.log(err)\n                    })\n                }\n                else {\n                    alert(\"go back \")\n                }\n            }\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    onActionChange = async (event) => this.setState({ 'action': event.target.value });\n\n    actionHandler = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            alert(\"Check MetaMask Connectivity\")\n        }\n        this.setState({ 'errors': false });\n        console.log(\"this.state.action\", this.state.action)\n        if (this.state.action === 'select action' || this.state.action === '') {\n            this.setState({ 'errors': \"Please select action from drop down\" })\n        }\n        else {\n            let url = \"/waitingChannel/\" + this.state.waitingChannelId\n            console.log(url)\n            // console.log(this.props);\n            this.props.history.push(url);\n            this.props.history.push({\n                pathname: '/actionconfirmation',\n                search: '?query=' + this.state.channelId,\n                state: {\n                    channelId: this.state.channelId,\n                    action: this.state.action\n                }\n            })\n        }\n    }\n\n    handleConfirmChannel = async (event) => {\n        event.preventDefault();\n        this.setState({ 'errors': false })\n        if (Number.isNaN(parseInt(this.state.cash, 10))) {\n            this.setState({ 'errors': \"Enter Integer amount(in wei unit)\" })\n        }\n        else {\n            ChannelConfirm(this.state.channelId, parseInt(this.state.cash))\n        }\n        this.setState({ 'cash': \"\" })\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Channel Id: {this.state.channelId}</h2>\n                <div>\n                    <div>\n                        {this.state.onChainState && <OnChainStateView details={this.state.onChainState} />}\n                    </div>\n                    <div>\n                        {this.state.formFlag &&\n                            <form id=\"form\" className=\"mt-2\" onSubmit={this.handleConfirmChannel}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"cash\">Input Cash</label>\n                                    <div className=\"field\">\n                                        <input\n                                            id=\"cash\"\n                                            type=\"text\"\n                                            onChange={event => this.setState({ cash: event.target.value })}\n                                            name=\"cash\"\n                                            className=\"form-control\"\n                                            value={this.state.cash}\n                                        />\n                                    </div>\n                                    {this.state.errors && <div className=\"alert alert-danger\">{this.state.errors}</div>}\n                                </div>\n                                <input type=\"submit\" value=\"Confirm Channel\" className=\"btn btn-primary\" />\n                            </form>}\n                    </div>\n                </div>\n\n            </>\n        );\n    }\n};\n\nexport default ConfirmChannel;\n"]},"metadata":{},"sourceType":"module"}