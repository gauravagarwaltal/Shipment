{"ast":null,"code":"var redis = require('redis');\n\nvar url = require('url');\n\nvar rc; // redis config\n\nif (process.env.REDISCLOUD_URL) {\n  var redisURL = url.parse(process.env.REDISCLOUD_URL);\n  rc = {\n    port: redisURL.port,\n    host: redisURL.hostname,\n    auth: redisURL.auth.split(\":\")[1]\n  };\n} else {\n  rc = {\n    port: 6379,\n    host: '127.0.0.1' // auth: '' no auth on localhost see: https://git.io/vH3TN\n\n  };\n}\n\nvar CON = {}; // store redis connections as Object\n\nfunction new_connection() {\n  var redis_con = redis.createClient(rc.port, rc.host);\n\n  if (process.env.REDISCLOUD_URL && rc.auth) {\n    // only auth on CI/Stage/Prod \n    redis_con.auth(rc.auth); // see: https://git.io/vH3TN\n  }\n\n  return redis_con;\n}\n\nfunction redis_connection(type) {\n  type = type || 'DEFAULT'; // allow infinite types of connections\n\n  if (!CON[type] || !CON[type].connected) {\n    CON[type] = new_connection();\n  }\n\n  return CON[type];\n}\n\nmodule.exports = redis_connection;\n\nmodule.exports.kill = function (type) {\n  type = type || 'DEFAULT'; // kill specific connection or default one\n\n  CON[type].end(true);\n  delete CON[type];\n};\n\nmodule.exports.killall = function () {\n  var keys = Object.keys(CON);\n  keys.forEach(function (k) {\n    CON[k].end(true);\n    delete CON[k];\n  });\n};\n/**\n * In the event of a failed connection we don't want our Node.js App to \"Die\"!\n * rather we want to report that the connection failed but then keep running...\n * see: github.com/dwyl/redis-connection/issues/38\n * @param {Object} err - the error Object thrown by Redis (standard node error)\n * @returns {Object} err - unmodified error\n */\n\n\nvar reported; // bit \n\nfunction report_error(err) {\n  if (!reported && err.syscall === 'connect' && err.code === 'ECONNREFUSED') {\n    reported = true; // only report the error once.\n\n    console.log('- - - - - - - - Redis Connection Error: - - - - - - - - ');\n    console.error(err);\n    console.log('- - - - - - - - - - - - - - - - - - - - - - - - - - - - ');\n  }\n\n  return err;\n}\n\nprocess.on('uncaughtException', report_error);\nmodule.exports.report_error = report_error;","map":null,"metadata":{},"sourceType":"script"}