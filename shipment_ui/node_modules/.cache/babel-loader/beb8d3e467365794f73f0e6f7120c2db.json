{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/FinalizeChannel.js\";\nimport React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { IsValidSignature, FetchOtherParty } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails, MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass FinalizeChannel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      onChainState: false,\n      offChainState: false,\n      formFlag: false,\n      sender: \"\",\n      action: '',\n      aliceCash: '',\n      bobCash: ''\n    };\n\n    this.handleFinalizeChannel = async event => {\n      event.preventDefault();\n      this.setState({\n        'errors': false\n      });\n\n      if (Number.isNaN(parseInt(this.state.aliceCash, 10))) {\n        this.setState({\n          'errors': \"Enter Integer amount(in wei unit)\"\n        });\n      } else if (Number.isNaN(parseInt(this.state.bobCash, 10))) {\n        this.setState({\n          'errors': \"Enter Integer amount(in wei unit)\"\n        });\n      } else {\n        let total_money = parseInt(this.state.offChainState['Alice Cash']) + parseInt(this.state.offChainState['Bob Cash']);\n\n        if (total_money === parseInt(this.state.aliceCash) + parseInt(this.state.bobCash)) {\n          let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash)); // console.log(sig)\n          // let sender = await FetchAccount()\n\n          await IsValidSignature(this.state.sender, this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash), sig); // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n\n          let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender);\n          let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig);\n          let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState);\n          console.log(\"hello \", response);\n        } else {\n          this.setState({\n            'errors': \"total money is not equals to channel locked money\"\n          });\n        }\n      }\n\n      this.setState({\n        'aliceCash': \"\"\n      });\n      this.setState({\n        'bobCash': \"\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender);\n        this.setState({\n          'channelId': this.props.location.state.channelId\n        });\n        this.setState({\n          'action': this.props.location.state.action\n        });\n        console.log(this.state.action, this.state.channelId);\n\n        if (this.state.action === 'Finalize') {\n          let offChainState = FetchOffChainDetails(this.state.sender, this.state.channelId);\n          this.setState({\n            'offChainState': offChainState\n          });\n          this.setState({\n            'formFlag': true\n          });\n        } else {\n          alert(\"go back \");\n        }\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Channel Id: \", this.state.channelId), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.onChainState && React.createElement(OnChainStateView, {\n      details: this.state.onChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.offChainState && React.createElement(OffChainStateView, {\n      details: this.state.offChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.state.formFlag && React.createElement(\"form\", {\n      id: \"form\",\n      className: \"mt-2\",\n      onSubmit: this.handleFinalizeChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.state.errors && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.errors), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Finalize Channel\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })))));\n  }\n\n}\n\n;\nexport default FinalizeChannel;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/FinalizeChannel.js"],"names":["React","IsValidSignature","FetchOtherParty","FetchAccount","OnChainStateView","OffChainStateView","FetchOffChainDetails","MakeStringState","GenerateSignatures","SetRequest","STATE_TYPE","FinalizeChannel","Component","state","errors","channelId","onChainState","offChainState","formFlag","sender","action","aliceCash","bobCash","handleFinalizeChannel","event","preventDefault","setState","Number","isNaN","parseInt","total_money","sig","TheOtherParty","stringifyState","response","Request","console","log","componentDidMount","then","props","location","alert","catch","err","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { IsValidSignature, FetchOtherParty } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails, MakeStringState } from \"../LocalStorage/local_storage_api\";\nimport GenerateSignatures from \"../contract/CreateSignature\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass FinalizeChannel extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        onChainState: false,\n        offChainState: false,\n        formFlag: false,\n        sender: \"\",\n        action: '',\n        aliceCash: '',\n        bobCash: '',\n    }\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n                this.setState({ 'sender': sender })\n                console.log(this.state.sender)\n                this.setState({ 'channelId': this.props.location.state.channelId })\n                this.setState({ 'action': this.props.location.state.action })\n                console.log(this.state.action, this.state.channelId)\n                if (this.state.action === 'Finalize') {\n                    let offChainState = FetchOffChainDetails(this.state.sender, this.state.channelId)\n                    this.setState({ 'offChainState': offChainState })\n                    this.setState({ 'formFlag': true })\n                }\n                else {\n                    alert(\"go back \")\n                }\n            }\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    handleFinalizeChannel = async (event) => {\n        event.preventDefault();\n        this.setState({ 'errors': false })\n        if (Number.isNaN(parseInt(this.state.aliceCash, 10))) {\n            this.setState({ 'errors': \"Enter Integer amount(in wei unit)\" })\n        }\n        else if (Number.isNaN(parseInt(this.state.bobCash, 10))) {\n            this.setState({ 'errors': \"Enter Integer amount(in wei unit)\" })\n        }\n        else {\n            let total_money = parseInt(this.state.offChainState['Alice Cash']) + parseInt(this.state.offChainState['Bob Cash'])\n            if (total_money === (parseInt(this.state.aliceCash) + parseInt(this.state.bobCash))) {\n                let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash))\n                // console.log(sig)\n                // let sender = await FetchAccount()\n                await IsValidSignature(this.state.sender, this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash), sig)\n\n                // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n                let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender)\n                let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig)\n                let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState)\n                console.log(\"hello \", response)\n\n            }\n            else {\n                this.setState({ 'errors': \"total money is not equals to channel locked money\" })\n            }\n\n        }\n        this.setState({ 'aliceCash': \"\" })\n        this.setState({ 'bobCash': \"\" })\n\n\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Channel Id: {this.state.channelId}</h2>\n                <div>\n                    <div>\n                        {this.state.onChainState && <OnChainStateView details={this.state.onChainState} />}\n                    </div>\n                    <div>\n                        {this.state.offChainState && <OffChainStateView details={this.state.offChainState} />}\n                    </div>\n                    <div>\n                        {this.state.formFlag &&\n                            <form id=\"form\" className=\"mt-2\" onSubmit={this.handleFinalizeChannel}>\n\n                                {this.state.errors && <div className=\"alert alert-danger\">{this.state.errors}</div>}\n                                <input type=\"submit\" value=\"Finalize Channel\" className=\"btn btn-primary\" />\n                            </form>}\n                    </div>\n                </div>\n\n            </>\n        );\n    }\n};\n\nexport default FinalizeChannel;\n"]},"metadata":{},"sourceType":"module"}