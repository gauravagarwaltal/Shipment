{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/DashBoard.js\";\nimport React from \"react\";\nimport { toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"../contract/MetaMaskFetch\";\nimport FetchContractTxn from \"../contract/FetchContractTxns\";\n\nclass DashBoardView extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeChannelIdError: false,\n      activeChannelId: \"\",\n      waitingChannelIdError: false,\n      waitingChannelId: '',\n      details: \"\",\n      value: \"\",\n      operation: \"\",\n      sender: \"\",\n      channels: []\n    };\n\n    this.activeChannelIdHandler = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        this.props.history.push({\n          pathname: '/metamaskIssue'\n        });\n        toast.error(\"check metamask connectivity\");\n      }\n\n      this.setState({\n        'activeChannelIdError': false\n      });\n\n      if (this.state.activeChannelId != parseInt(this.state.activeChannelId, 10)) {\n        this.setState({\n          'activeChannelIdError': \"Enter Interger channel Id\"\n        });\n      } else {\n        let url = \"/activeChannel/\" + this.state.activeChannelId;\n        console.log(url); // console.log(this.props);\n\n        this.props.history.push(url);\n      }\n    };\n\n    this.waitingChannelIdHandler = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        this.props.history.push({\n          pathname: '/metamaskIssue'\n        });\n        toast.error(\"check metamask connectivity\");\n      }\n\n      this.setState({\n        'waitingChannelIdError': false\n      });\n\n      if (Number.isNaN(parseInt(this.state.waitingChannelId, 10))) {\n        this.setState({\n          'waitingChannelIdError': \"Enter Interger channel Id\"\n        });\n      } else {\n        let url = \"/waitingChannel/\" + this.state.waitingChannelId;\n        console.log(url); // console.log(this.props);\n\n        this.props.history.push(url);\n      }\n    };\n\n    this.onActiveChannelIdChange = async event => this.setState({\n      'activeChannelId': event.target.value\n    });\n\n    this.onWaitingChannelIdChange = async event => this.setState({\n      'waitingChannelId': event.target.value\n    });\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender);\n      }\n    }).catch(err => {\n      this.props.history.push({\n        pathname: '/metamaskIssue'\n      });\n      toast.error(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"DashBoard\"), React.createElement(FetchContractTxn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Active Channel Ids\"), React.createElement(\"form\", {\n      id: \"form\",\n      onSubmit: this.activeChannelIdHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(ChannelList, {\n      storage_key: this.state.sender + 'active_channel_ids',\n      onChange: this.onActiveChannelIdChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), this.state.activeChannelIdError && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.state.activeChannelIdError), React.createElement(\"button\", {\n      id: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"check Active Channel Status\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Waiting Channel Ids\"), React.createElement(\"form\", {\n      id: \"form\",\n      onSubmit: this.waitingChannelIdHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(ChannelList, {\n      storage_key: this.state.sender + 'waiting_channel_ids',\n      onChange: this.onWaitingChannelIdChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), this.state.waitingChannelIdError && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.waitingChannelIdError), React.createElement(\"button\", {\n      id: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"check Waiting Channel Status\")))));\n  }\n\n}\n\n;\nexport default DashBoardView;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/DashBoard.js"],"names":["React","toast","ChannelList","FetchAccount","FetchContractTxn","DashBoardView","Component","state","activeChannelIdError","activeChannelId","waitingChannelIdError","waitingChannelId","details","value","operation","sender","channels","activeChannelIdHandler","event","preventDefault","undefined","props","history","push","pathname","error","setState","parseInt","url","console","log","waitingChannelIdHandler","Number","isNaN","onActiveChannelIdChange","target","onWaitingChannelIdChange","componentDidMount","then","catch","err","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"../contract/MetaMaskFetch\";\nimport FetchContractTxn from \"../contract/FetchContractTxns\";\n\nclass DashBoardView extends React.Component {\n\n    state = {\n        activeChannelIdError: false,\n        activeChannelId: \"\",\n        waitingChannelIdError: false,\n        waitingChannelId: '',\n        details: \"\",\n        value: \"\",\n        operation: \"\",\n        sender: \"\",\n        channels: [],\n\n    }\n\n    componentDidMount() {\n        FetchAccount()\n            .then(sender => {\n                if (sender) {\n                    this.setState({ 'sender': sender })\n                    console.log(this.state.sender)\n                }\n\n            })\n            .catch(err => {\n                this.props.history.push({\n                    pathname: '/metamaskIssue',\n                })\n                toast.error(\"check metamask connectivity\")\n                console.log(err)\n            })\n    }\n\n    activeChannelIdHandler = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            this.props.history.push({\n                pathname: '/metamaskIssue',\n            })\n            toast.error(\"check metamask connectivity\")\n        }\n        this.setState({ 'activeChannelIdError': false });\n        if (this.state.activeChannelId != parseInt(this.state.activeChannelId, 10)) {\n            this.setState({ 'activeChannelIdError': \"Enter Interger channel Id\" })\n        }\n        else {\n            let url = \"/activeChannel/\" + this.state.activeChannelId\n            console.log(url)\n            // console.log(this.props);\n            this.props.history.push(url);\n\n        }\n    }\n\n    waitingChannelIdHandler = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            this.props.history.push({\n                pathname: '/metamaskIssue',\n            })\n            toast.error(\"check metamask connectivity\")\n        }\n        this.setState({ 'waitingChannelIdError': false });\n        if (Number.isNaN(parseInt(this.state.waitingChannelId, 10))) {\n            this.setState({ 'waitingChannelIdError': \"Enter Interger channel Id\" })\n        }\n        else {\n            let url = \"/waitingChannel/\" + this.state.waitingChannelId\n            console.log(url)\n            // console.log(this.props);\n            this.props.history.push(url);\n        }\n    }\n\n    onActiveChannelIdChange = async (event) => this.setState({ 'activeChannelId': event.target.value });\n\n    onWaitingChannelIdChange = async (event) => this.setState({ 'waitingChannelId': event.target.value });\n\n    render() {\n        return (\n            <>\n                <h2>DashBoard</h2>\n                <FetchContractTxn />\n                <div>\n                    <div>\n                        <h3>Active Channel Ids</h3>\n                        <form id=\"form\" onSubmit={this.activeChannelIdHandler}>\n                            <ChannelList storage_key={this.state.sender + 'active_channel_ids'} onChange={this.onActiveChannelIdChange} />\n                            {this.state.activeChannelIdError && <div className=\"alert alert-danger\">{this.state.activeChannelIdError}</div>}\n                            <button id=\"button\">check Active Channel Status</button>\n                        </form>\n                    </div>\n                    <div>\n                        <h3>Waiting Channel Ids</h3>\n                        <form id=\"form\" onSubmit={this.waitingChannelIdHandler}>\n                            <ChannelList storage_key={this.state.sender + 'waiting_channel_ids'} onChange={this.onWaitingChannelIdChange} />\n                            {this.state.waitingChannelIdError && <div className=\"alert alert-danger\">{this.state.waitingChannelIdError}</div>}\n                            <button id=\"button\">check Waiting Channel Status</button>\n                        </form>\n                    </div>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default DashBoardView;\n"]},"metadata":{},"sourceType":"module"}