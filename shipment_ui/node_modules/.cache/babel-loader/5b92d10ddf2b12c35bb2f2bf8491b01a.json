{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/CreateTransaction.js\";\nimport React, { useState } from \"react\"; // import courseStore from \"../stores/courseStore\";\n// import { toast } from \"react-toastify\";\n// import * as courseActions from \"../actions/courseActions\";\n\nimport { GetChannelDetails } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\n\nclass CreateTransaction extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: '',\n      channelId: '',\n      details: '',\n      lastState: React.useState(localStorage.getItem(this.props.channelId + 'lastState') || {\n        channelId: \"\",\n        count: \"\",\n        AliceCash: \"\",\n        BobCash: \"\",\n        Signature: \"\"\n      })\n    };\n\n    this.onChange = async event => this.setState({\n      'lastState': event.target.value\n    });\n\n    this.handleConfirmChannel = async event => {\n      event.preventDefault();\n      this.setState({\n        'channelIdError': \"\"\n      });\n      this.setState({\n        'amountError': \"\"\n      });\n\n      if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n        this.setState({\n          'channelIdError': \"Enter Interger channel Id\"\n        });\n      } else if (Number.isNaN(parseInt(this.state.amount, 10))) {\n        this.setState({\n          'amountError': \"Enter Integer amount(in wei unit)\"\n        });\n      } else {// ChannelConfirm(this.state.channelId, this.state.amount)\n      }\n\n      this.setState({\n        'channelId': \"\"\n      });\n      this.setState({\n        'amount': \"\"\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Channel Details\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Hello React with Local Storage!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.state.lastState)), React.createElement(\"form\", {\n      onSubmit: this.handleConfirmChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"channelId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Channel Id\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"channelId\",\n      type: \"text\" // onChange={event => onChange({ channelId: event.target.value })}\n      ,\n      name: \"channelId\",\n      className: \"form-control\",\n      value: this.state.channelId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"amount\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Amount\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"amount\",\n      type: \"text\",\n      onChange: this.onChange,\n      name: \"amount\",\n      className: \"form-control\",\n      value: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }))), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Deposit Amount\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))));\n  }\n\n}\n\n;\nexport default CreateTransaction;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/CreateTransaction.js"],"names":["React","useState","GetChannelDetails","ManageDetailsView","CreateTransaction","Component","state","errors","channelId","details","lastState","localStorage","getItem","props","count","AliceCash","BobCash","Signature","onChange","event","setState","target","value","handleConfirmChannel","preventDefault","Number","isNaN","parseInt","amount","render"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n// import courseStore from \"../stores/courseStore\";\n// import { toast } from \"react-toastify\";\n// import * as courseActions from \"../actions/courseActions\";\nimport { GetChannelDetails } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\n\nclass CreateTransaction extends React.Component {\n    state = {\n        errors: '',\n        channelId: '',\n        details: '',\n        lastState: React.useState(localStorage.getItem(this.props.channelId + 'lastState') || {\n            channelId: \"\",\n            count: \"\",\n            AliceCash: \"\",\n            BobCash: \"\",\n            Signature: \"\"\n        })\n    }\n\n    // const [course, setCourse] = useState({\n    //     channelId: \"\",\n    //     count: \"\",\n    //     AliceCash: \"\",\n    //     BobCash: \"\",\n    //     Signature: \"\"\n    // });\n    // localStorage.setItem(props.channelId + 'lastState', lastState);\n\n    onChange = async (event) => this.setState({ 'lastState': event.target.value });\n\n    handleConfirmChannel = async (event) => {\n        event.preventDefault();\n        this.setState({ 'channelIdError': \"\" })\n        this.setState({ 'amountError': \"\" })\n        if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n            this.setState({ 'channelIdError': \"Enter Interger channel Id\" })\n        }\n        else if (Number.isNaN(parseInt(this.state.amount, 10))) {\n            this.setState({ 'amountError': \"Enter Integer amount(in wei unit)\" })\n        }\n        else {\n            // ChannelConfirm(this.state.channelId, this.state.amount)\n        }\n        this.setState({ 'channelId': \"\" })\n        this.setState({ 'amount': \"\" })\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Channel Details</h2>\n                <div>\n                    <div>\n                        <h1>Hello React with Local Storage!</h1>\n                        <p>{this.state.lastState}</p>\n                    </div>\n                    <form onSubmit={this.handleConfirmChannel}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"channelId\">Channel Id</label>\n                            <div className=\"field\">\n                                <input\n                                    id=\"channelId\"\n                                    type=\"text\"\n                                    // onChange={event => onChange({ channelId: event.target.value })}\n                                    name=\"channelId\"\n                                    className=\"form-control\"\n                                    value={this.state.channelId}\n                                />\n                            </div>\n                            {/* {this.state.channelIdError && <div className=\"alert alert-danger\">{this.state.channelIdError}</div>} */}\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"amount\">Amount</label>\n                            <div className=\"field\">\n                                <input\n                                    id=\"amount\"\n                                    type=\"text\"\n                                    onChange={this.onChange}\n                                    name=\"amount\"\n                                    className=\"form-control\"\n                                    value={this.state.errors}\n                                />\n                            </div>\n                            {/* {this.state.amountError && <div className=\"alert alert-danger\">{this.state.amountError}</div>} */}\n                        </div>\n                        <input type=\"submit\" value=\"Deposit Amount\" className=\"btn btn-primary\" />\n                    </form>\n\n\n\n                    {/* <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"channelId\">Channel Id</label>\n                    <input id=\"channelId\"\n                        className=\"form-control\"\n                        type=\"text\"\n                        placeholder=\"channel id(integer value)\" value={channelId}\n                        onChange={event => setChannelId(event.target.value)} required />\n                    <button>Get Channel Details</button>\n                </form>\n                {errors && (\n                    <div className=\"alert alert-danger\">{errors}</div>\n                )}\n                {(errors === '') && (\n                    <div className=\"alert alert-danger\">\n                        <h2>Channel Details of channel id -> {channelId}</h2>\n                        <ManageDetailsView details={details} />\n                    </div>\n                )} */}\n                </div>\n            </div >\n        );\n    }\n};\n\nexport default CreateTransaction;\n"]},"metadata":{},"sourceType":"module"}