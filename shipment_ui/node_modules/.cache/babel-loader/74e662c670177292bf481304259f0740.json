{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/CloseChannel.js\";\nimport React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails, ChannelClose } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails } from \"../LocalStorage/local_storage_api\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass CloseChannel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: false,\n      channelId: \"\",\n      onChainState: false,\n      offChainState: false,\n      sender: \"\",\n      action: '',\n      aliceCash: '',\n      bobCash: ''\n    };\n\n    this.onActionChange = async event => this.setState({\n      'action': event.target.value\n    });\n\n    this.handleCloseChannel = async event => {\n      event.preventDefault();\n      this.setState({\n        'errors': false\n      });\n\n      if (!this.state.offChainState || this.state.offChainState === 'No off chain state Found') {\n        alert(\"Close Channel needs Off Chain State\", this.state.offChainState);\n      } else {\n        // alert(this.state.offChainState)\n        console.log(this.state.channelId, parseInt(this.state.offChainState['count']), parseInt(this.state.offChainState['Alice Cash']), parseInt(this.state.offChainState['Bob Cash']), this.state.offChainState['sig']); // let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash))\n        // // console.log(sig)\n        // // let sender = await FetchAccount()\n\n        let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender);\n        let sig_check = await IsValidSignature(TheOtherParty, this.state.channelId, parseInt(this.state.offChainState['count']), parseInt(this.state.offChainState['Alice Cash']), parseInt(this.state.offChainState['Bob Cash']), this.state.offChainState['sig']);\n\n        if (sig_check) {\n          console.log(this.state.offChainState['sig']); // const ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n\n          let response = await ChannelClose(this.state.channelId, parseInt(this.state.offChainState['count']), parseInt(this.state.offChainState['Alice Cash']), parseInt(this.state.offChainState['Bob Cash']), this.state.offChainState['sig']);\n        } // // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n        // let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender)\n        // let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig)\n        // let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState)\n        // console.log(\"hello \", response)\n\n      }\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender); // let key = this.state.sender + 'active_channel_ids'\n\n        this.setState({\n          'channelId': this.props.location.state.channelId\n        });\n        this.setState({\n          'action': this.props.location.state.action\n        });\n        console.log(this.state.action, this.state.channelId);\n\n        if (this.state.action === 'Close') {\n          GetChannelDetails(this.state.channelId).then(onChainState => {\n            this.setState({\n              'onChainState': onChainState\n            });\n          }).catch(err => {\n            alert(\"on chain state issue\");\n            console.log(err);\n          });\n          let offChainState = FetchOffChainDetails(this.state.sender, this.state.channelId);\n          this.setState({\n            'offChainState': offChainState\n          });\n        } else {\n          alert(\"go back \");\n        }\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Channel Id: \", this.state.channelId), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.onChainState && React.createElement(OnChainStateView, {\n      details: this.state.onChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.state.offChainState && React.createElement(OffChainStateView, {\n      details: this.state.offChainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleCloseChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Close Channel\"))));\n  }\n\n}\n\n;\nexport default CloseChannel;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/CloseChannel.js"],"names":["React","IsValidSignature","FetchOtherParty","GetChannelDetails","ChannelClose","FetchAccount","OnChainStateView","OffChainStateView","FetchOffChainDetails","SetRequest","STATE_TYPE","CloseChannel","Component","state","errors","channelId","onChainState","offChainState","sender","action","aliceCash","bobCash","onActionChange","event","setState","target","value","handleCloseChannel","preventDefault","alert","console","log","parseInt","TheOtherParty","sig_check","response","componentDidMount","then","props","location","catch","err","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { IsValidSignature, FetchOtherParty, GetChannelDetails, ChannelClose } from \"../contract/contract_transaction\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport OnChainStateView from \"./OnChainStateView\";\nimport OffChainStateView from \"./OffChainState\";\nimport { FetchOffChainDetails } from \"../LocalStorage/local_storage_api\";\nimport { SetRequest } from \"../redisApi/GetSetData\";\nimport STATE_TYPE from \"../RequestType\";\n\nclass CloseChannel extends React.Component {\n    state = {\n        errors: false,\n        channelId: \"\",\n        onChainState: false,\n        offChainState: false,\n        sender: \"\",\n        action: '',\n        aliceCash: '',\n        bobCash: '',\n    }\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n                this.setState({ 'sender': sender })\n                console.log(this.state.sender)\n                // let key = this.state.sender + 'active_channel_ids'\n                this.setState({ 'channelId': this.props.location.state.channelId })\n                this.setState({ 'action': this.props.location.state.action })\n                console.log(this.state.action, this.state.channelId)\n                if (this.state.action === 'Close') {\n                    GetChannelDetails(this.state.channelId).then(onChainState => {\n                        this.setState({ 'onChainState': onChainState })\n                    }).catch(err => {\n                        alert(\"on chain state issue\")\n                        console.log(err)\n                    })\n                    let offChainState = FetchOffChainDetails(this.state.sender, this.state.channelId)\n                    this.setState({ 'offChainState': offChainState })\n                }\n                else {\n                    alert(\"go back \")\n                }\n            }\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    onActionChange = async (event) => this.setState({ 'action': event.target.value });\n\n    handleCloseChannel = async (event) => {\n        event.preventDefault();\n        this.setState({ 'errors': false })\n        if (!this.state.offChainState || this.state.offChainState === 'No off chain state Found') {\n            alert(\"Close Channel needs Off Chain State\", this.state.offChainState)\n        }\n        else {\n            // alert(this.state.offChainState)\n            console.log(this.state.channelId, parseInt(this.state.offChainState['count']), parseInt(this.state.offChainState['Alice Cash']), parseInt(this.state.offChainState['Bob Cash']),\n                this.state.offChainState['sig'])\n            // let sig = await GenerateSignatures(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, parseInt(this.state.aliceCash), parseInt(this.state.bobCash))\n            // // console.log(sig)\n            // // let sender = await FetchAccount()\n            let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender)\n            let sig_check = await IsValidSignature(TheOtherParty, this.state.channelId, parseInt(this.state.offChainState['count']), parseInt(this.state.offChainState['Alice Cash']),\n                parseInt(this.state.offChainState['Bob Cash']), this.state.offChainState['sig'])\n            if (sig_check) {\n                console.log(this.state.offChainState['sig'])\n                // const ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n                let response = await ChannelClose(this.state.channelId, parseInt(this.state.offChainState['count']), parseInt(this.state.offChainState['Alice Cash']),\n                    parseInt(this.state.offChainState['Bob Cash']), this.state.offChainState['sig'])\n            }\n            // // localStorage.setItem(sender + this.state.channelId + 'lastState', JSON.stringify(this.state.lastState));\n            // let TheOtherParty = await FetchOtherParty(this.state.channelId, this.state.sender)\n            // let stringifyState = MakeStringState(this.state.channelId, parseInt(this.state.offChainState['count']) + 1, this.state.aliceCash, this.state.bobCash, sig)\n            // let response = await SetRequest(TheOtherParty, STATE_TYPE.Request, stringifyState)\n            // console.log(\"hello \", response)\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Channel Id: {this.state.channelId}</h2>\n                <div>\n                    <div>\n                        {this.state.onChainState && <OnChainStateView details={this.state.onChainState} />}\n                    </div>\n                    <div>\n                        {this.state.offChainState && <OffChainStateView details={this.state.offChainState} />}\n                    </div>\n                    <div>\n                        <button onClick={this.handleCloseChannel}>Close Channel</button>\n                    </div>\n                </div>\n\n            </>\n        );\n    }\n};\n\nexport default CloseChannel;\n"]},"metadata":{},"sourceType":"module"}