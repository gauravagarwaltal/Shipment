{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/redisApi/RedisFunctionalTesting.js\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { FetchAccount } from \"../components/MetaMaskFetch\";\nimport '../components/Form.css';\nimport STATE_TYPE from \"../RequestType\";\nimport { FetchRequests, DeleteRequest } from \"./GetSetData\";\nimport { FetchOtherParty, IsValidSignature } from \"../contract/contract_transaction\"; // import { toast } from \"react-toastify\";\n\nconst axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5002';\nconst activeStyle = {\n  color: \"grey\"\n}; // function ShowState(props) {\n//     return (\n//         <table id=\"table\" className=\"table\">\n//             <thead>\n//                 <tr>\n//                     <th>Type</th>\n//                     <th>value</th>\n//                 </tr>\n//             </thead>\n//             <tbody>\n//                 <tr key=\"Channel Id\">\n//                     <td><span>Channel Id</span></td>\n//                     <td><span>{props.state[0]}</span></td>\n//                 </tr>\n//                 <tr key=\"Transaction Count\">\n//                     <td ><span>Transaction Count</span></td>\n//                     <td><span>{props.state[1]}</span></td>\n//                 </tr>\n//                 <tr key=\"Alice Cash\">\n//                     <td ><span>Alice Cash</span></td>\n//                     <td><span>{props.state[2]}</span></td>\n//                 </tr>\n//                 <tr key=\"Bob Cash\">\n//                     <td ><span>Bob Cash</span></td>\n//                     <td><span>{props.state[3]}</span></td>\n//                 </tr>\n//             </tbody>\n//         </table>\n//     )\n// }\n\nasync function onDeleteClick(index) {\n  const sender = await FetchAccount();\n  let response = await DeleteRequest(sender, STATE_TYPE.Response, index);\n  console.log(response);\n}\n\nasync function onAcceptClick(request, index) {\n  // console.log(request)\n  // TODO: split content here and set value to storage and also send back status to other the party\n  let state = JSON.parse(request);\n  let channel_id = Number.parseInt(state[0]);\n  let count = Number.parseInt(state[1]);\n  let Alice_Cash = Number.parseInt(state[2]);\n  let Bob_Cash = Number.parseInt(state[3]);\n  let signature = state[4];\n  console.log(channel_id, count, Alice_Cash, Bob_Cash, signature); // let ReqObject = JSON.parse(request)\n  // console.log(ReqObject.channel_id, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n\n  const sender = await FetchAccount();\n  const TheOtherParty = await FetchOtherParty(channel_id, sender);\n  console.log(TheOtherParty);\n  let checkSig = await IsValidSignature(TheOtherParty, count, Alice_Cash, Bob_Cash, signature);\n\n  if (checkSig === true) {\n    // signature = await GenerateSignatures(count, Alice_Cash, Bob_Cash)\n    // localStorage.setItem(channel_id + 'lastState', JSON.stringify(request));\n    // let lastState = [\n    //     channel_id, count, Alice_Cash, Bob_Cash, signature\n    // ]\n    // let response = await SetRequest(TheOtherParty, STATE_TYPE.Response, JSON.stringify(lastState))\n    // console.log(\"hello \", response)\n    alert(\"valid signature\");\n  } else {\n    alert(\"invalid signature\");\n  } // localStorage.setItem(channel_id + 'lastState', JSON.stringify(request));\n  // const flag = await IsValidSignature(sender, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n  // console.log(flag)\n  // let result = await GenerateSignatures(ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash)\n  // console.log(result)\n  // ReqObject.signature = result.alice\n  // Socket.emit('publishToChannel', 'newChannel', JSON.stringify(ReqObject));\n  // console.log(\"all Done\")\n\n}\n\nclass RedisFunctionalTesting extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: '',\n      channelId: '',\n      reqType: '',\n      requestData: '',\n      pendingResponse: JSON.parse(localStorage.getItem(\"PendingResponse\") || \"[]\")\n    };\n\n    this.onChange = async event => this.setState({\n      'lastState': event.target.value\n    });\n\n    this.handleConfirmChannel = async event => {\n      event.preventDefault();\n      this.setState({\n        'errors': \"\"\n      });\n\n      if (Number.isNaN(parseInt(this.state.reqType, 10))) {\n        this.setState({\n          'errors': \"Enter Integer amount(in wei unit)\"\n        });\n      } else {\n        let sender = await FetchAccount();\n        var bodyFormData = new FormData();\n        bodyFormData.set('channel_id', this.state.channelId);\n        bodyFormData.set('address', sender);\n        bodyFormData.set('request_type', this.state.reqType);\n        bodyFormData.set('request_data', this.state.requestData);\n        const resp = await axios({\n          method: 'post',\n          url: RedisHandlerURL + '/publish',\n          // url: RedisHandlerURL + '/subscribe',\n          // url: RedisHandlerURL + '/unsubscribe',\n          data: bodyFormData\n        });\n\n        if (resp.status === 200) {\n          console.log(resp.data);\n        } // console.log(await GenerateSignatures(this.state.lastState[1], this.state.reqType, this.state.requestData))\n        // ChannelConfirm(this.state.channelId, this.state.amount)\n\n      } // this.setState({ 'reqType': \"\" })\n      // this.setState({ 'requestData': \"\" })\n\n    };\n\n    this.handlePendingState = async event => {\n      event.preventDefault();\n      let sender = await FetchAccount();\n      let response = await FetchRequests(sender, STATE_TYPE.Response);\n      console.log(response);\n      localStorage.setItem('PendingResponse', JSON.stringify(response));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"New State Response\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Hello React with Local Storage!\"), React.createElement(\"form\", {\n      id: \"form\",\n      onSubmit: this.handlePendingState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Refresh Pending Response\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })), console.log(this.state.pendingResponse), React.createElement(\"table\", {\n      id: \"table\",\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Decline State\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Accept State\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"State Details\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, Object.keys(this.state.pendingResponse).map(request => {\n      return React.createElement(\"tr\", {\n        key: request,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => onDeleteClick(request),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Delete Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => onAcceptClick(this.state.pendingResponse[request], request),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Accept Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, this.state.pendingResponse[request])));\n    })))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"RedisFunctionalTesting\")), React.createElement(\"div\", {\n      className: \"mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      id: \"form\",\n      className: \"mt-2\",\n      onSubmit: this.handleConfirmChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"channelId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Channel Id\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"channelId\",\n      onChange: event => this.setState({\n        channelId: event.target.value\n      }),\n      type: \"text\",\n      name: \"channelId\",\n      className: \"form-control\",\n      value: this.state.channelId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"reqType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Request Type\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"reqType\",\n      type: \"text\",\n      onChange: event => this.setState({\n        reqType: event.target.value\n      }),\n      name: \"reqType\",\n      className: \"form-control\",\n      value: this.state.reqType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"requestData\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Request Data\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"requestData\",\n      type: \"text\",\n      onChange: event => this.setState({\n        requestData: event.target.value\n      }),\n      name: \"requestData\",\n      className: \"form-control\",\n      value: this.state.requestData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    })), this.state.errors && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, this.state.errors)), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit Transaction\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }))));\n  }\n\n}\n\n;\nexport default RedisFunctionalTesting;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/redisApi/RedisFunctionalTesting.js"],"names":["React","NavLink","FetchAccount","STATE_TYPE","FetchRequests","DeleteRequest","FetchOtherParty","IsValidSignature","axios","require","RedisHandlerURL","activeStyle","color","onDeleteClick","index","sender","response","Response","console","log","onAcceptClick","request","state","JSON","parse","channel_id","Number","parseInt","count","Alice_Cash","Bob_Cash","signature","TheOtherParty","checkSig","alert","RedisFunctionalTesting","Component","errors","channelId","reqType","requestData","pendingResponse","localStorage","getItem","onChange","event","setState","target","value","handleConfirmChannel","preventDefault","isNaN","bodyFormData","FormData","set","resp","method","url","data","status","handlePendingState","setItem","stringify","render","Object","keys","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { FetchAccount } from \"../components/MetaMaskFetch\";\nimport '../components/Form.css'\nimport STATE_TYPE from \"../RequestType\";\nimport { FetchRequests, DeleteRequest } from \"./GetSetData\";\nimport { FetchOtherParty, IsValidSignature } from \"../contract/contract_transaction\";\n// import { toast } from \"react-toastify\";\nconst axios = require('axios');\nconst RedisHandlerURL = 'http://localhost:5002';\nconst activeStyle = { color: \"grey\" };\n\n// function ShowState(props) {\n\n//     return (\n//         <table id=\"table\" className=\"table\">\n//             <thead>\n//                 <tr>\n//                     <th>Type</th>\n//                     <th>value</th>\n//                 </tr>\n//             </thead>\n//             <tbody>\n//                 <tr key=\"Channel Id\">\n//                     <td><span>Channel Id</span></td>\n//                     <td><span>{props.state[0]}</span></td>\n//                 </tr>\n//                 <tr key=\"Transaction Count\">\n//                     <td ><span>Transaction Count</span></td>\n//                     <td><span>{props.state[1]}</span></td>\n//                 </tr>\n//                 <tr key=\"Alice Cash\">\n//                     <td ><span>Alice Cash</span></td>\n//                     <td><span>{props.state[2]}</span></td>\n//                 </tr>\n//                 <tr key=\"Bob Cash\">\n//                     <td ><span>Bob Cash</span></td>\n//                     <td><span>{props.state[3]}</span></td>\n//                 </tr>\n//             </tbody>\n//         </table>\n//     )\n// }\n\nasync function onDeleteClick(index) {\n    const sender = await FetchAccount()\n    let response = await DeleteRequest(sender, STATE_TYPE.Response, index)\n    console.log(response)\n}\n\nasync function onAcceptClick(request, index) {\n    // console.log(request)\n    // TODO: split content here and set value to storage and also send back status to other the party\n    let state = JSON.parse(request)\n    let channel_id = Number.parseInt(state[0])\n    let count = Number.parseInt(state[1])\n    let Alice_Cash = Number.parseInt(state[2])\n    let Bob_Cash = Number.parseInt(state[3])\n    let signature = state[4]\n\n    console.log(channel_id, count, Alice_Cash, Bob_Cash, signature)\n    // let ReqObject = JSON.parse(request)\n    // console.log(ReqObject.channel_id, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n    const sender = await FetchAccount()\n    const TheOtherParty = await FetchOtherParty(channel_id, sender)\n    console.log(TheOtherParty)\n    let checkSig = await IsValidSignature(TheOtherParty, count, Alice_Cash, Bob_Cash, signature)\n\n    if (checkSig === true) {\n        // signature = await GenerateSignatures(count, Alice_Cash, Bob_Cash)\n        // localStorage.setItem(channel_id + 'lastState', JSON.stringify(request));\n        // let lastState = [\n        //     channel_id, count, Alice_Cash, Bob_Cash, signature\n        // ]\n        // let response = await SetRequest(TheOtherParty, STATE_TYPE.Response, JSON.stringify(lastState))\n        // console.log(\"hello \", response)\n        alert(\"valid signature\")\n    }\n    else {\n        alert(\"invalid signature\")\n    }\n\n    // localStorage.setItem(channel_id + 'lastState', JSON.stringify(request));\n\n    // const flag = await IsValidSignature(sender, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n    // console.log(flag)\n    // let result = await GenerateSignatures(ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash)\n    // console.log(result)\n    // ReqObject.signature = result.alice\n    // Socket.emit('publishToChannel', 'newChannel', JSON.stringify(ReqObject));\n    // console.log(\"all Done\")\n}\n\nclass RedisFunctionalTesting extends React.Component {\n    state = {\n        errors: '',\n        channelId: '',\n        reqType: '',\n        requestData: '',\n        pendingResponse: JSON.parse(localStorage.getItem(\"PendingResponse\") || \"[]\"),\n    }\n\n    onChange = async (event) => this.setState({ 'lastState': event.target.value });\n\n    handleConfirmChannel = async (event) => {\n        event.preventDefault();\n        this.setState({ 'errors': \"\" })\n        if (Number.isNaN(parseInt(this.state.reqType, 10))) {\n            this.setState({ 'errors': \"Enter Integer amount(in wei unit)\" })\n        }\n        else {\n            let sender = await FetchAccount()\n            var bodyFormData = new FormData();\n            bodyFormData.set('channel_id', this.state.channelId);\n            bodyFormData.set('address', sender);\n            bodyFormData.set('request_type', this.state.reqType);\n            bodyFormData.set('request_data', this.state.requestData);\n            const resp = await axios({\n                method: 'post',\n                url: RedisHandlerURL + '/publish',\n                // url: RedisHandlerURL + '/subscribe',\n                // url: RedisHandlerURL + '/unsubscribe',\n                data: bodyFormData\n            })\n            if (resp.status === 200) {\n                console.log(resp.data)\n            }\n            // console.log(await GenerateSignatures(this.state.lastState[1], this.state.reqType, this.state.requestData))\n            // ChannelConfirm(this.state.channelId, this.state.amount)\n        }\n        // this.setState({ 'reqType': \"\" })\n        // this.setState({ 'requestData': \"\" })\n\n\n    }\n    handlePendingState = async (event) => {\n        event.preventDefault();\n        let sender = await FetchAccount()\n        let response = await FetchRequests(sender, STATE_TYPE.Response)\n        console.log(response)\n        localStorage.setItem('PendingResponse', JSON.stringify(response));\n    }\n    render() {\n        return (\n            <div>\n                <div>\n                    <h2>New State Response</h2>\n                    <div>\n                        <h1>Hello React with Local Storage!</h1>\n                        <form id=\"form\" onSubmit={this.handlePendingState}>\n                            <input type=\"submit\" value=\"Refresh Pending Response\" className=\"btn btn-primary\" />\n                        </form>\n                        {\n\n                            console.log(this.state.pendingResponse)\n                        }\n                        <table id=\"table\" className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Decline State</th>\n                                    <th>Accept State</th>\n                                    <th>State Details</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    Object.keys(this.state.pendingResponse).map(request => {\n                                        return (\n                                            <tr key={request}>\n                                                <td>\n                                                    <button\n                                                        className=\"btn btn-outline-danger\"\n                                                        onClick={() => onDeleteClick(request)}\n                                                    >\n                                                        Delete Request\n                                            </button>\n                                                </td>\n                                                <td>\n                                                    <button\n                                                        className=\"btn btn-outline-danger\"\n                                                        onClick={() => onAcceptClick(this.state.pendingResponse[request], request)}\n                                                    >\n                                                        Accept Request\n                                            </button>\n                                                </td>\n                                                <td><span>{this.state.pendingResponse[request]}</span></td>\n                                                {/* <td>{JSON.parse(this.state.response[request])}</td> */}\n                                                {/* <td>{this.state.response[request].count}</td> */}\n                                                {/* <td>{this.state.response[request]['count']}</td> */}\n                                                {/* <td>{this.state.response[request].count}</td> */}\n                                            </tr>\n                                        )\n\n                                    }\n                                    )\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                    <div>\n                        <h1>RedisFunctionalTesting</h1>\n                        {/* <ShowState state={this.state.lastState} /> */}\n                    </div>\n                    <div className=\"mt-2\" ></div>\n                    <form id=\"form\" className=\"mt-2\" onSubmit={this.handleConfirmChannel}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"channelId\">Channel Id</label>\n                            <div className=\"field\">\n                                <input\n                                    id=\"channelId\"\n                                    onChange={event => this.setState({ channelId: event.target.value })}\n                                    type=\"text\"\n                                    name=\"channelId\"\n                                    className=\"form-control\"\n                                    value={this.state.channelId}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"reqType\">Request Type</label>\n                            <div className=\"field\">\n                                <input\n                                    id=\"reqType\"\n                                    type=\"text\"\n                                    onChange={event => this.setState({ reqType: event.target.value })}\n                                    name=\"reqType\"\n                                    className=\"form-control\"\n                                    value={this.state.reqType}\n                                />\n                            </div>\n                            {/* {this.state.amountError && <div className=\"alert alert-danger\">{this.state.amountError}</div>} */}\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"requestData\">Request Data</label>\n                            <div className=\"field\">\n                                <input\n                                    id=\"requestData\"\n                                    type=\"text\"\n                                    onChange={event => this.setState({ requestData: event.target.value })}\n                                    name=\"requestData\"\n                                    className=\"form-control\"\n                                    value={this.state.requestData}\n                                />\n                            </div>\n                            {this.state.errors && <div className=\"alert alert-danger\">{this.state.errors}</div>}\n                        </div>\n                        <input type=\"submit\" value=\"Submit Transaction\" className=\"btn btn-primary\" />\n                    </form>\n                </div>\n            </div >\n        );\n    }\n};\n\nexport default RedisFunctionalTesting;\n"]},"metadata":{},"sourceType":"module"}