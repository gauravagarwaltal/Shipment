{"ast":null,"code":"import { contract_address, contract_abi } from \"./contract_config\"; // import { Web3 } from \"web3\";\n// import { aliceAddress } from \"./wallet\";\n\nimport { FetchAccount } from '../components/MetaMaskFetch';\nimport { toast } from 'react-toastify';\n\nconst Web3 = require('web3');\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nconst sideChainContract = new web3.eth.Contract(contract_abi, contract_address);\n\nconst GetChannelDetails = async channelId => {\n  try {\n    var details = await sideChainContract.methods.getChannel(channelId).call();\n    let details_div = {\n      'Alice Id': details['alice']['id'],\n      'Alice Cash': details['alice']['cash'],\n      'Alice Input Flag': String(details['alice']['waitForInput']),\n      'Bob Id': details['bob']['id'],\n      'Bob Cash': details['bob']['cash'],\n      'Bob Input Flag': String(details['bob']['waitForInput']),\n      'Timeout': details['timeout'],\n      'Status': details['status'],\n      'Published Tx Count': details['publish_tx_count'],\n      'Money': details['money']\n    };\n    return details_div;\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst ChannelExists = async channelId => {\n  let details = await GetChannelDetails(channelId);\n  return /^0x0+$/.test(details['Alice Id']);\n};\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n  const sender = await FetchAccount();\n  console.log(sender, web3.utils.checkAddressChecksum(sender));\n\n  try {\n    var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty)).send({\n      from: web3.utils.toChecksumAddress(sender),\n      gas: 200000\n    });\n    console.log('new channel created, txHash->', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Open Channel request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelConfirm = async (channelId, cash) => {\n  try {\n    const sender = await FetchAccount();\n    let flag = await ChannelExists(channelId);\n\n    if (flag) {\n      toast.error(\"Channel with \".concat(channelId, \" doesn't exists\"));\n    } else {\n      var txHash = await sideChainContract.methods.confirm(channelId).send({\n        from: web3.utils.toChecksumAddress(sender),\n        value: web3.utils.toHex(web3.utils.toWei(cash, 'gwei')),\n        gas: 200000\n      });\n      console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n      toast.success(\"Deposit confirmed\");\n    }\n  } catch (error) {\n    console.log(\"Channel Deposit request reverted\");\n    console.log(error);\n    toast.error(\"Deposit Declined for Channel Id \".concat(channelId));\n  }\n};\n\nconst ChannelRefund = async (channelId, self) => {\n  try {\n    var txHash = await sideChainContract.methods.refund(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Refund request reverted\");\n    console.log(error);\n  }\n};\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n  try {\n    var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call();\n    console.log('isValidSignature ', flag);\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\");\n    console.log(error);\n  }\n};\n\nconst ChannelFinalizeClose = async (channelId, self) => {\n  try {\n    var txHash = await sideChainContract.methods.finalizeClose(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Closed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel finalizeClose request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n  try {\n    var txHash = await sideChainContract.methods.close(channel_id, count, sender_balance, recipient_balance, signature).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Close request proceed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Closed request reverted\");\n    console.log(error);\n  }\n};\n\nexport { GetChannelDetails, CreateNewChannel, ChannelConfirm, ChannelRefund, IsValidSignature, ChannelFinalizeClose, ChannelClose };","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/contract/contract_transaction.js"],"names":["contract_address","contract_abi","FetchAccount","toast","Web3","require","web3","givenProvider","sideChainContract","eth","Contract","GetChannelDetails","channelId","details","methods","getChannel","call","details_div","String","error","console","log","ChannelExists","test","CreateNewChannel","theOtherParty","sender","utils","checkAddressChecksum","txHash","openChannel","toChecksumAddress","send","from","gas","transactionHash","ChannelConfirm","cash","flag","confirm","value","toHex","toWei","success","ChannelRefund","self","refund","IsValidSignature","addr","count","sender_balance","recipient_balance","signature","isValidSignature","ChannelFinalizeClose","finalizeClose","ChannelClose","channel_id","close"],"mappings":"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","sourcesContent":["import { contract_address, contract_abi } from \"./contract_config\";\n// import { Web3 } from \"web3\";\n// import { aliceAddress } from \"./wallet\";\nimport { FetchAccount } from '../components/MetaMaskFetch';\nimport { toast } from 'react-toastify';\n\nconst Web3 = require('web3')\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\nconst sideChainContract = new web3.eth.Contract(contract_abi, contract_address)\n\nconst GetChannelDetails = async (channelId) => {\n    try {\n        var details = await sideChainContract.methods.getChannel(channelId).call()\n        let details_div = {\n            'Alice Id': details['alice']['id'],\n            'Alice Cash': details['alice']['cash'],\n            'Alice Input Flag': String(details['alice']['waitForInput']),\n            'Bob Id': details['bob']['id'],\n            'Bob Cash': details['bob']['cash'],\n            'Bob Input Flag': String(details['bob']['waitForInput']),\n            'Timeout': details['timeout'],\n            'Status': details['status'],\n            'Published Tx Count': details['publish_tx_count'],\n            'Money': details['money']\n        }\n        return details_div;\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst ChannelExists = async (channelId) => {\n    let details = await GetChannelDetails(channelId)\n    return /^0x0+$/.test(details['Alice Id']);\n}\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n    const sender = await FetchAccount()\n    console.log(sender, web3.utils.checkAddressChecksum(sender))\n    try {\n        var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty))\n            .send({ from: web3.utils.toChecksumAddress(sender), gas: 200000 })\n        console.log('new channel created, txHash->', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Open Channel request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelConfirm = async (channelId, cash) => {\n    try {\n        const sender = await FetchAccount()\n        let flag = await ChannelExists(channelId)\n        if (flag) {\n            toast.error(`Channel with ${channelId} doesn't exists`)\n        } else {\n            var txHash = await sideChainContract.methods.confirm(channelId)\n                .send({ from: web3.utils.toChecksumAddress(sender), value: web3.utils.toHex(web3.utils.toWei(cash, 'gwei')), gas: 200000 })\n            console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n            toast.success(\"Deposit confirmed\")\n        }\n    } catch (error) {\n        console.log(\"Channel Deposit request reverted\")\n        console.log(error)\n        toast.error(`Deposit Declined for Channel Id ${channelId}`)\n    }\n}\n\nconst ChannelRefund = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.refund(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Refund request reverted\")\n        console.log(error)\n    }\n}\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n    try {\n        var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call()\n        console.log('isValidSignature ', flag);\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\")\n        console.log(error)\n    }\n}\n\nconst ChannelFinalizeClose = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.finalizeClose(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Closed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel finalizeClose request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n    try {\n        var txHash = await sideChainContract.methods.close(channel_id, count, sender_balance, recipient_balance, signature)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Close request proceed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Closed request reverted\")\n        console.log(error)\n    }\n}\n\n\nexport { GetChannelDetails, CreateNewChannel, ChannelConfirm, ChannelRefund, IsValidSignature, ChannelFinalizeClose, ChannelClose }"]},"metadata":{},"sourceType":"module"}