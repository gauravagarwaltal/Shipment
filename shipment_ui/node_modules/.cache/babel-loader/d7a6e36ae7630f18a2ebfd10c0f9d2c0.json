{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/redisApi/PendingResponses.js\";\nimport React from \"react\";\nimport { FetchAccount } from \"../components/MetaMaskFetch\";\nimport '../components/Form.css';\nimport STATE_TYPE from \"../RequestType\";\nimport { FetchRequests, DeleteRequest } from \"./GetSetData\";\nimport { FetchOtherParty, IsValidSignature } from \"../contract/contract_transaction\";\n\nasync function onDeleteClick(index) {\n  const sender = await FetchAccount();\n  let response = await DeleteRequest(sender, STATE_TYPE.Response, index);\n  console.log(response);\n}\n\nasync function onShowLastState(request) {\n  let state = JSON.parse(request);\n  let channel_id = Number.parseInt(state[0]);\n  const sender = await FetchAccount();\n  alert(JSON.parse(localStorage.getItem(sender + channel_id + \"laststate\")) || \"No Signed State Defined\");\n}\n\nasync function onAcceptClick(request, index) {\n  // console.log(request)\n  // TODO: split content here and set value to storage and also send back status to other the party\n  let state = JSON.parse(request);\n  let channel_id = Number.parseInt(state[0]);\n  let count = Number.parseInt(state[1]);\n  let Alice_Cash = Number.parseInt(state[2]);\n  let Bob_Cash = Number.parseInt(state[3]);\n  let signature = state[4];\n  console.log(channel_id, count, Alice_Cash, Bob_Cash, signature); // let ReqObject = JSON.parse(request)\n  // console.log(ReqObject.channel_id, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n\n  const sender = await FetchAccount();\n  const TheOtherParty = await FetchOtherParty(channel_id, sender);\n  console.log(TheOtherParty);\n  let checkSig = await IsValidSignature(TheOtherParty, count, Alice_Cash, Bob_Cash, signature);\n\n  if (checkSig === true) {\n    // signature = await GenerateSignatures(count, Alice_Cash, Bob_Cash)\n    // localStorage.setItem(channel_id + 'lastState', JSON.stringify(request));\n    // let lastState = [\n    //     channel_id, count, Alice_Cash, Bob_Cash, signature\n    // ]\n    // let response = await SetRequest(TheOtherParty, STATE_TYPE.Response, JSON.stringify(lastState))\n    // console.log(\"hello \", response)\n    alert(\"valid signature\");\n  } else {\n    alert(\"invalid signature\");\n  } // localStorage.setItem(channel_id + 'lastState', JSON.stringify(request));\n  // const flag = await IsValidSignature(sender, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n  // console.log(flag)\n  // let result = await GenerateSignatures(ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash)\n  // console.log(result)\n  // ReqObject.signature = result.alice\n  // Socket.emit('publishToChannel', 'newChannel', JSON.stringify(ReqObject));\n  // console.log(\"all Done\")\n\n}\n\nclass PendingResponses extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pendingResponse: JSON.parse(localStorage.getItem(\"PendingResponse\") || \"[]\")\n    };\n\n    this.onChange = async event => this.setState({\n      'lastState': event.target.value\n    });\n\n    this.handlePendingState = async event => {\n      event.preventDefault();\n      let sender = await FetchAccount();\n      let response = await FetchRequests(sender, STATE_TYPE.Response);\n      console.log(response);\n      localStorage.setItem('PendingResponse', JSON.stringify(response));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"New State Response\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handlePendingState,\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Refresh Pending Response\"), console.log(this.state.pendingResponse), React.createElement(\"table\", {\n      id: \"table\",\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Decline State\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Accept State\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"State Details\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Last Signed State\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, Object.keys(this.state.pendingResponse).map(request => {\n      return React.createElement(\"tr\", {\n        key: request,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => onDeleteClick(request),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Delete Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => onAcceptClick(this.state.pendingResponse[request], request),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Accept Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, this.state.pendingResponse[request])), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => onShowLastState(this.state.pendingResponse[request]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Show Last Signed State\")));\n    })))));\n  }\n\n}\n\n;\nexport default PendingResponses;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/redisApi/PendingResponses.js"],"names":["React","FetchAccount","STATE_TYPE","FetchRequests","DeleteRequest","FetchOtherParty","IsValidSignature","onDeleteClick","index","sender","response","Response","console","log","onShowLastState","request","state","JSON","parse","channel_id","Number","parseInt","alert","localStorage","getItem","onAcceptClick","count","Alice_Cash","Bob_Cash","signature","TheOtherParty","checkSig","PendingResponses","Component","pendingResponse","onChange","event","setState","target","value","handlePendingState","preventDefault","setItem","stringify","render","Object","keys","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FetchAccount } from \"../components/MetaMaskFetch\";\nimport '../components/Form.css'\nimport STATE_TYPE from \"../RequestType\";\nimport { FetchRequests, DeleteRequest } from \"./GetSetData\";\nimport { FetchOtherParty, IsValidSignature } from \"../contract/contract_transaction\";\n\nasync function onDeleteClick(index) {\n    const sender = await FetchAccount()\n    let response = await DeleteRequest(sender, STATE_TYPE.Response, index)\n    console.log(response)\n}\n\nasync function onShowLastState(request) {\n    let state = JSON.parse(request)\n    let channel_id = Number.parseInt(state[0])\n    const sender = await FetchAccount()\n    alert(JSON.parse(localStorage.getItem(sender + channel_id + \"laststate\")) || \"No Signed State Defined\")\n}\n\nasync function onAcceptClick(request, index) {\n    // console.log(request)\n    // TODO: split content here and set value to storage and also send back status to other the party\n    let state = JSON.parse(request)\n    let channel_id = Number.parseInt(state[0])\n    let count = Number.parseInt(state[1])\n    let Alice_Cash = Number.parseInt(state[2])\n    let Bob_Cash = Number.parseInt(state[3])\n    let signature = state[4]\n\n    console.log(channel_id, count, Alice_Cash, Bob_Cash, signature)\n    // let ReqObject = JSON.parse(request)\n    // console.log(ReqObject.channel_id, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n    const sender = await FetchAccount()\n    const TheOtherParty = await FetchOtherParty(channel_id, sender)\n    console.log(TheOtherParty)\n    let checkSig = await IsValidSignature(TheOtherParty, count, Alice_Cash, Bob_Cash, signature)\n\n    if (checkSig === true) {\n        // signature = await GenerateSignatures(count, Alice_Cash, Bob_Cash)\n        // localStorage.setItem(channel_id + 'lastState', JSON.stringify(request));\n        // let lastState = [\n        //     channel_id, count, Alice_Cash, Bob_Cash, signature\n        // ]\n        // let response = await SetRequest(TheOtherParty, STATE_TYPE.Response, JSON.stringify(lastState))\n        // console.log(\"hello \", response)\n        alert(\"valid signature\")\n    }\n    else {\n        alert(\"invalid signature\")\n    }\n\n    // localStorage.setItem(channel_id + 'lastState', JSON.stringify(request));\n\n    // const flag = await IsValidSignature(sender, ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash, ReqObject.signature)\n    // console.log(flag)\n    // let result = await GenerateSignatures(ReqObject.count, ReqObject.Alice_Cash, ReqObject.Bob_Cash)\n    // console.log(result)\n    // ReqObject.signature = result.alice\n    // Socket.emit('publishToChannel', 'newChannel', JSON.stringify(ReqObject));\n    // console.log(\"all Done\")\n}\n\nclass PendingResponses extends React.Component {\n    state = {\n        pendingResponse: JSON.parse(localStorage.getItem(\"PendingResponse\") || \"[]\"),\n    }\n\n    onChange = async (event) => this.setState({ 'lastState': event.target.value });\n\n    handlePendingState = async (event) => {\n        event.preventDefault();\n        let sender = await FetchAccount()\n        let response = await FetchRequests(sender, STATE_TYPE.Response)\n        console.log(response)\n        localStorage.setItem('PendingResponse', JSON.stringify(response));\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>New State Response</h2>\n                <div>\n                    <button onClick={this.handlePendingState} className=\"btn btn-primary\">Refresh Pending Response</button>\n                    {\n\n                        console.log(this.state.pendingResponse)\n                    }\n                    <table id=\"table\" className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Decline State</th>\n                                <th>Accept State</th>\n                                <th>State Details</th>\n                                <th>Last Signed State</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                Object.keys(this.state.pendingResponse).map(request => {\n                                    return (\n                                        <tr key={request}>\n                                            <td>\n                                                <button\n                                                    className=\"btn btn-outline-danger\"\n                                                    onClick={() => onDeleteClick(request)}\n                                                >\n                                                    Delete Request\n                                            </button>\n                                            </td>\n                                            <td>\n                                                <button\n                                                    className=\"btn btn-outline-danger\"\n                                                    onClick={() => onAcceptClick(this.state.pendingResponse[request], request)}\n                                                >\n                                                    Accept Request\n                                            </button>\n                                            </td>\n                                            <td><span>{this.state.pendingResponse[request]}</span></td>\n                                            <td>\n                                                <button className=\"btn btn-outline-danger\" onClick={() => onShowLastState(this.state.pendingResponse[request])} >\n                                                    Show Last Signed State\n                                                </button>\n                                            </td>\n                                        </tr>\n                                    )\n\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </div >\n        );\n    }\n};\n\nexport default PendingResponses;\n"]},"metadata":{},"sourceType":"module"}