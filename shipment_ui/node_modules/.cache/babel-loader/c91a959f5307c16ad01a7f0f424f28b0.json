{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/FetchContractTxns.js\";\nimport React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"../contract/CreateInstance\";\nimport { IsMyChannel } from \"../contract/contract_transaction\";\n\nclass FetchContractTxn extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sender: \"\",\n      key: '',\n      fetchedEvent: null\n    };\n\n    this.fetchEventFilter = async event => {\n      event.preventDefault();\n      let events = await FilterEvents(this.state.sender); // localStorage.setItem(this.state.key, JSON.stringify(events));\n\n      this.setState({\n        'fetchedEvent': []\n      });\n      events.forEach(element => {\n        if (element.event === 'EventChannelInitializing') {// event EventChannelInitializing(address libSig);\n          // console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0])\n        } else if (element.event === 'EventInitializing') {\n          // event EventInitializing(address addressAlice, address addressBob, uint channel_id);\n          if (this.state.sender === element.returnValues[0]) {\n            let key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            let channel_id = Number.parseInt(element.returnValues[2], 10);\n            let index = waiting_channels.indexOf(channel_id);\n\n            if (index < 0) {\n              waiting_channels.push(channel_id);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n            }\n\n            console.log(\"waiting channels \", waiting_channels); // add one page for refund or add payment to channel \n            // add channel id to waiting to confirm channel list\n            // also verify waiting time is over or not\n          }\n\n          if (this.state.sender === element.returnValues[1]) {\n            let key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            let channel_id = Number.parseInt(element.returnValues[2], 10);\n            let index = waiting_channels.indexOf(channel_id);\n\n            if (index < 0) {\n              waiting_channels.push(channel_id);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n            }\n\n            console.log(\"waiting channels \", waiting_channels);\n          }\n        } else if (element.event === 'EventInitialized') {\n          // console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2])\n          // event EventInitialized(uint cashAlice, uint cashBob, uint channel_id);\n          let channel_id = Number.parseInt(element.returnValues[2], 10);\n          IsMyChannel(channel_id, this.state.sender).then(result => {\n            if (result) {\n              let key = this.state.sender + 'active_channel_ids';\n              let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\");\n              let index = active_channel_ids.indexOf(channel_id);\n\n              if (index < 0) {\n                active_channel_ids.push(channel_id);\n                localStorage.setItem(key, JSON.stringify(active_channel_ids));\n              }\n\n              key = this.state.sender + 'waiting_channel_ids';\n              let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n              index = waiting_channels.indexOf(channel_id);\n\n              if (index > -1) {\n                waiting_channels.splice(index, 1);\n              }\n\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n              console.log(\"active_channel_ids\", active_channel_ids);\n            }\n          }).catch(err => {\n            alert(\"contract connectivity issue\");\n            console.log(err);\n          });\n        } else if (element.event === 'EventRefunded') {\n          // event EventRefunded(uint channel_id);\n          let channel_id = Number.parseInt(element.returnValues[0], 10);\n          let key = this.state.sender + 'waiting_channel_ids';\n          let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n          let index = waiting_channels.indexOf(channel_id);\n\n          if (index > -1) {\n            waiting_channels.splice(index, 1);\n          }\n\n          localStorage.setItem(key, JSON.stringify(waiting_channels));\n          console.log(\"1waiting channels \", waiting_channels);\n          console.log(element.returnValues);\n        } else if (element.event === 'EventClosing') {// event EventClosing(uint channel_id);\n        } else if (element.event === 'EventClosed') {// event EventClosed(uint channel_id);\n        } else if (element.event === 'EventNotClosed') {// event EventNotClosed(uint channel_id);\n        }\n      });\n      localStorage.setItem(this.state.key, JSON.stringify(this.state.fetchedEvent));\n    };\n\n    this.handlerEvents = async event => {\n      event.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      console.log(sender);\n\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        this.setState({\n          'key': this.state.sender + 'contract_events'\n        });\n      }\n\n      console.log(this.state.key);\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Event Filter Outcome\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.fetchEventFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Apply Event Filter \")), React.createElement(\"table\", {\n      id: \"table\",\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Accept State\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"State Details\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Last Signed State\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, JSON.parse(localStorage.getItem(this.state.key)) && Object.keys(JSON.parse(localStorage.getItem(this.state.key))).map(request => {\n      return React.createElement(\"tr\", {\n        key: request,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => this.handlerEvents(this.state.fetchedEvent[request], request),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Accept Request\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, JSON.parse(localStorage.getItem(this.state.key))[request])), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Show Last Signed State\")));\n    }))))));\n  }\n\n}\n\n;\nexport default FetchContractTxn;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/FetchContractTxns.js"],"names":["React","FetchAccount","FilterEvents","IsMyChannel","FetchContractTxn","Component","state","sender","key","fetchedEvent","fetchEventFilter","event","preventDefault","events","setState","forEach","element","returnValues","waiting_channels","JSON","parse","localStorage","getItem","channel_id","Number","parseInt","index","indexOf","push","setItem","stringify","console","log","then","result","active_channel_ids","splice","catch","err","alert","handlerEvents","componentDidMount","render","Object","keys","map","request"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"../contract/CreateInstance\";\nimport { IsMyChannel } from \"../contract/contract_transaction\";\n\n\nclass FetchContractTxn extends React.Component {\n    state = {\n        sender: \"\",\n        key: '',\n        fetchedEvent: null,\n    }\n\n    componentDidMount() {\n\n        FetchAccount().then(sender => {\n            console.log(sender)\n            if (sender) {\n                this.setState({ 'sender': sender })\n                this.setState({ 'key': this.state.sender + 'contract_events' })\n            }\n            console.log(this.state.key)\n        })\n            .catch(err => {\n                alert(\"check metamask connectivity\")\n                console.log(err)\n            })\n    }\n\n    fetchEventFilter = async (event) => {\n        event.preventDefault();\n        let events = await FilterEvents(this.state.sender)\n\n        // localStorage.setItem(this.state.key, JSON.stringify(events));\n        this.setState({ 'fetchedEvent': [] })\n        events.forEach(element => {\n            if (element.event === 'EventChannelInitializing') {\n                // event EventChannelInitializing(address libSig);\n                // console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0])\n            }\n            else if (element.event === 'EventInitializing') {\n                // event EventInitializing(address addressAlice, address addressBob, uint channel_id);\n                if (this.state.sender === element.returnValues[0]) {\n                    let key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    let channel_id = Number.parseInt(element.returnValues[2], 10)\n                    let index = waiting_channels.indexOf(channel_id);\n                    if (index < 0) {\n                        waiting_channels.push(channel_id)\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    }\n                    console.log(\"waiting channels \", waiting_channels)\n                    // add one page for refund or add payment to channel \n                    // add channel id to waiting to confirm channel list\n                    // also verify waiting time is over or not\n                }\n                if (this.state.sender === element.returnValues[1]) {\n                    let key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    let channel_id = Number.parseInt(element.returnValues[2], 10)\n                    let index = waiting_channels.indexOf(channel_id);\n                    if (index < 0) {\n                        waiting_channels.push(channel_id)\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    }\n                    console.log(\"waiting channels \", waiting_channels)\n                }\n            }\n            else if (element.event === 'EventInitialized') {\n                // console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2])\n                // event EventInitialized(uint cashAlice, uint cashBob, uint channel_id);\n                let channel_id = Number.parseInt(element.returnValues[2], 10)\n                IsMyChannel(channel_id, this.state.sender).then(result => {\n                    if (result) {\n                        let key = this.state.sender + 'active_channel_ids'\n                        let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\")\n\n                        let index = active_channel_ids.indexOf(channel_id);\n                        if (index < 0) {\n                            active_channel_ids.push(channel_id)\n                            localStorage.setItem(key, JSON.stringify(active_channel_ids));\n                        }\n                        key = this.state.sender + 'waiting_channel_ids'\n                        let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                        index = waiting_channels.indexOf(channel_id);\n                        if (index > -1) {\n                            waiting_channels.splice(index, 1);\n                        }\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n                        console.log(\"active_channel_ids\", active_channel_ids)\n                    }\n                }).catch(err => {\n                    alert(\"contract connectivity issue\")\n                    console.log(err)\n                })\n\n            }\n            else if (element.event === 'EventRefunded') {\n                // event EventRefunded(uint channel_id);\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n                let key = this.state.sender + 'waiting_channel_ids'\n                let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                let index = waiting_channels.indexOf(channel_id);\n                if (index > -1) {\n                    waiting_channels.splice(index, 1);\n                }\n                localStorage.setItem(key, JSON.stringify(waiting_channels));\n                console.log(\"1waiting channels \", waiting_channels)\n\n                console.log(element.returnValues)\n            }\n            else if (element.event === 'EventClosing') {\n                // event EventClosing(uint channel_id);\n            }\n            else if (element.event === 'EventClosed') {\n                // event EventClosed(uint channel_id);\n            }\n            else if (element.event === 'EventNotClosed') {\n                // event EventNotClosed(uint channel_id);\n            }\n        });\n        localStorage.setItem(this.state.key, JSON.stringify(this.state.fetchedEvent));\n    }\n\n    handlerEvents = async (event) => {\n        event.preventDefault();\n\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Event Filter Outcome</h2>\n                <div>\n                    <div>\n                        <p><button onClick={this.fetchEventFilter}>Apply Event Filter </button></p>\n                        <table id=\"table\" className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Accept State</th>\n                                    <th>State Details</th>\n                                    <th>Last Signed State</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n\n                                    JSON.parse(localStorage.getItem(this.state.key)) && Object.keys(JSON.parse(localStorage.getItem(this.state.key))).map(request => {\n                                        return (\n\n                                            <tr key={request}>\n                                                <td>\n                                                    <button\n                                                        className=\"btn btn-outline-danger\"\n                                                        onClick={() => this.handlerEvents(this.state.fetchedEvent[request], request)}\n                                                    >\n                                                        Accept Request\n                                            </button>\n                                                </td>\n                                                <td><span>{JSON.parse(localStorage.getItem(this.state.key))[request]}</span></td>\n                                                <td>\n                                                    <button className=\"btn btn-outline-danger\"  >\n                                                        Show Last Signed State\n                                                </button>\n                                                </td>\n                                            </tr>\n                                        )\n\n                                    }\n                                    )\n                                }\n                            </tbody>\n                        </table>\n\n                    </div>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default FetchContractTxn;\n"]},"metadata":{},"sourceType":"module"}