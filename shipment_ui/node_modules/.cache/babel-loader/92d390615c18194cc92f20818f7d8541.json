{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/FetchContractTxns.js\";\nimport React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"../contract/CreateInstance\";\nimport { IsMyChannel, GetChannelDetails } from \"../contract/contract_transaction\";\n\nclass FetchContractTxn extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sender: \"\"\n    };\n\n    this.fetchEventFilter = async event => {\n      event.preventDefault();\n      let events = await FilterEvents(this.state.sender);\n\n      if (events === undefined || events === null) {\n        return;\n      }\n\n      events.forEach(element => {\n        if (element.event === 'EventChannelInitializing') {// trigered when smart-contract deployed\n          // event EventChannelInitializing(address libSig);\n          // console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0])\n        } else if (element.event === 'EventInitializing') {\n          // add channel id in the waiting list\n          // triggered when new channel will be initiailized\n          // event EventInitializing(address addressAlice, address addressBob, uint channel_id);\n          IsMyChannel(channel_id, this.state.sender).then(result => {}).catch(err => {\n            alert(\"contract connectivity issue\");\n            console.log(err);\n          });\n\n          if (this.state.sender === element.returnValues[0]) {\n            let key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            let channel_id = Number.parseInt(element.returnValues[2], 10);\n            let index = waiting_channels.indexOf(channel_id);\n\n            if (index < 0) {\n              waiting_channels.push(channel_id);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n            }\n\n            console.log(\"waiting channels \", waiting_channels); // add one page for refund or add payment to channel \n            // add channel id to waiting to confirm channel list\n            // also verify waiting time is over or not\n          }\n\n          if (this.state.sender === element.returnValues[1]) {\n            let key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            let channel_id = Number.parseInt(element.returnValues[2], 10);\n            let index = waiting_channels.indexOf(channel_id);\n\n            if (index < 0) {\n              waiting_channels.push(channel_id);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n            }\n\n            console.log(\"waiting channels \", waiting_channels);\n          }\n        } else if (element.event === 'EventInitialized') {\n          // triggered when channel confirmed by both parties.\n          // console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2])\n          // event EventInitialized(uint cashAlice, uint cashBob, uint channel_id);\n          let channel_id = Number.parseInt(element.returnValues[2], 10);\n          IsMyChannel(channel_id, this.state.sender).then(result => {\n            if (result) {\n              let key = this.state.sender + 'active_channel_ids';\n              let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\");\n              let index = active_channel_ids.indexOf(channel_id);\n\n              if (index < 0) {\n                active_channel_ids.push(channel_id);\n                localStorage.setItem(key, JSON.stringify(active_channel_ids));\n                key = this.state.sender + channel_id + '_last_signed_state';\n              }\n\n              key = this.state.sender + 'waiting_channel_ids';\n              let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n              index = waiting_channels.indexOf(channel_id);\n\n              if (index > -1) {\n                waiting_channels.splice(index, 1);\n                localStorage.setItem(key, JSON.stringify(waiting_channels));\n              }\n\n              key = this.state.sender + channel_id + '_last_signed_state';\n              let value = localStorage.getItem(key);\n\n              if (value == null) {\n                GetChannelDetails(channel_id).then(onChainState => {\n                  let count = 0;\n                  let alice_cash = onChainState[\"Alice Cash\"];\n                  let bob_cash = onChainState[\"Bob Cash\"];\n                  value = channel_id + '_' + count + '_' + alice_cash + '_' + bob_cash + '_default_sign';\n                  localStorage.setItem(key, value);\n                  console.log(onChainState);\n                }).catch(err => {\n                  alert(\"on chain state issue\");\n                  console.log(err);\n                });\n              }\n\n              console.log(\"active_channel_ids\", active_channel_ids);\n              console.log(\"waiting_channel_ids\", waiting_channels);\n            }\n          }).catch(err => {\n            alert(\"contract connectivity issue\");\n            console.log(err);\n          });\n        } else if (element.event === 'EventRefunded') {\n          // event EventRefunded(uint channel_id);\n          let channel_id = Number.parseInt(element.returnValues[0], 10);\n          let key = this.state.sender + 'waiting_channel_ids';\n          let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n          let index = waiting_channels.indexOf(channel_id);\n\n          if (index > -1) {\n            waiting_channels.splice(index, 1);\n            localStorage.setItem(key, JSON.stringify(waiting_channels));\n            console.log(\"waiting channels \", waiting_channels);\n            key = this.state.sender + channel_id + '_last_signed_state'; // TODO: update logice so that this will be independent from last blocked fetched\n\n            localStorage.removeItem(key);\n          }\n\n          console.log('element.returnValues', element.returnValues);\n        } else if (element.event === 'EventClosing') {\n          // event EventClosing(uint channel_id);\n          // this event means one party started channel closing action \n          // and the other needs to take action to make concensus\n          let channel_id = Number.parseInt(element.returnValues[0], 10);\n          IsMyChannel(channel_id, this.state.sender).then(result => {\n            if (result) {\n              let key = this.state.sender + 'waiting_channel_ids';\n              let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n              let index = waiting_channels.indexOf(channel_id);\n\n              if (index < 0) {\n                waiting_channels.push(channel_id);\n                localStorage.setItem(key, JSON.stringify(waiting_channels));\n              }\n\n              console.log(\"waiting_channel_ids\", waiting_channels);\n            }\n          }).catch(err => {\n            alert(\"contract connectivity issue\");\n            console.log(err);\n          });\n        } else if (element.event === 'EventClosed') {\n          // event EventClosed(uint channel_id);\n          // triggered when both parties signed closing action or \n          // one party use finalizeClose action after timeout happened\n          let channel_id = Number.parseInt(element.returnValues[0], 10);\n          IsMyChannel(channel_id, this.state.sender).then(result => {\n            if (result) {\n              let key = this.state.sender + 'active_channel_ids';\n              let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\");\n              let index = active_channel_ids.indexOf(channel_id);\n\n              if (index > -1) {\n                active_channel_ids.splice(channel_id, 1);\n                localStorage.setItem(key, JSON.stringify(active_channel_ids));\n              }\n\n              key = this.state.sender + 'waiting_channel_ids';\n              let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n              index = waiting_channels.indexOf(channel_id);\n\n              if (index > -1) {\n                waiting_channels.splice(index, 1);\n                localStorage.setItem(key, JSON.stringify(waiting_channels));\n              }\n\n              key = this.state.sender + channel_id + '_last_signed_state';\n              localStorage.removeItem(key);\n              console.log(\"active_channel_ids\", active_channel_ids);\n              console.log(\"waiting_channel_ids\", waiting_channels);\n            }\n          }).catch(err => {\n            alert(\"contract connectivity issue\");\n            console.log(err);\n          });\n        } else if (element.event === 'EventNotClosed') {// event EventNotClosed(uint channel_id);\n          // triggered when false EventClosing happened.\n        }\n      });\n    };\n\n    this.handlerEvents = async event => {\n      event.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      console.log(sender);\n\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.fetchEventFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Apply Event Filter \"))));\n  }\n\n}\n\n;\nexport default FetchContractTxn;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/FetchContractTxns.js"],"names":["React","FetchAccount","FilterEvents","IsMyChannel","GetChannelDetails","FetchContractTxn","Component","state","sender","fetchEventFilter","event","preventDefault","events","undefined","forEach","element","channel_id","then","result","catch","err","alert","console","log","returnValues","key","waiting_channels","JSON","parse","localStorage","getItem","Number","parseInt","index","indexOf","push","setItem","stringify","active_channel_ids","splice","value","onChainState","count","alice_cash","bob_cash","removeItem","handlerEvents","componentDidMount","setState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"../contract/CreateInstance\";\nimport { IsMyChannel, GetChannelDetails } from \"../contract/contract_transaction\";\n\n\nclass FetchContractTxn extends React.Component {\n    state = {\n        sender: \"\",\n    }\n\n    componentDidMount() {\n\n        FetchAccount().then(sender => {\n            console.log(sender)\n            if (sender) {\n                this.setState({ 'sender': sender })\n            }\n        })\n            .catch(err => {\n                alert(\"check metamask connectivity\")\n                console.log(err)\n            })\n    }\n\n    fetchEventFilter = async (event) => {\n        event.preventDefault();\n        let events = await FilterEvents(this.state.sender)\n\n        if (events === undefined || events === null) {\n            return\n        }\n        events.forEach(element => {\n            if (element.event === 'EventChannelInitializing') {\n                // trigered when smart-contract deployed\n                // event EventChannelInitializing(address libSig);\n                // console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0])\n            }\n            else if (element.event === 'EventInitializing') {\n                // add channel id in the waiting list\n                // triggered when new channel will be initiailized\n                // event EventInitializing(address addressAlice, address addressBob, uint channel_id);\n                IsMyChannel(channel_id, this.state.sender).then(result => {\n                }).catch(err => {\n                    alert(\"contract connectivity issue\")\n                    console.log(err)\n                })\n                if (this.state.sender === element.returnValues[0]) {\n                    let key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    let channel_id = Number.parseInt(element.returnValues[2], 10)\n                    let index = waiting_channels.indexOf(channel_id);\n                    if (index < 0) {\n                        waiting_channels.push(channel_id)\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    }\n                    console.log(\"waiting channels \", waiting_channels)\n                    // add one page for refund or add payment to channel \n                    // add channel id to waiting to confirm channel list\n                    // also verify waiting time is over or not\n                }\n                if (this.state.sender === element.returnValues[1]) {\n                    let key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    let channel_id = Number.parseInt(element.returnValues[2], 10)\n                    let index = waiting_channels.indexOf(channel_id);\n                    if (index < 0) {\n                        waiting_channels.push(channel_id)\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    }\n                    console.log(\"waiting channels \", waiting_channels)\n                }\n            }\n            else if (element.event === 'EventInitialized') {\n                // triggered when channel confirmed by both parties.\n                // console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2])\n                // event EventInitialized(uint cashAlice, uint cashBob, uint channel_id);\n                let channel_id = Number.parseInt(element.returnValues[2], 10)\n                IsMyChannel(channel_id, this.state.sender).then(result => {\n                    if (result) {\n                        let key = this.state.sender + 'active_channel_ids'\n                        let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\")\n\n                        let index = active_channel_ids.indexOf(channel_id);\n                        if (index < 0) {\n                            active_channel_ids.push(channel_id)\n                            localStorage.setItem(key, JSON.stringify(active_channel_ids));\n                            key = this.state.sender + channel_id + '_last_signed_state'\n\n                        }\n                        key = this.state.sender + 'waiting_channel_ids'\n                        let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                        index = waiting_channels.indexOf(channel_id);\n                        if (index > -1) {\n                            waiting_channels.splice(index, 1);\n                            localStorage.setItem(key, JSON.stringify(waiting_channels));\n\n                        }\n                        key = this.state.sender + channel_id + '_last_signed_state'\n                        let value = localStorage.getItem(key)\n                        if (value == null) {\n                            GetChannelDetails(channel_id).then(onChainState => {\n                                let count = 0\n                                let alice_cash = onChainState[\"Alice Cash\"]\n                                let bob_cash = onChainState[\"Bob Cash\"]\n                                value = channel_id + '_' + count + '_' + alice_cash + '_' + bob_cash + '_default_sign'\n                                localStorage.setItem(key, value)\n                                console.log(onChainState)\n                            }).catch(err => {\n                                alert(\"on chain state issue\")\n                                console.log(err)\n                            })\n                        }\n                        console.log(\"active_channel_ids\", active_channel_ids)\n                        console.log(\"waiting_channel_ids\", waiting_channels)\n                    }\n                }).catch(err => {\n                    alert(\"contract connectivity issue\")\n                    console.log(err)\n                })\n\n            }\n            else if (element.event === 'EventRefunded') {\n                // event EventRefunded(uint channel_id);\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n                let key = this.state.sender + 'waiting_channel_ids'\n                let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                let index = waiting_channels.indexOf(channel_id);\n                if (index > -1) {\n                    waiting_channels.splice(index, 1);\n                    localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    console.log(\"waiting channels \", waiting_channels)\n                    key = this.state.sender + channel_id + '_last_signed_state'\n                    // TODO: update logice so that this will be independent from last blocked fetched\n                    localStorage.removeItem(key)\n                }\n                console.log('element.returnValues', element.returnValues)\n            }\n            else if (element.event === 'EventClosing') {\n                // event EventClosing(uint channel_id);\n                // this event means one party started channel closing action \n                // and the other needs to take action to make concensus\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n                IsMyChannel(channel_id, this.state.sender).then(result => {\n                    if (result) {\n                        let key = this.state.sender + 'waiting_channel_ids'\n                        let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                        let index = waiting_channels.indexOf(channel_id);\n                        if (index < 0) {\n                            waiting_channels.push(channel_id)\n                            localStorage.setItem(key, JSON.stringify(waiting_channels));\n                        }\n                        console.log(\"waiting_channel_ids\", waiting_channels)\n                    }\n                }).catch(err => {\n                    alert(\"contract connectivity issue\")\n                    console.log(err)\n                })\n            }\n            else if (element.event === 'EventClosed') {\n                // event EventClosed(uint channel_id);\n                // triggered when both parties signed closing action or \n                // one party use finalizeClose action after timeout happened\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n                IsMyChannel(channel_id, this.state.sender).then(result => {\n                    if (result) {\n                        let key = this.state.sender + 'active_channel_ids'\n                        let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\")\n\n                        let index = active_channel_ids.indexOf(channel_id);\n                        if (index > -1) {\n                            active_channel_ids.splice(channel_id, 1)\n                            localStorage.setItem(key, JSON.stringify(active_channel_ids));\n\n                        }\n                        key = this.state.sender + 'waiting_channel_ids'\n                        let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                        index = waiting_channels.indexOf(channel_id);\n                        if (index > -1) {\n                            waiting_channels.splice(index, 1);\n                            localStorage.setItem(key, JSON.stringify(waiting_channels));\n\n                        }\n                        key = this.state.sender + channel_id + '_last_signed_state'\n                        localStorage.removeItem(key)\n                        console.log(\"active_channel_ids\", active_channel_ids)\n                        console.log(\"waiting_channel_ids\", waiting_channels)\n                    }\n                }).catch(err => {\n                    alert(\"contract connectivity issue\")\n                    console.log(err)\n                })\n            }\n            else if (element.event === 'EventNotClosed') {\n                // event EventNotClosed(uint channel_id);\n                // triggered when false EventClosing happened.\n            }\n        });\n    }\n\n    handlerEvents = async (event) => {\n        event.preventDefault();\n\n    }\n\n    render() {\n        return (\n            <>\n                <div>\n                    <p><button onClick={this.fetchEventFilter}>Apply Event Filter </button></p>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default FetchContractTxn;\n"]},"metadata":{},"sourceType":"module"}