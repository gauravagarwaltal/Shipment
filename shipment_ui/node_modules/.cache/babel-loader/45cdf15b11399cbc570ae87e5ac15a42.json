{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js\";\nimport React from 'react';\nimport { toast } from \"react-toastify\"; // import {\n//     SocketProvider,\n//     socketConnect,\n// } from 'socket.io-react';\n// import { SocketProvider } from 'socket.io-react';\n\nimport io from 'socket.io-client';\nimport RenderSubscribedDetails from './RenderSubscribedDetails';\n\nclass ClientClass extends React.Component {\n  constructor() {\n    super();\n\n    this.onUserIdChange = async event => {\n      event.preventDefault();\n      this.setState({\n        userId: event.target.value\n      });\n      localStorage.setItem('userId', event.target.value);\n    };\n\n    this.state = {\n      userId: localStorage.getItem(\"userId\") || '',\n      response: JSON.parse(localStorage.getItem(\"response\") || \"[]\"),\n      endpoint: \"http://127.0.0.1:8001/notifications\",\n      socket: ''\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint;\n    console.log(this.state.userId);\n\n    if (this.state.userId !== '') {\n      //Very simply connect to the socket\n      this.state.socket = io.connect(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n      this.state.socket.on(\"notification\", (channel, message) => {\n        console.log(\"Hello \", message);\n        this.state.response.push(message);\n        localStorage.setItem('response', JSON.stringify(this.state.response)); // this.setState({ response: this.state.response + \"\\n\" + channel + \"\\n\" + message })\n      });\n      this.state.socket.on('connected', () => {\n        var msg = \"You are now connected for push notifications\";\n        console.log(msg); // let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n        // let value = []\n        // // newValue.push(msg)\n        // localStorage.setItem('response', JSON.stringify(value));\n        // this.setState({ response: newValue })\n        // Send the user ID\n\n        this.state.socket.emit('join', this.state.userId);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    let value = [];\n    localStorage.setItem('response', JSON.stringify(value));\n    this.state.socket.close();\n  }\n\n  onDeleteClick(value) {\n    console.log(\"value\");\n\n    for (var i = 0; i < this.state.response; i++) {\n      if (this.state.response[i] === value) {\n        this.state.response.splice(i, 1);\n      }\n    }\n\n    localStorage.setItem('response', JSON.stringify(this.state.response));\n    console.log(\"sss\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"script\", {\n      src: \"/socket.io/socket.io.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"script\", {\n      src: \"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      id: \"idForm\",\n      onSubmit: this.state.componentDidMount,\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"User ID: \", React.createElement(\"input\", {\n      id: \"userId\",\n      type: \"text\",\n      onChange: this.onUserIdChange,\n      name: \"userId\",\n      className: \"form-control\",\n      value: this.state.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"formButton\",\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Messages from Subscribed channel ->'\", this.state.userId, \"':\"), React.createElement(\"table\", {\n      id: \"table\",\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Type\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"value\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, Object.keys(this.state.response).map(request => {\n      return React.createElement(\"tr\", {\n        key: request,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-danger\",\n        onClick: () => this.state.onDeleteClick(request[request]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"CreateChannel\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"props.details[request].count\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"props.details[request].A_Cash\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"props.details[request].B_Cash\"));\n    }))), React.createElement(RenderSubscribedDetails, {\n      details: this.state.response,\n      handleDeleteClick: this.state.onDeleteClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ClientClass;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/SocketApi/Client.js"],"names":["React","toast","io","RenderSubscribedDetails","ClientClass","Component","constructor","onUserIdChange","event","preventDefault","setState","userId","target","value","localStorage","setItem","state","getItem","response","JSON","parse","endpoint","socket","componentDidMount","console","log","connect","on","channel","message","push","stringify","msg","emit","componentWillUnmount","close","onDeleteClick","i","splice","render","textAlign","Object","keys","map","request"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { toast } from \"react-toastify\";\n// import {\n//     SocketProvider,\n//     socketConnect,\n// } from 'socket.io-react';\n\n// import { SocketProvider } from 'socket.io-react';\nimport io from 'socket.io-client';\nimport RenderSubscribedDetails from './RenderSubscribedDetails';\n\nclass ClientClass extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            userId: localStorage.getItem(\"userId\") || '',\n            response: JSON.parse(localStorage.getItem(\"response\") || \"[]\"),\n            endpoint: \"http://127.0.0.1:8001/notifications\",\n            socket: ''\n        };\n    }\n\n    componentDidMount() {\n        const { endpoint } = this.state;\n        console.log(this.state.userId)\n        if (this.state.userId !== '') {\n            //Very simply connect to the socket\n            this.state.socket = io.connect(endpoint);\n            //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n            this.state.socket.on(\"notification\", (channel, message) => {\n                console.log(\"Hello \", message)\n                this.state.response.push(message)\n                localStorage.setItem('response', JSON.stringify(this.state.response));\n                // this.setState({ response: this.state.response + \"\\n\" + channel + \"\\n\" + message })\n            });\n            this.state.socket.on('connected', () => {\n                var msg = \"You are now connected for push notifications\";\n                console.log(msg);\n                // let newValue = JSON.parse(localStorage.getItem(\"response\") || \"[]\")\n                // let value = []\n                // // newValue.push(msg)\n                // localStorage.setItem('response', JSON.stringify(value));\n                // this.setState({ response: newValue })\n                // Send the user ID\n                this.state.socket.emit('join', this.state.userId);\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        let value = []\n        localStorage.setItem('response', JSON.stringify(value));\n        this.state.socket.close();\n    }\n\n    onUserIdChange = async (event) => {\n        event.preventDefault();\n        this.setState({ userId: event.target.value })\n        localStorage.setItem('userId', event.target.value);\n    }\n\n    onDeleteClick(value) {\n        console.log(\"value\")\n        for (var i = 0; i < this.state.response; i++) {\n            if (this.state.response[i] === value) {\n                this.state.response.splice(i, 1);\n            }\n        }\n        localStorage.setItem('response', JSON.stringify(this.state.response));\n        console.log(\"sss\")\n    }\n\n    render() {\n        return (\n            <div style={{ textAlign: \"center\" }}>\n                <script src=\"/socket.io/socket.io.js\"></script>\n                <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n\n                <form id=\"idForm\" onSubmit={this.state.componentDidMount} action=\"\">\n                    User ID: <input\n                        id=\"userId\"\n                        type=\"text\"\n                        onChange={this.onUserIdChange}\n                        name=\"userId\"\n                        className=\"form-control\"\n                        value={this.state.userId}\n                    /><br />\n                    <input id=\"formButton\" type=\"submit\" value=\"Submit\" />\n                </form>\n                <h2>Messages from Subscribed channel ->'{this.state.userId}':</h2>\n                <table id=\"table\" className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>Type</th>\n                            <th>value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            Object.keys(this.state.response).map(request => {\n                                return (\n                                    <tr key={request}>\n                                        <td>\n                                            <button\n                                                className=\"btn btn-outline-danger\"\n                                                onClick={() => this.state.onDeleteClick(request[request])}\n                                            >\n                                                CreateChannel\n                                </button>\n                                        </td>\n                                        <td></td>\n                                        <td>props.details[request].count</td>\n                                        <td>props.details[request].A_Cash</td>\n                                        <td>props.details[request].B_Cash</td>\n                                    </tr>\n                                )\n\n                            }\n                            )\n                        }\n                    </tbody>\n                </table>\n                <RenderSubscribedDetails details={this.state.response} handleDeleteClick={this.state.onDeleteClick} />\n            </div>\n        )\n    }\n}\n\nexport default ClientClass;"]},"metadata":{},"sourceType":"module"}