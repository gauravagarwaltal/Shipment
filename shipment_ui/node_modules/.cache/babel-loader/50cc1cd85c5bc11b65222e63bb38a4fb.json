{"ast":null,"code":"'use strict';\n\nconst _require = require('util'),\n      promisify = _require.promisify;\n\nconst path = require('path');\n\nconst fs = require('graceful-fs');\n\nconst writeFileAtomic = require('write-file-atomic');\n\nconst sortKeys = require('sort-keys');\n\nconst makeDir = require('make-dir');\n\nconst detectIndent = require('detect-indent');\n\nconst isPlainObj = require('is-plain-obj');\n\nconst readFile = promisify(fs.readFile);\n\nconst hasTrailingNewline = file => /\\n$/.test(file);\n\nconst init = (fn, filePath, data, options) => {\n  if (!filePath) {\n    throw new TypeError('Expected a filepath');\n  }\n\n  if (data === undefined) {\n    throw new TypeError('Expected data to stringify');\n  }\n\n  options = {\n    indent: '\\t',\n    sortKeys: false,\n    ...options\n  };\n\n  if (options.sortKeys && isPlainObj(data)) {\n    data = sortKeys(data, {\n      deep: true,\n      compare: typeof options.sortKeys === 'function' ? options.sortKeys : undefined\n    });\n  }\n\n  return fn(filePath, data, options);\n};\n\nconst main = async (filePath, data, options) => {\n  let indent = options.indent;\n  let trailingNewline = '\\n';\n\n  try {\n    const file = await readFile(filePath, 'utf8');\n\n    if (!hasTrailingNewline(file)) {\n      trailingNewline = '';\n    }\n\n    if (options.detectIndent) {\n      indent = detectIndent(file).indent;\n    }\n  } catch (error) {\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n\n  const json = JSON.stringify(data, options.replacer, indent);\n  return writeFileAtomic(filePath, \"\".concat(json).concat(trailingNewline), {\n    mode: options.mode\n  });\n};\n\nconst mainSync = (filePath, data, options) => {\n  let indent = options.indent;\n  let trailingNewline = '\\n';\n\n  try {\n    const file = fs.readFileSync(filePath, 'utf8');\n\n    if (!hasTrailingNewline(file)) {\n      trailingNewline = '';\n    }\n\n    if (options.detectIndent) {\n      indent = detectIndent(file).indent;\n    }\n  } catch (error) {\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n\n  const json = JSON.stringify(data, options.replacer, indent);\n  return writeFileAtomic.sync(filePath, \"\".concat(json).concat(trailingNewline), {\n    mode: options.mode\n  });\n};\n\nmodule.exports = async (filePath, data, options) => {\n  await makeDir(path.dirname(filePath), {\n    fs\n  });\n  return init(main, filePath, data, options);\n};\n\nmodule.exports.sync = (filePath, data, options) => {\n  makeDir.sync(path.dirname(filePath), {\n    fs\n  });\n  init(mainSync, filePath, data, options);\n};","map":null,"metadata":{},"sourceType":"script"}