{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/AboutPage.js\";\nimport React from \"react\"; // import { GetReceipt } from \"./contract/contract_transaction\";\n\nclass AboutPage extends React.Component {\n  // componentDidMount() {\n  //   GetReceipt().then(sender => {\n  //     console.log(sender)\n  //   }).catch(err => {\n  //     alert(\"check metamask connectivity\")\n  //     console.log(err)\n  //   })\n  // }\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"About\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"This app uses React.\"));\n  }\n\n}\n\nexport default AboutPage;\n/*\nlocal storage management\n\nlast fetched block(on chain ethereum block) ->\n    let key = this.state.sender + '_last_fetched_block'\n\nactive channel id ->\n    let key = this.state.sender + 'active_channel_ids'\n\nwaiting channel id ->\n    let key = this.state.sender + 'waiting_channel_ids'\n\nlast signed state ->\n    let key = this.state.sender + <channel_id> + '_last_signed_state'\n\n    add contract_address when possible\n    because it can be exploitted between different instance of this contract\n    state structure -> Channel_id(number), Count(number), Alice_Cash(number), Bob_Cash(number), Signature(string wiht 0x)\n    local storage -> all values will be concat using '_'\n\n\nAll latest update made by the application list\n  all event by handler, state requested and state response are  added by all respective actions\n  and can be deleted by the <sender> only in local storage\n  just for information kind of list\n    let key = this.state.sender + '_updates'\n    */","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/AboutPage.js"],"names":["React","AboutPage","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACP,WACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFF,CADF;AAOD;;AAnBqC;;AAsBxC,eAAeF,SAAf;AAEA","sourcesContent":["import React from \"react\";\n// import { GetReceipt } from \"./contract/contract_transaction\";\n\nclass AboutPage extends React.Component {\n\n  // componentDidMount() {\n  //   GetReceipt().then(sender => {\n  //     console.log(sender)\n  //   }).catch(err => {\n  //     alert(\"check metamask connectivity\")\n  //     console.log(err)\n  //   })\n  // }\n\n  render() {\n    return (\n      <>\n        <h2>About</h2>\n        <p>This app uses React.</p>\n\n      </>\n    );\n  }\n}\n\nexport default AboutPage;\n\n/*\nlocal storage management\n\nlast fetched block(on chain ethereum block) ->\n    let key = this.state.sender + '_last_fetched_block'\n\nactive channel id ->\n    let key = this.state.sender + 'active_channel_ids'\n\nwaiting channel id ->\n    let key = this.state.sender + 'waiting_channel_ids'\n\nlast signed state ->\n    let key = this.state.sender + <channel_id> + '_last_signed_state'\n\n    add contract_address when possible\n    because it can be exploitted between different instance of this contract\n    state structure -> Channel_id(number), Count(number), Alice_Cash(number), Bob_Cash(number), Signature(string wiht 0x)\n    local storage -> all values will be concat using '_'\n\n\nAll latest update made by the application list\n  all event by handler, state requested and state response are  added by all respective actions\n  and can be deleted by the <sender> only in local storage\n  just for information kind of list\n    let key = this.state.sender + '_updates'\n    */\n"]},"metadata":{},"sourceType":"module"}