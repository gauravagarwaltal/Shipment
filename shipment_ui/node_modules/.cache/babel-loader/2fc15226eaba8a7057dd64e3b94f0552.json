{"ast":null,"code":"const axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5002';\n\nconst FetchRequests = async (address, request_type) => {\n  try {\n    var bodyFormData = new FormData(); // bodyFormData.set('channel_id', channelId);\n\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/fetch_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return resp.data;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst SetRequest = async (address, request_type, request_data) => {\n  try {\n    var bodyFormData = new FormData(); // bodyFormData.set('channel_id', channelId);\n\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/set_request',\n      data: bodyFormData\n    }); // if (resp.status === 200) {\n    //     return [200, resp.data];\n    // }\n\n    return [resp.status, resp.data];\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n    return [500, \"Redis connectivity issue\"];\n  }\n};\n\nconst UpdateRequest = async (address, request_type, index, request_data) => {\n  try {\n    var bodyFormData = new FormData(); // bodyFormData.set('channel_id', channelId);\n\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('index', index);\n    bodyFormData.set('request_data', request_data);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/update_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst DeleteRequest = async (address, request_type, index) => {\n  try {\n    var bodyFormData = new FormData(); // bodyFormData.set('channel_id', channelId);\n\n    bodyFormData.set('address', address);\n    bodyFormData.set('request_type', request_type);\n    bodyFormData.set('index', index);\n    const resp = await axios({\n      method: 'post',\n      url: RedisHandlerURL + '/delete_request',\n      data: bodyFormData\n    });\n\n    if (resp.status === 200) {\n      return resp.data;\n    }\n\n    return null;\n  } catch (error) {\n    console.log(\"Redis connectivity issue\");\n    console.log(error);\n  }\n};\n\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest };","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/redisApi/GetSetData.js"],"names":["axios","require","RedisHandlerURL","FetchRequests","address","request_type","bodyFormData","FormData","set","resp","method","url","data","status","error","console","log","SetRequest","request_data","UpdateRequest","index","DeleteRequest"],"mappings":"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","sourcesContent":["const axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5002';\n\nconst FetchRequests = async (address, request_type) => {\n    try {\n        var bodyFormData = new FormData();\n        // bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/fetch_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return resp.data;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst SetRequest = async (address, request_type, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        // bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/set_request',\n            data: bodyFormData\n        })\n        // if (resp.status === 200) {\n        //     return [200, resp.data];\n        // }\n        return [resp.status, resp.data];\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n        return [500, \"Redis connectivity issue\"];\n    }\n}\n\nconst UpdateRequest = async (address, request_type, index, request_data) => {\n    try {\n        var bodyFormData = new FormData();\n        // bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('index', index);\n        bodyFormData.set('request_data', request_data);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/update_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst DeleteRequest = async (address, request_type, index) => {\n    try {\n        var bodyFormData = new FormData();\n        // bodyFormData.set('channel_id', channelId);\n        bodyFormData.set('address', address);\n        bodyFormData.set('request_type', request_type);\n        bodyFormData.set('index', index);\n        const resp = await axios({\n            method: 'post',\n            url: RedisHandlerURL + '/delete_request',\n            data: bodyFormData\n        })\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        return null;\n    } catch (error) {\n        console.log(\"Redis connectivity issue\")\n        console.log(error)\n    }\n}\n\nexport { FetchRequests, SetRequest, UpdateRequest, DeleteRequest };"]},"metadata":{},"sourceType":"module"}