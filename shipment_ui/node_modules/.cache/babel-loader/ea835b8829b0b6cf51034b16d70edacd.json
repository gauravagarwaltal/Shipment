{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/contract/contract_transaction.js\";\nimport React from 'react'; // import { Tx } from \"ethereumjs-tx\";\n\nimport { contract_address, contract_abi } from \"./contract_config\"; // import { Web3 } from \"web3\";\n\nimport { aliceAddress } from \"./wallet\";\nimport { checkMetaMask, getAccount } from '../components/MetaMask'; // const Tx = require('ethereumjs-tx')\n\nconst Web3 = require('web3'); // const web3 = new Web3(new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")))\n\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nconst sideChainContract = new web3.eth.Contract(contract_abi, contract_address);\n\nconst fetchAccount = async () => {\n  let accounts = await web3.eth.getAccounts();\n  console.log(accounts[0]);\n  return web3.utils.toChecksumAddress(accounts[0]);\n};\n\nconst GetChannelDetails = async channelId => {\n  console.log(channelId); // function startExit( bytes prevTx, bytes prevTxProof, uint prevTxBlkNum, bytes tx, bytes txProof, uint txBlkNum)\n\n  try {\n    var details = await sideChainContract.methods.getChannel(channelId).call();\n    console.log('Alice', details['alice']['id'], details['alice']['cash'], details['alice']['waitForInput']);\n    console.log('Bob', details['bob']['id'], details['bob']['cash'], details['bob']['waitForInput']);\n    console.log('timeout', details['timeout']);\n    console.log('status', details['status']);\n    console.log('lastCount', details['publish_tx_count']);\n    console.log('Money', details['money']);\n    let details_div = \"\";\n    details_div = 'Alice ' + details['alice']['id'] + ' ' + details['alice']['cash'] + ' ' + details['alice']['waitForInput'] + '\\n';\n    details_div += 'Bob ' + details['bob']['id'] + ' ' + details['bob']['cash'] + ' ' + details['bob']['waitForInput'] + '\\n';\n    details_div += 'timeout ' + details['timeout'] + '\\n';\n    details_div += 'status ' + details['status'] + '\\n';\n    details_div += 'lastCount ' + details['publish_tx_count'] + '\\n';\n    details_div += 'Money ' + details['money'] + '\\n';\n    console.log(details_div);\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n  console.log(web3.utils.toChecksumAddress('0xbA886b598e75CD3526F789c8D58B95464e778387'));\n\n  try {\n    var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty)).send({\n      from: fetchAccount,\n      gas: 200000\n    });\n    console.log('new channel created, txHash->', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Open Channel request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelConfirm = async (channelId, self, cash) => {\n  try {\n    var txHash = await sideChainContract.methods.confirm(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      value: web3.utils.toHex(web3.utils.toWei(cash, 'gwei')),\n      gas: 200000\n    });\n    console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Deposit request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelRefund = async (channelId, self) => {\n  try {\n    var txHash = await sideChainContract.methods.refund(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Refund request reverted\");\n    console.log(error);\n  }\n};\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n  try {\n    var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call();\n    console.log('isValidSignature ', flag);\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\");\n    console.log(error);\n  }\n};\n\nconst ChannelFinalizeClose = async (channelId, self) => {\n  try {\n    var txHash = await sideChainContract.methods.finalizeClose(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Closed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel finalizeClose request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n  try {\n    var txHash = await sideChainContract.methods.close(channel_id, count, sender_balance, recipient_balance, signature).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Close request proceed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Closed request reverted\");\n    console.log(error);\n  }\n};\n\nconst Channel = () => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"App-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: ChannelConfirm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \" Channel confirm\"), \" \", React.createElement(\"button\", {\n    onClick: GetChannelDetails,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \" ShowDetails\"), \" \", React.createElement(\"button\", {\n    onClick: fetchAccount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \" MetaMask\")));\n};\n\nexport { GetChannelDetails, CreateNewChannel, ChannelConfirm, ChannelRefund, IsValidSignature, ChannelFinalizeClose, ChannelClose, Channel };","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/contract/contract_transaction.js"],"names":["React","contract_address","contract_abi","aliceAddress","checkMetaMask","getAccount","Web3","require","web3","givenProvider","sideChainContract","eth","Contract","fetchAccount","accounts","getAccounts","console","log","utils","toChecksumAddress","GetChannelDetails","channelId","details","methods","getChannel","call","details_div","error","CreateNewChannel","theOtherParty","txHash","openChannel","send","from","gas","transactionHash","ChannelConfirm","self","cash","confirm","value","toHex","toWei","ChannelRefund","refund","IsValidSignature","addr","count","sender_balance","recipient_balance","signature","flag","isValidSignature","ChannelFinalizeClose","finalizeClose","ChannelClose","channel_id","close","Channel"],"mappings":"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","sourcesContent":["import React from 'react';\n// import { Tx } from \"ethereumjs-tx\";\nimport { contract_address, contract_abi } from \"./contract_config\";\n// import { Web3 } from \"web3\";\nimport { aliceAddress } from \"./wallet\";\nimport { checkMetaMask, getAccount } from '../components/MetaMask';\n\n\n// const Tx = require('ethereumjs-tx')\nconst Web3 = require('web3')\n// const web3 = new Web3(new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")))\n\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n\nconst sideChainContract = new web3.eth.Contract(contract_abi, contract_address)\n\nconst fetchAccount = async () => {\n    let accounts = await web3.eth.getAccounts()\n    console.log(accounts[0])\n    return web3.utils.toChecksumAddress(accounts[0])\n}\n\nconst GetChannelDetails = async (channelId) => {\n    console.log(channelId)\n    // function startExit( bytes prevTx, bytes prevTxProof, uint prevTxBlkNum, bytes tx, bytes txProof, uint txBlkNum)\n    try {\n        var details = await sideChainContract.methods.getChannel(channelId).call()\n        console.log('Alice', details['alice']['id'], details['alice']['cash'], details['alice']['waitForInput']);\n        console.log('Bob', details['bob']['id'], details['bob']['cash'], details['bob']['waitForInput']);\n        console.log('timeout', details['timeout']);\n        console.log('status', details['status']);\n        console.log('lastCount', details['publish_tx_count']);\n        console.log('Money', details['money']);\n        let details_div = \"\"\n        details_div = 'Alice ' + details['alice']['id'] + ' ' + details['alice']['cash'] + ' ' + details['alice']['waitForInput'] + '\\n';\n        details_div += 'Bob ' + details['bob']['id'] + ' ' + details['bob']['cash'] + ' ' + details['bob']['waitForInput'] + '\\n';\n        details_div += 'timeout ' + details['timeout'] + '\\n';\n        details_div += 'status ' + details['status'] + '\\n';\n        details_div += 'lastCount ' + details['publish_tx_count'] + '\\n';\n        details_div += 'Money ' + details['money'] + '\\n';\n        console.log(details_div)\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n    console.log(web3.utils.toChecksumAddress('0xbA886b598e75CD3526F789c8D58B95464e778387'))\n    try {\n        var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty))\n            .send({ from: fetchAccount, gas: 200000 })\n        console.log('new channel created, txHash->', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Open Channel request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelConfirm = async (channelId, self, cash) => {\n    try {\n        var txHash = await sideChainContract.methods.confirm(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), value: web3.utils.toHex(web3.utils.toWei(cash, 'gwei')), gas: 200000 })\n        console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Deposit request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelRefund = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.refund(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Refund request reverted\")\n        console.log(error)\n    }\n}\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n    try {\n        var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call()\n        console.log('isValidSignature ', flag);\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\")\n        console.log(error)\n    }\n}\n\nconst ChannelFinalizeClose = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.finalizeClose(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Closed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel finalizeClose request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelClose = async (channel_id, count, sender_balance, recipient_balance, signature, self) => {\n    try {\n        var txHash = await sideChainContract.methods.close(channel_id, count, sender_balance, recipient_balance, signature)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Close request proceed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Closed request reverted\")\n        console.log(error)\n    }\n}\n\nconst Channel = () => {\n    return (\n        <div>\n            <div className=\"App-content\">\n                <button onClick={ChannelConfirm}> Channel confirm</button>\n                {\" \"}\n                <button onClick={GetChannelDetails}> ShowDetails</button>\n                {\" \"}\n                <button onClick={fetchAccount}> MetaMask</button>\n            </div>\n        </div >\n    );\n\n};\n\n\nexport { GetChannelDetails, CreateNewChannel, ChannelConfirm, ChannelRefund, IsValidSignature, ChannelFinalizeClose, ChannelClose, Channel }"]},"metadata":{},"sourceType":"module"}