{"ast":null,"code":"const axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5002';\n\nconst GetChannelDetails = async channelId => {\n  try {\n    var bodyFormData = new FormData();\n    bodyFormData.set('count', this.state.count);\n    bodyFormData.set('sender_bal', this.state.sender_bal);\n    bodyFormData.set('recipient_bal', this.state.recipient_bal);\n    bodyFormData.set('pub_add', this.props.address);\n    bodyFormData.set('rec_add', config.get('CLIENT_URL'));\n    const resp = await axios({\n      method: 'post',\n      url: config.get('SERVER_URL') + '/request_state_change',\n      data: bodyFormData\n    });\n\n    if (resp.data === true) {\n      this.props.onSubmit(true);\n    }\n\n    var details = await sideChainContract.methods.getChannel(channelId).call();\n    let details_div = {\n      'Alice Id': details['alice']['id'],\n      'Alice Cash': details['alice']['cash'],\n      'Alice Input Flag': String(details['alice']['waitForInput']),\n      'Bob Id': details['bob']['id'],\n      'Bob Cash': details['bob']['cash'],\n      'Bob Input Flag': String(details['bob']['waitForInput']),\n      'Timeout': details['timeout'],\n      'Status': details['status'],\n      'Published Tx Count': details['publish_tx_count'],\n      'Money': details['money']\n    };\n    return details_div;\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue\");\n    console.log(error);\n  }\n};\n\nconst ChannelExists = async channelId => {\n  let details = await GetChannelDetails(channelId);\n  return /^0x0+$/.test(details['Alice Id']);\n};\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n  const sender = await FetchAccount();\n  console.log(sender, web3.utils.checkAddressChecksum(sender));\n\n  try {\n    var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty)).send({\n      from: web3.utils.toChecksumAddress(sender),\n      gas: 200000\n    });\n    console.log('new channel created, txHash->', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Open Channel request reverted\");\n    console.log(error);\n  }\n};\n\nconst ChannelConfirm = async (channelId, cash) => {\n  try {\n    const sender = await FetchAccount();\n    let flag = await ChannelExists(channelId);\n\n    if (flag) {\n      toast.error(\"Channel with \".concat(channelId, \" doesn't exists\"));\n    } else {\n      var txHash = await sideChainContract.methods.confirm(channelId).send({\n        from: web3.utils.toChecksumAddress(sender),\n        value: web3.utils.toHex(web3.utils.toWei(cash, 'wei')),\n        gas: 200000\n      });\n      console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n      toast.success(\"Deposit confirmed\");\n    }\n  } catch (error) {\n    console.log(\"Channel Deposit request reverted\");\n    console.log(error);\n    toast.error(\"Deposit Declined for Channel Id \".concat(channelId));\n  }\n};\n\nconst ChannelRefund = async (channelId, self) => {\n  try {\n    var txHash = await sideChainContract.methods.refund(channelId).send({\n      from: web3.utils.toChecksumAddress(self),\n      gas: 200000\n    });\n    console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n  } catch (error) {\n    console.log(\"Channel Refund request reverted\");\n    console.log(error);\n  }\n};\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n  try {\n    addr = web3.utils.toChecksumAddress(addr);\n    var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call();\n    console.log('isValidSignature ', flag);\n  } catch (error) {\n    console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\");\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/redisApi/GetSetData.js"],"names":["axios","require","RedisHandlerURL","GetChannelDetails","channelId","bodyFormData","FormData","set","state","count","sender_bal","recipient_bal","props","address","config","get","resp","method","url","data","onSubmit","details","sideChainContract","methods","getChannel","call","details_div","String","error","console","log","ChannelExists","test","CreateNewChannel","theOtherParty","sender","FetchAccount","web3","utils","checkAddressChecksum","txHash","openChannel","toChecksumAddress","send","from","gas","transactionHash","ChannelConfirm","cash","flag","toast","confirm","value","toHex","toWei","success","ChannelRefund","self","refund","IsValidSignature","addr","sender_balance","recipient_balance","signature","isValidSignature"],"mappings":"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","sourcesContent":["const axios = require('axios');\n\nconst RedisHandlerURL = 'http://localhost:5002';\n\nconst GetChannelDetails = async (channelId) => {\n    try {\n        var bodyFormData = new FormData();\n        bodyFormData.set('count', this.state.count);\n        bodyFormData.set('sender_bal', this.state.sender_bal);\n        bodyFormData.set('recipient_bal', this.state.recipient_bal);\n        bodyFormData.set('pub_add', this.props.address);\n        bodyFormData.set('rec_add', config.get('CLIENT_URL'));\n        const resp = await axios({\n            method: 'post',\n            url: config.get('SERVER_URL') + '/request_state_change',\n            data: bodyFormData\n        })\n        if (resp.data === true) {\n            this.props.onSubmit(true);\n        }\n        var details = await sideChainContract.methods.getChannel(channelId).call()\n        let details_div = {\n            'Alice Id': details['alice']['id'],\n            'Alice Cash': details['alice']['cash'],\n            'Alice Input Flag': String(details['alice']['waitForInput']),\n            'Bob Id': details['bob']['id'],\n            'Bob Cash': details['bob']['cash'],\n            'Bob Input Flag': String(details['bob']['waitForInput']),\n            'Timeout': details['timeout'],\n            'Status': details['status'],\n            'Published Tx Count': details['publish_tx_count'],\n            'Money': details['money']\n        }\n        return details_div;\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue\")\n        console.log(error)\n    }\n}\n\nconst ChannelExists = async (channelId) => {\n    let details = await GetChannelDetails(channelId)\n    return /^0x0+$/.test(details['Alice Id']);\n}\n\nconst CreateNewChannel = async (channelId, theOtherParty) => {\n    const sender = await FetchAccount()\n    console.log(sender, web3.utils.checkAddressChecksum(sender))\n    try {\n        var txHash = await sideChainContract.methods.openChannel(channelId, web3.utils.toChecksumAddress(theOtherParty))\n            .send({ from: web3.utils.toChecksumAddress(sender), gas: 200000 })\n        console.log('new channel created, txHash->', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Open Channel request reverted\")\n        console.log(error)\n    }\n}\n\nconst ChannelConfirm = async (channelId, cash) => {\n    try {\n        const sender = await FetchAccount()\n        let flag = await ChannelExists(channelId)\n        if (flag) {\n            toast.error(`Channel with ${channelId} doesn't exists`)\n        } else {\n            var txHash = await sideChainContract.methods.confirm(channelId)\n                .send({ from: web3.utils.toChecksumAddress(sender), value: web3.utils.toHex(web3.utils.toWei(cash, 'wei')), gas: 200000 })\n            console.log('Channel Deposit Confirmed. txHash-> ', txHash.transactionHash);\n            toast.success(\"Deposit confirmed\")\n        }\n    } catch (error) {\n        console.log(\"Channel Deposit request reverted\")\n        console.log(error)\n        toast.error(`Deposit Declined for Channel Id ${channelId}`)\n    }\n}\n\nconst ChannelRefund = async (channelId, self) => {\n    try {\n        var txHash = await sideChainContract.methods.refund(channelId)\n            .send({ from: web3.utils.toChecksumAddress(self), gas: 200000 })\n        console.log('Channel Refund Confirmed. txHash-> ', txHash.transactionHash);\n    } catch (error) {\n        console.log(\"Channel Refund request reverted\")\n        console.log(error)\n    }\n}\n\nconst IsValidSignature = async (addr, count, sender_balance, recipient_balance, signature) => {\n    try {\n        addr = web3.utils.toChecksumAddress(addr)\n        var flag = await sideChainContract.methods.isValidSignature(addr, count, sender_balance, recipient_balance, signature).call()\n        console.log('isValidSignature ', flag);\n    } catch (error) {\n        console.log(\"contract details are tempered or connectivity issue or invalid arguments passed\")\n        console.log(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}