{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/FetchContractTxns.js\";\nimport React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"../contract/CreateInstance\";\nimport { IsMyChannel, GetChannelDetails } from \"../contract/contract_transaction\";\n\nclass FetchContractTxn extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sender: \"\"\n    };\n\n    this.fetchEventFilter = async event => {\n      event.preventDefault();\n      let events = await FilterEvents(this.state.sender);\n\n      if (events === undefined || events === null) {\n        return;\n      }\n\n      events.forEach(element => {\n        if (element.event === 'EventChannelInitializing') {// trigered when smart-contract deployed\n          // event EventChannelInitializing(address libSig);\n          // console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0])\n        } else if (element.event === 'EventInitializing') {\n          // triggered when new channel will be initiailized\n          // event EventInitializing(address addressAlice, address addressBob, uint channel_id);\n          if (this.state.sender === element.returnValues[0]) {\n            let key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            let channel_id = Number.parseInt(element.returnValues[2], 10);\n            let index = waiting_channels.indexOf(channel_id);\n\n            if (index < 0) {\n              waiting_channels.push(channel_id);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n            }\n\n            console.log(\"waiting channels \", waiting_channels); // add one page for refund or add payment to channel \n            // add channel id to waiting to confirm channel list\n            // also verify waiting time is over or not\n          }\n\n          if (this.state.sender === element.returnValues[1]) {\n            let key = this.state.sender + 'waiting_channel_ids';\n            let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n            let channel_id = Number.parseInt(element.returnValues[2], 10);\n            let index = waiting_channels.indexOf(channel_id);\n\n            if (index < 0) {\n              waiting_channels.push(channel_id);\n              localStorage.setItem(key, JSON.stringify(waiting_channels));\n            }\n\n            console.log(\"waiting channels \", waiting_channels);\n          }\n        } else if (element.event === 'EventInitialized') {\n          // triggered when channel confirmed by both parties.\n          // console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2])\n          // event EventInitialized(uint cashAlice, uint cashBob, uint channel_id);\n          let channel_id = Number.parseInt(element.returnValues[2], 10);\n          IsMyChannel(channel_id, this.state.sender).then(result => {\n            if (result) {\n              let key = this.state.sender + 'active_channel_ids';\n              let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\");\n              let index = active_channel_ids.indexOf(channel_id);\n\n              if (index < 0) {\n                active_channel_ids.push(channel_id);\n                localStorage.setItem(key, JSON.stringify(active_channel_ids));\n                key = this.state.sender + channel_id + '_last_signed_state';\n              }\n\n              key = this.state.sender + 'waiting_channel_ids';\n              let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n              index = waiting_channels.indexOf(channel_id);\n\n              if (index > -1) {\n                waiting_channels.splice(index, 1);\n                localStorage.setItem(key, JSON.stringify(waiting_channels));\n              }\n\n              key = this.state.sender + channel_id + '_last_signed_state';\n              let value = localStorage.getItem(key);\n\n              if (value == null) {\n                GetChannelDetails(channel_id).then(onChainState => {\n                  let count = 0;\n                  let alice_cash = onChainState[\"Alice Cash\"];\n                  let bob_cash = onChainState[\"Bob Cash\"];\n                  value = channel_id + '_' + count + '_' + alice_cash + '_' + bob_cash + '_default_sign';\n                  localStorage.setItem(key, value);\n                  console.log(onChainState);\n                }).catch(err => {\n                  alert(\"on chain state issue\");\n                  console.log(err);\n                });\n              }\n\n              console.log(\"active_channel_ids\", active_channel_ids);\n              console.log(\"waiting_channel_ids\", waiting_channels);\n            }\n          }).catch(err => {\n            alert(\"contract connectivity issue\");\n            console.log(err);\n          });\n        } else if (element.event === 'EventRefunded') {\n          // event EventRefunded(uint channel_id);\n          let channel_id = Number.parseInt(element.returnValues[0], 10);\n          let key = this.state.sender + 'waiting_channel_ids';\n          let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\");\n          let index = waiting_channels.indexOf(channel_id);\n\n          if (index > -1) {\n            waiting_channels.splice(index, 1);\n            localStorage.setItem(key, JSON.stringify(waiting_channels));\n            console.log(\"waiting channels \", waiting_channels);\n            key = this.state.sender + channel_id + '_last_signed_state'; // TODO: update logice so that this will be independent from last blocked fetched\n\n            localStorage.removeItem(key);\n          }\n\n          console.log('element.returnValues', element.returnValues);\n        } else if (element.event === 'EventClosing') {// event EventClosing(uint channel_id);\n        } else if (element.event === 'EventClosed') {// event EventClosed(uint channel_id);\n        } else if (element.event === 'EventNotClosed') {// event EventNotClosed(uint channel_id);\n        }\n      });\n    };\n\n    this.handlerEvents = async event => {\n      event.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      console.log(sender);\n\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.fetchEventFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Apply Event Filter \"))));\n  }\n\n}\n\n;\nexport default FetchContractTxn;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/FetchContractTxns.js"],"names":["React","FetchAccount","FilterEvents","IsMyChannel","GetChannelDetails","FetchContractTxn","Component","state","sender","fetchEventFilter","event","preventDefault","events","undefined","forEach","element","returnValues","key","waiting_channels","JSON","parse","localStorage","getItem","channel_id","Number","parseInt","index","indexOf","push","setItem","stringify","console","log","then","result","active_channel_ids","splice","value","onChainState","count","alice_cash","bob_cash","catch","err","alert","removeItem","handlerEvents","componentDidMount","setState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\nimport FilterEvents from \"../contract/CreateInstance\";\nimport { IsMyChannel, GetChannelDetails } from \"../contract/contract_transaction\";\n\n\nclass FetchContractTxn extends React.Component {\n    state = {\n        sender: \"\",\n    }\n\n    componentDidMount() {\n\n        FetchAccount().then(sender => {\n            console.log(sender)\n            if (sender) {\n                this.setState({ 'sender': sender })\n            }\n        })\n            .catch(err => {\n                alert(\"check metamask connectivity\")\n                console.log(err)\n            })\n    }\n\n    fetchEventFilter = async (event) => {\n        event.preventDefault();\n        let events = await FilterEvents(this.state.sender)\n\n        if (events === undefined || events === null) {\n            return\n        }\n        events.forEach(element => {\n            if (element.event === 'EventChannelInitializing') {\n                // trigered when smart-contract deployed\n                // event EventChannelInitializing(address libSig);\n                // console.log(\"Mutli channel contract initiaized using Signature Lib at \", element.returnValues[0])\n            }\n            else if (element.event === 'EventInitializing') {\n                // triggered when new channel will be initiailized\n                // event EventInitializing(address addressAlice, address addressBob, uint channel_id);\n                if (this.state.sender === element.returnValues[0]) {\n                    let key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    let channel_id = Number.parseInt(element.returnValues[2], 10)\n                    let index = waiting_channels.indexOf(channel_id);\n                    if (index < 0) {\n                        waiting_channels.push(channel_id)\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    }\n                    console.log(\"waiting channels \", waiting_channels)\n                    // add one page for refund or add payment to channel \n                    // add channel id to waiting to confirm channel list\n                    // also verify waiting time is over or not\n                }\n                if (this.state.sender === element.returnValues[1]) {\n                    let key = this.state.sender + 'waiting_channel_ids'\n                    let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                    let channel_id = Number.parseInt(element.returnValues[2], 10)\n                    let index = waiting_channels.indexOf(channel_id);\n                    if (index < 0) {\n                        waiting_channels.push(channel_id)\n                        localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    }\n                    console.log(\"waiting channels \", waiting_channels)\n                }\n            }\n            else if (element.event === 'EventInitialized') {\n                // triggered when channel confirmed by both parties.\n                // console.log(element.returnValues[0], element.returnValues[1], element.returnValues[2])\n                // event EventInitialized(uint cashAlice, uint cashBob, uint channel_id);\n                let channel_id = Number.parseInt(element.returnValues[2], 10)\n                IsMyChannel(channel_id, this.state.sender).then(result => {\n                    if (result) {\n                        let key = this.state.sender + 'active_channel_ids'\n                        let active_channel_ids = JSON.parse(localStorage.getItem(key) || \"[]\")\n\n                        let index = active_channel_ids.indexOf(channel_id);\n                        if (index < 0) {\n                            active_channel_ids.push(channel_id)\n                            localStorage.setItem(key, JSON.stringify(active_channel_ids));\n                            key = this.state.sender + channel_id + '_last_signed_state'\n\n                        }\n                        key = this.state.sender + 'waiting_channel_ids'\n                        let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                        index = waiting_channels.indexOf(channel_id);\n                        if (index > -1) {\n                            waiting_channels.splice(index, 1);\n                            localStorage.setItem(key, JSON.stringify(waiting_channels));\n\n                        }\n                        key = this.state.sender + channel_id + '_last_signed_state'\n                        let value = localStorage.getItem(key)\n                        if (value == null) {\n                            GetChannelDetails(channel_id).then(onChainState => {\n                                let count = 0\n                                let alice_cash = onChainState[\"Alice Cash\"]\n                                let bob_cash = onChainState[\"Bob Cash\"]\n                                value = channel_id + '_' + count + '_' + alice_cash + '_' + bob_cash + '_default_sign'\n                                localStorage.setItem(key, value)\n                                console.log(onChainState)\n                            }).catch(err => {\n                                alert(\"on chain state issue\")\n                                console.log(err)\n                            })\n                        }\n                        console.log(\"active_channel_ids\", active_channel_ids)\n                        console.log(\"waiting_channel_ids\", waiting_channels)\n                    }\n                }).catch(err => {\n                    alert(\"contract connectivity issue\")\n                    console.log(err)\n                })\n\n            }\n            else if (element.event === 'EventRefunded') {\n                // event EventRefunded(uint channel_id);\n                let channel_id = Number.parseInt(element.returnValues[0], 10)\n                let key = this.state.sender + 'waiting_channel_ids'\n                let waiting_channels = JSON.parse(localStorage.getItem(key) || \"[]\")\n                let index = waiting_channels.indexOf(channel_id);\n                if (index > -1) {\n                    waiting_channels.splice(index, 1);\n                    localStorage.setItem(key, JSON.stringify(waiting_channels));\n                    console.log(\"waiting channels \", waiting_channels)\n                    key = this.state.sender + channel_id + '_last_signed_state'\n                    // TODO: update logice so that this will be independent from last blocked fetched\n                    localStorage.removeItem(key)\n                }\n                console.log('element.returnValues', element.returnValues)\n            }\n            else if (element.event === 'EventClosing') {\n                // event EventClosing(uint channel_id);\n            }\n            else if (element.event === 'EventClosed') {\n                // event EventClosed(uint channel_id);\n            }\n            else if (element.event === 'EventNotClosed') {\n                // event EventNotClosed(uint channel_id);\n            }\n        });\n    }\n\n    handlerEvents = async (event) => {\n        event.preventDefault();\n\n    }\n\n    render() {\n        return (\n            <>\n                <div>\n                    <p><button onClick={this.fetchEventFilter}>Apply Event Filter </button></p>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default FetchContractTxn;\n"]},"metadata":{},"sourceType":"module"}