{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/OpenChannel.js\";\nimport React from 'react';\nimport { ChannelConfirm } from '../contract/contract_transaction';\nimport { FetchAccount } from './MetaMaskFetch'; // import { toast } from 'react-toastify'\n// onClick={() => {\n//     const min = 10000000;\n//     const max = 100000000;\n//     const rand = Math.floor(min + Math.random() * (max - min));\n//     console.log(rand)\n//     props.createNewChannel(rand, user.address).then(() => {\n//         // Add Channel Id in List\n//         // set default state as an last state\n//         // set listening socket from UserList \n//         toast.success(\"Channel Created with id \" + rand);\n//     });\n// }}\n\nclass OpenChannel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sender: \"\",\n      address: \"\",\n      amount: '',\n      amountError: \"\"\n    };\n\n    this.handleConfirmChannel = async event => {\n      event.preventDefault();\n      this.setState({\n        'channelIdError': \"\"\n      });\n      this.setState({\n        'amountError': \"\"\n      });\n\n      if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n        this.setState({\n          'channelIdError': \"Enter Interger channel Id\"\n        });\n      } else if (Number.isNaN(parseInt(this.state.amount, 10))) {\n        this.setState({\n          'amountError': \"Enter Integer amount(in wei unit)\"\n        });\n      } else {\n        ChannelConfirm(this.state.channelId, this.state.amount);\n      }\n\n      this.setState({\n        'channelId': \"\"\n      });\n      this.setState({\n        'amount': \"\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender); // let key = this.state.sender + 'active_channel_ids'\n\n        this.setState({\n          'address': this.props.address\n        });\n        this.setState({\n          'action': this.props.location.state.action\n        });\n        console.log(this.state.action, this.state.channelId);\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      id: \"form\",\n      onSubmit: this.handleConfirmChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"channelId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Channel Id\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"channelId\",\n      type: \"text\",\n      onChange: event => this.setState({\n        channelId: event.target.value\n      }),\n      name: \"channelId\",\n      className: \"form-control\",\n      value: this.state.channelId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), this.state.channelIdError && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.channelIdError)), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"amount\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Amount\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"amount\",\n      type: \"text\",\n      onChange: event => this.setState({\n        amount: event.target.value\n      }),\n      name: \"amount\",\n      className: \"form-control\",\n      value: this.state.amount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), this.state.amountError && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.state.amountError)), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Deposit Amount\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default OpenChannel;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/OpenChannel.js"],"names":["React","ChannelConfirm","FetchAccount","OpenChannel","Component","state","sender","address","amount","amountError","handleConfirmChannel","event","preventDefault","setState","Number","isNaN","parseInt","channelId","componentDidMount","then","console","log","props","location","action","catch","err","alert","render","target","value","channelIdError"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ChannelConfirm } from '../contract/contract_transaction';\nimport { FetchAccount } from './MetaMaskFetch';\n// import { toast } from 'react-toastify'\n\n// onClick={() => {\n//     const min = 10000000;\n//     const max = 100000000;\n//     const rand = Math.floor(min + Math.random() * (max - min));\n//     console.log(rand)\n//     props.createNewChannel(rand, user.address).then(() => {\n//         // Add Channel Id in List\n//         // set default state as an last state\n//         // set listening socket from UserList \n//         toast.success(\"Channel Created with id \" + rand);\n//     });\n// }}\n\n\nclass OpenChannel extends React.Component {\n    state = {\n        sender: \"\",\n        address: \"\",\n        amount: '',\n        amountError: \"\",\n    };\n\n    componentDidMount() {\n        FetchAccount().then(sender => {\n            if (sender) {\n                this.setState({ 'sender': sender })\n                console.log(this.state.sender)\n                // let key = this.state.sender + 'active_channel_ids'\n                this.setState({ 'address': this.props.address })\n                this.setState({ 'action': this.props.location.state.action })\n                console.log(this.state.action, this.state.channelId)\n\n            }\n        }).catch(err => {\n            alert(\"check metamask connectivity\")\n            console.log(err)\n        })\n    }\n\n    handleConfirmChannel = async (event) => {\n        event.preventDefault();\n        this.setState({ 'channelIdError': \"\" })\n        this.setState({ 'amountError': \"\" })\n        if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n            this.setState({ 'channelIdError': \"Enter Interger channel Id\" })\n        }\n        else if (Number.isNaN(parseInt(this.state.amount, 10))) {\n            this.setState({ 'amountError': \"Enter Integer amount(in wei unit)\" })\n        }\n        else {\n            ChannelConfirm(this.state.channelId, this.state.amount)\n        }\n        this.setState({ 'channelId': \"\" })\n        this.setState({ 'amount': \"\" })\n    }\n\n    render() {\n        return (\n            <div>\n                <form id=\"form\" onSubmit={this.handleConfirmChannel}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"channelId\">Channel Id</label>\n                        <div className=\"field\">\n                            <input\n                                id=\"channelId\"\n                                type=\"text\"\n                                onChange={event => this.setState({ channelId: event.target.value })}\n                                name=\"channelId\"\n                                className=\"form-control\"\n                                value={this.state.channelId}\n                            />\n                        </div>\n                        {this.state.channelIdError && <div className=\"alert alert-danger\">{this.state.channelIdError}</div>}\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"amount\">Amount</label>\n                        <div className=\"field\">\n                            <input\n                                id=\"amount\"\n                                type=\"text\"\n                                onChange={event => this.setState({ amount: event.target.value })}\n                                name=\"amount\"\n                                className=\"form-control\"\n                                value={this.state.amount}\n                            />\n                        </div>\n                        {this.state.amountError && <div className=\"alert alert-danger\">{this.state.amountError}</div>}\n                    </div>\n                    <input type=\"submit\" value=\"Deposit Amount\" className=\"btn btn-primary\" />\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default OpenChannel;"]},"metadata":{},"sourceType":"module"}