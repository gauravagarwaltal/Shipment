{"ast":null,"code":"var _jsxFileName = \"/home/gaurava/work/learning/react/shipment/src/components/DashBoard.js\";\nimport React from \"react\"; // import { toast } from \"react-toastify\";\n\nimport { GetChannelDetails, IsMyChannel } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\n\nclass DashBoardView extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeChannelIdError: false,\n      activeChannelId: \"\",\n      waitingChannelIdError: false,\n      waitingChannelId: '',\n      details: \"\",\n      value: \"\",\n      operation: \"\",\n      sender: \"\",\n      channels: []\n    };\n\n    this.handleChannelIdUpdate = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        alert(\"Check MetaMask Connectivity\");\n      }\n\n      this.setState({\n        'errors': \"\"\n      });\n\n      if (this.state.value != parseInt(this.state.value, 10)) {\n        this.setState({\n          'errors': \"Enter Interger channel Id\"\n        });\n      } else if (this.state.operation === \"\") {\n        this.setState({\n          'errors': \"select radio button\"\n        });\n      } else {\n        let key = this.state.sender + 'active_channel_ids';\n\n        if (this.state.operation === \"add\") {\n          let flag = await IsMyChannel(this.state.value, this.state.sender);\n          let index = this.state.channels.indexOf(this.state.value);\n\n          if (flag && index < 0) {\n            this.state.channels.push(this.state.value);\n            localStorage.setItem(key, JSON.stringify(this.state.channels));\n            console.log(\"onAddChange Called \", this.state.value, flag, index);\n          }\n        } else {\n          let flag = await IsMyChannel(this.state.value, this.state.sender);\n          let index = this.state.channels.indexOf(this.state.value);\n\n          if (!flag && index > -1) {\n            this.state.channels.splice(index, 1);\n            localStorage.setItem(key, JSON.stringify(this.state.channels));\n            console.log(\"onDeleteChange Called \", this.state.value, flag, index);\n          }\n        }\n      }\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n\n      if (this.state.sender === undefined || this.state.sender === null) {\n        alert(\"Check MetaMask Connectivity\");\n      }\n\n      this.setState({\n        'errors': \"\"\n      });\n\n      if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n        this.setState({\n          'errors': \"Enter Interger channel Id\"\n        });\n      } else {\n        let value = await GetChannelDetails(this.state.channelId);\n        this.setState({\n          'details': value\n        });\n      }\n    };\n\n    this.onValueChange = async event => this.setState({\n      'value': event.target.value\n    });\n\n    this.onActiveChannelIdChange = async event => this.setState({\n      'activeChannelId': event.target.value\n    });\n\n    this.onWaitingChannelIdChange = async event => this.setState({\n      'waitingChannelId': event.target.value\n    });\n\n    this.onOptionChange = async event => this.setState({\n      'channelId': event.target.value\n    });\n\n    this.onRadioChange = async event => this.setState({\n      'operation': event.target.value\n    });\n  }\n\n  componentDidMount() {\n    // const slug = this.props.match.params.channel_id;\n    // console.log(this.props)\n    // console.log(slug);\n    FetchAccount().then(sender => {\n      if (sender) {\n        this.setState({\n          'sender': sender\n        });\n        console.log(this.state.sender);\n        let key = this.state.sender + 'active_channel_ids'; // this.setState({ 'channels': JSON.parse(localStorage.getItem(key) || \"[]\") })\n      }\n    }).catch(err => {\n      alert(\"check metamask connectivity\");\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"DashBoard\"), React.createElement(\"button\", {\n      className: \"refresh\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Active Channel Ids\"), React.createElement(\"form\", {\n      id: \"form\",\n      onSubmit: this.activeChannelIdHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(ChannelList, {\n      storage_key: this.state.sender + 'active_channel_ids',\n      onChange: this.onActiveChannelIdChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), this.state.activeChannelIdError && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.activeChannelIdError), React.createElement(\"button\", {\n      id: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"check Active Channel Status\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Waiting Channel Ids\"), React.createElement(\"form\", {\n      id: \"form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"channelId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Channel Id\"), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(ChannelList, {\n      sender: this.state.sender,\n      onChange: this.onOptionChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), this.state.waitingChannelIdError && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.state.waitingChannelIdError)), React.createElement(\"button\", {\n      id: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"check Waiting Channel Status\")), this.state.errors === '' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Channel Details of channel id -> \", this.state.channelId), React.createElement(ManageDetailsView, {\n      details: this.state.details,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })))));\n  }\n\n}\n\n;\nexport default DashBoardView;","map":{"version":3,"sources":["/home/gaurava/work/learning/react/shipment/src/components/DashBoard.js"],"names":["React","GetChannelDetails","IsMyChannel","ManageDetailsView","ChannelList","FetchAccount","DashBoardView","Component","state","activeChannelIdError","activeChannelId","waitingChannelIdError","waitingChannelId","details","value","operation","sender","channels","handleChannelIdUpdate","event","preventDefault","undefined","alert","setState","parseInt","key","flag","index","indexOf","push","localStorage","setItem","JSON","stringify","console","log","splice","handleSubmit","Number","isNaN","channelId","onValueChange","target","onActiveChannelIdChange","onWaitingChannelIdChange","onOptionChange","onRadioChange","componentDidMount","then","catch","err","render","activeChannelIdHandler","errors"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { toast } from \"react-toastify\";\nimport { GetChannelDetails, IsMyChannel } from \"../contract/contract_transaction\";\nimport ManageDetailsView from \"./ManageDetailsView\";\nimport ChannelList from \"./ChannelList\";\nimport { FetchAccount } from \"./MetaMaskFetch\";\n\nclass DashBoardView extends React.Component {\n    state = {\n        activeChannelIdError: false,\n        activeChannelId: \"\",\n        waitingChannelIdError: false,\n        waitingChannelId: '',\n        details: \"\",\n        value: \"\",\n        operation: \"\",\n        sender: \"\",\n        channels: [],\n\n    }\n\n    componentDidMount() {\n        // const slug = this.props.match.params.channel_id;\n        // console.log(this.props)\n        // console.log(slug);\n        FetchAccount().then(sender => {\n            if (sender) {\n                this.setState({ 'sender': sender })\n                console.log(this.state.sender)\n                let key = this.state.sender + 'active_channel_ids'\n                // this.setState({ 'channels': JSON.parse(localStorage.getItem(key) || \"[]\") })\n\n            }\n\n        })\n            .catch(err => {\n                alert(\"check metamask connectivity\")\n                console.log(err)\n            })\n    }\n\n    handleChannelIdUpdate = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            alert(\"Check MetaMask Connectivity\")\n        }\n        this.setState({ 'errors': \"\" });\n        if (this.state.value != parseInt(this.state.value, 10)) {\n            this.setState({ 'errors': \"Enter Interger channel Id\" })\n        } else if (this.state.operation === \"\") {\n            this.setState({ 'errors': \"select radio button\" })\n        }\n        else {\n            let key = this.state.sender + 'active_channel_ids'\n            if (this.state.operation === \"add\") {\n                let flag = await IsMyChannel(this.state.value, this.state.sender)\n                let index = this.state.channels.indexOf(this.state.value);\n                if (flag && index < 0) {\n                    this.state.channels.push(this.state.value)\n                    localStorage.setItem(key, JSON.stringify(this.state.channels));\n                    console.log(\"onAddChange Called \", this.state.value, flag, index)\n                }\n\n            }\n            else {\n                let flag = await IsMyChannel(this.state.value, this.state.sender)\n                let index = this.state.channels.indexOf(this.state.value);\n                if (!flag && index > -1) {\n                    this.state.channels.splice(index, 1);\n                    localStorage.setItem(key, JSON.stringify(this.state.channels));\n                    console.log(\"onDeleteChange Called \", this.state.value, flag, index)\n                }\n\n            }\n        }\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        if (this.state.sender === undefined || this.state.sender === null) {\n            alert(\"Check MetaMask Connectivity\")\n        }\n        this.setState({ 'errors': \"\" });\n        if (Number.isNaN(parseInt(this.state.channelId, 10))) {\n            this.setState({ 'errors': \"Enter Interger channel Id\" })\n        }\n        else {\n            let value = await GetChannelDetails(this.state.channelId)\n            this.setState({ 'details': value })\n        }\n    }\n\n    onValueChange = async (event) => this.setState({ 'value': event.target.value });\n\n    onActiveChannelIdChange = async (event) => this.setState({ 'activeChannelId': event.target.value });\n\n    onWaitingChannelIdChange = async (event) => this.setState({ 'waitingChannelId': event.target.value });\n\n    onOptionChange = async (event) => this.setState({ 'channelId': event.target.value });\n\n    onRadioChange = async (event) => this.setState({ 'operation': event.target.value });\n\n    render() {\n        return (\n            <>\n                <h2>DashBoard</h2>\n                <button className=\"refresh\"></button>\n                <div>\n                    <div>\n                        <h3>Active Channel Ids</h3>\n                        <form id=\"form\" onSubmit={this.activeChannelIdHandler}>\n                            <ChannelList storage_key={this.state.sender + 'active_channel_ids'} onChange={this.onActiveChannelIdChange} />\n                            {this.state.activeChannelIdError && <div className=\"alert alert-danger\">{this.state.activeChannelIdError}</div>}\n                            <button id=\"button\">check Active Channel Status</button>\n                        </form>\n                    </div>\n                    <div>\n                        <h3>Waiting Channel Ids</h3>\n                        <form id=\"form\" onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"channelId\">Channel Id</label>\n                                <div className=\"field\">\n                                    <ChannelList sender={this.state.sender} onChange={this.onOptionChange} />\n                                </div>\n                                {this.state.waitingChannelIdError && <div className=\"alert alert-danger\">{this.state.waitingChannelIdError}</div>}\n                            </div>\n                            <button id=\"button\">check Waiting Channel Status</button>\n                        </form>\n                        {(this.state.errors === '') && (\n                            <div >\n                                <h2>Channel Details of channel id -> {this.state.channelId}</h2>\n                                <ManageDetailsView details={this.state.details} />\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default DashBoardView;\n"]},"metadata":{},"sourceType":"module"}